<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Photon.SocketServer</name>
    </assembly>
    <members>
        <member name="T:Photon.SocketServer.ApplicationBase">
            <summary>
              The base class for a Photon application. 
              The main method to override is <see cref="M:Photon.SocketServer.ApplicationBase.CreatePeer(Photon.SocketServer.InitRequest)">CreatePeer</see>. 
              See <see cref="M:Photon.SocketServer.ApplicationBase.Setup">Setup</see> for initialization recommendations.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ApplicationBase.log">
            <summary>
              An <see cref="T:ExitGames.Logging.ILogger"/> instance used to log messages to the logging framework.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ApplicationBase.operationDataLogger">
            <summary>
              An <see cref="T:ExitGames.Logging.ILogger"/> instance used to log operations to the logging framework.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ApplicationBase.applicationPath">
            <summary>
              The application path.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ApplicationBase.binaryPath">
            <summary>
              The binary path.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ApplicationBase.applicationRootPath">
            <summary>
              The application path.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ApplicationBase.peerCount">
            <summary>
              The current number of peers.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ApplicationBase.running">
            <summary>
              Set at <see cref="M:PhotonHostRuntimeInterfaces.IPhotonControl.OnPhotonRunning"/> to 1 and at <see cref="M:PhotonHostRuntimeInterfaces.IPhotonControl.OnStopRequested"/> to 0.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.ApplicationBase.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.ApplicationBase"/> class.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.ApplicationBase.BroadCastEvent``1(Photon.SocketServer.IEventData,System.Collections.Generic.IEnumerable{``0},Photon.SocketServer.SendParameters)">
            <summary>
             Sends an event to a list of peers.
             This method serializes the data just once per protocol instead of once per peer.
            </summary>
            <typeparam name="TPeer">A <see cref="T:Photon.SocketServer.PeerBase"/> subclass type.</typeparam>
            <param name="eventData">The event to send.</param>
            <param name="peers">The peers to send the event to.</param>
            <param name="sendParameters">The send options.</param>
        </member>
        <member name="M:Photon.SocketServer.ApplicationBase.ConnectToServerTcp(System.Net.IPEndPoint,System.String,System.Object)">
            <summary>
              Establishes a TCP connection between two Photon instances.
              <see cref="M:Photon.SocketServer.ApplicationBase.CreateServerPeer(Photon.SocketServer.InitResponse,System.Object)"/> is called once the connection is established.
              <see cref="M:Photon.SocketServer.ApplicationBase.OnServerConnectionFailed(System.Int32,System.String,System.Object)"/> is called if the connection fails.  
            </summary>
            <param name="remoteEndPoint">
              The remote endpoint to connect to.
            </param>
            <param name="applicationName">
              The application name to connect to.
            </param>
            <param name="state">
              A state object that is returned with the callback.
            </param>
            <returns>
              Returns true if outbound connections are allowed (if <see cref="P:Photon.SocketServer.ApplicationBase.Running"/> is true).
            </returns>
        </member>
        <member name="M:Photon.SocketServer.ApplicationBase.ConnectToServerTcp(System.Net.IPEndPoint,System.String,System.Object,Photon.SocketServer.IRpcProtocol)">
            <summary>
              Establishes a TCP connection between two Photon instances.
              <see cref="M:Photon.SocketServer.ApplicationBase.CreateServerPeer(Photon.SocketServer.InitResponse,System.Object)"/> is called once the connection is established.
              <see cref="M:Photon.SocketServer.ApplicationBase.OnServerConnectionFailed(System.Int32,System.String,System.Object)"/> is called if the connection fails.  
            </summary>
            <param name="remoteEndPoint">
              The remote endpoint to connect to.
            </param>
            <param name="applicationName">
              The application name to connect to.
            </param>
            <param name="state">
              A state object that is returned with the callback.
            </param>
            <param name="protocol">
            The <see cref="T:Photon.SocketServer.IRpcProtocol"/> used to serialze message data./&gt;
            </param>
            <returns>
              Returns true if outbound connections are allowed (if <see cref="P:Photon.SocketServer.ApplicationBase.Running"/> is true).
            </returns>
        </member>
        <member name="M:Photon.SocketServer.ApplicationBase.ConnectToServerMuxTcp(System.Net.IPEndPoint,System.String,System.Object)">
            <summary>
              Establishes a logical, multiplexed TCP connection between two Photon instances. Multiple logical connections are sharing a single physical connection.
              <see cref="M:Photon.SocketServer.ApplicationBase.CreateServerPeer(Photon.SocketServer.InitResponse,System.Object)"/> is called once a logical connection is established.
              <see cref="M:Photon.SocketServer.ApplicationBase.OnServerConnectionFailed(System.Int32,System.String,System.Object)"/> is called if the logical connection fails.
              If a phyiscal connection exists when <see cref="M:Photon.SocketServer.ApplicationBase.ConnectToServerMuxTcp(System.Net.IPEndPoint,System.String,System.Object)"/> is called, it is used; otherwise a physical connection is established. 
              If the physical connection is aborted, all logical connections are aborted as well. 
            </summary>
            <param name="remoteEndPoint">
              The remote endpoint to connect to.
            </param>
            <param name="applicationName">
              The application name to connect to.
            </param>
            <param name="state">
              A state object that is returned with the callback.
            </param>
            <returns>
              Returns true if outbound connections are allowed (if <see cref="P:Photon.SocketServer.ApplicationBase.Running"/> is true).
            </returns>
        </member>
        <member name="M:Photon.SocketServer.ApplicationBase.ConnectToServerUdp(System.Net.IPEndPoint,System.String,System.Object,System.Byte,System.Nullable{System.Int16})">
            <summary>
            Establishes an UDP connection between two Photon instances.
              <see cref="M:Photon.SocketServer.ApplicationBase.CreateServerPeer(Photon.SocketServer.InitResponse,System.Object)"/> is called once the connection is established.
              <see cref="M:Photon.SocketServer.ApplicationBase.OnServerConnectionFailed(System.Int32,System.String,System.Object)"/> is called if the connection fails.
            </summary>
            <param name="remoteEndPoint">
            The remote endpoint to connect to.
            </param>
            <param name="applicationName">
            The application name to connect to.
            </param>
            <param name="state">
            A state object that is returned with the callback.
            </param>
            <param name="numChannels">
            The number of channels used by the connection. Channels are prioritized (the lower the channel number, the higher the priority) 
            </param>
            <param name="mtu">
            Maximum transfer unit - specifies the max data size of each UDP package (in bytes). Bigger packages will be fragmented. The default value is 1200.
            </param>
            <returns>
            Returns true if outbound connections are allowed (if <see cref="P:Photon.SocketServer.ApplicationBase.Running"/> is true).
            </returns>
        </member>
        <member name="M:Photon.SocketServer.ApplicationBase.ConnectToServerWebSocketHixie76(System.Net.IPEndPoint,System.String,System.Object,System.String)">
            <summary>
            Establishes an WebSocket connection between two Photon instances, using the Hixie76 WebSocket protocol.
              <see cref="M:Photon.SocketServer.ApplicationBase.CreateServerPeer(Photon.SocketServer.InitResponse,System.Object)"/> is called once the connection is established.
              <see cref="M:Photon.SocketServer.ApplicationBase.OnServerConnectionFailed(System.Int32,System.String,System.Object)"/> is called if the connection fails.
            </summary>
            <param name="remoteEndPoint">
            The remote endpoint to connect to.
            </param>
            <param name="applicationName">
            The application name to connect to.
            </param>
            <param name="state">
            A state object that is returned with the callback.
            </param>
            <param name="origin">
            The origin of the request.
            </param>
            <returns>
            Returns true if outbound connections are allowed (if <see cref="P:Photon.SocketServer.ApplicationBase.Running"/> is true).
            </returns>
        </member>
        <member name="M:Photon.SocketServer.ApplicationBase.ConnectToServerWebSocket(System.Net.IPEndPoint,System.String,System.Object,PhotonHostRuntimeInterfaces.WebSocketVersion,Photon.SocketServer.IRpcProtocol)">
            <summary>
            Establishes an WebSocket connection between two Photon instances.
              <see cref="M:Photon.SocketServer.ApplicationBase.CreateServerPeer(Photon.SocketServer.InitResponse,System.Object)"/> is called once the connection is established.
              <see cref="M:Photon.SocketServer.ApplicationBase.OnServerConnectionFailed(System.Int32,System.String,System.Object)"/> is called if the connection fails.
            </summary>
            <param name="remoteEndPoint">
            The remote endpoint to connect to.
            </param>
            <param name="applicationName">
            The application name to connect to.
            </param>
            <param name="state">
            A state object that is returned with the callback.
            </param>
            <param name="webSocketVersion">
            The websocket protocol version (currently supported: RF6455 and HyBi10)
            </param>
            <param name="protocol">
            The protocol to serialize the message data. 
            </param>
            <returns>
            Returns true if outbound connections are allowed (if <see cref="P:Photon.SocketServer.ApplicationBase.Running"/> is true).
            </returns>
        </member>
        <member name="M:Photon.SocketServer.ApplicationBase.PhotonHostRuntimeInterfaces#IPhotonApplication#OnDisconnect(PhotonHostRuntimeInterfaces.IPhotonPeer,System.Object,PhotonHostRuntimeInterfaces.DisconnectReason,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Called by the unmanaged socket server if a peer disconnects (or is disconnected).
            </summary>
            <param name="photonPeer">
            The peer which disconnected.
            </param>
            <param name="userData">
            The user data.
            </param>
            <param name="reasonCode">
            The disconnect reason code.
            </param>
            <param name="reasonDetail">
            The disconnect reason detail.
            </param>
            <param name="rtt">
            The round trip time.
            </param>
            <param name="rttVariance">
            The round trip time variance.
            </param>
            <param name="numFailures">
            The amount of failures. 
            </param>
        </member>
        <member name="M:Photon.SocketServer.ApplicationBase.PhotonHostRuntimeInterfaces#IPhotonApplication#OnFlowControlEvent(PhotonHostRuntimeInterfaces.IPhotonPeer,System.Object,PhotonHostRuntimeInterfaces.FlowControlEvent)">
            <summary>
              Called by the unmanaged socket server when a peer's send buffer reaches it's limit or is freed again.
            </summary>
            <param name = "photonPeer">
              The unmanaged peer.
            </param>
            <param name = "userData">
              The user data.
            </param>
            <param name = "flowControlEvent">
              The flow control event.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ApplicationBase.PhotonHostRuntimeInterfaces#IPhotonApplication#OnInit(PhotonHostRuntimeInterfaces.IPhotonPeer,System.Byte[],System.Byte)">
            <summary>
              Called by the unmanaged socket server when a peer intializes the connection.
              This method determines the used rpc protocol and then calls <see cref="M:Photon.SocketServer.ApplicationBase.CreatePeer(Photon.SocketServer.InitRequest)">CreatePeer</see>.
            </summary>
            <param name="nativePeer">
              The photon peer.
            </param>
            <param name="data">
              The data.
            </param>
            <param name="channelCount">
            The number of channels that will be used by this peer. 
            </param>
        </member>
        <member name="M:Photon.SocketServer.ApplicationBase.PhotonHostRuntimeInterfaces#IPhotonApplication#OnOutboundConnectionEstablished(PhotonHostRuntimeInterfaces.IPhotonPeer,System.Byte[],System.Object)">
            <summary>
              Callback for established outbound connections.
            </summary>
            <param name = "photonPeer">The photon peer.</param>
            <param name="data">Contains the response headers from the handshake negotiation for outbound websocket connections; empty for all other connection types.</param>
            <param name = "userData">The user data.</param>
        </member>
        <member name="M:Photon.SocketServer.ApplicationBase.PhotonHostRuntimeInterfaces#IPhotonApplication#OnOutboundConnectionFailed(PhotonHostRuntimeInterfaces.IPhotonPeer,System.Object,System.Int32,System.String)">
            <summary>
              Callback for failed outbound connections.
            </summary>
            <param name = "photonPeer">
              The photon peer.
            </param>
            <param name = "userData">
              The user data.
            </param>
            <param name = "errorCode">
              The error Code.
            </param>
            <param name = "errorMessage">
              The error message
            </param>
        </member>
        <member name="M:Photon.SocketServer.ApplicationBase.PhotonHostRuntimeInterfaces#IPhotonApplication#OnReceive(PhotonHostRuntimeInterfaces.IPhotonPeer,System.Object,System.Byte[],PhotonHostRuntimeInterfaces.MessageReliablity,System.Byte,PhotonHostRuntimeInterfaces.MessageContentType,System.Int32,System.Int32,System.Int32)">
            <summary>
            Called by the unmanaged socket server when new data was received.
            </summary>
            <param name="photonPeer">
            The peer who sent the operation.
            </param>
            <param name="userData">
            The user data.
            </param>
            <param name="data">
            The data for the operation.
            </param>
            <param name="reliability">
            Message reliable flags for the operation.
            </param>
            <param name="channelId">
            The channel ID.
            </param>
            <param name="MessageContentType">
            The Message Content Type.
            </param>
            <param name="rtt">
            The round trip time.
            </param>
            <param name="rttVariance">
            The round trip time variance.
            </param>
            <param name="numFailures">
            The number of failures.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ApplicationBase.OnStart(System.String,System.String,PhotonHostRuntimeInterfaces.IPhotonApplicationSink,PhotonHostRuntimeInterfaces.IControlListeners,PhotonHostRuntimeInterfaces.IPhotonApplicationsCounter,System.String)">
            <summary>
            Called when the application is started.
              This method calls <see cref="M:Photon.SocketServer.ApplicationBase.Setup"/>.
            </summary>
            <param name="instanceName">
            The name of the instance.
            </param>
            <param name="applicationName">
            Name of the application.
            </param>
            <param name="sink">
            The sink.
            </param>
            <param name="controlListners">
            The photon listener controler
             </param>
            <param name="unmanagedLogDirectory">
            The log path of Photon. 
            </param>
            <returns>
            PhotonApplication object.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.ApplicationBase.PhotonHostRuntimeInterfaces#IPhotonControl#OnPhotonRunning">
            <summary>
              This method is called when photon is ready to serve new connections with the current application.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.ApplicationBase.PhotonHostRuntimeInterfaces#IPhotonControl#OnStop">
            <summary>
              Called when the application is stopped.
              This method calls <see cref="M:Photon.SocketServer.ApplicationBase.TearDown"/>.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.ApplicationBase.PhotonHostRuntimeInterfaces#IPhotonControl#OnStopRequested">
            <summary>
              Called when photon starts a new app domain for the same application.
              New connections will connect to the new app domain.
              This app domain continues to receive operations from existing connections until the last peer disconnects.
            </summary>
            <remarks>
              This feature requires the EnableAutoRestart setting in the PhotonServer.config. 
              Please refer to the configuration manual for more details.
            </remarks>
        </member>
        <member name="M:Photon.SocketServer.ApplicationBase.DecrementPeerCounter">
            <summary>
              Decrements the peer counter.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.ApplicationBase.IncrementPeerCounter">
            <summary>
              Increments the peer counter.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.ApplicationBase.CreateServerPeer(Photon.SocketServer.InitResponse,System.Object)">
            <summary>
              Callback of <see cref="M:Photon.SocketServer.ApplicationBase.ConnectToServer(System.Net.IPEndPoint,System.String,System.Object)"/> when the connection attempt succeeds.
              The inheritor can return an instance of <see cref="T:Photon.SocketServer.ServerToServer.ServerPeerBase"/>; the default implementation returns null.
            </summary>
            <param name="initResponse">
              The init response from the application the peer connected to.
            </param>
            <param name="state">
              A state object.
            </param>
            <returns>
              An instance of <see cref="T:Photon.SocketServer.ServerToServer.ServerPeerBase"/> or null.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.ApplicationBase.CreatePeer(Photon.SocketServer.InitRequest)">
            <summary>
              This method is called by the <see cref="M:PhotonHostRuntimeInterfaces.IPhotonApplication.OnInit(PhotonHostRuntimeInterfaces.IPhotonPeer,System.Byte[],System.Byte)">IPhotonApplication.OnInit</see> implementation of this class.
              The inheritor should return a <see cref="T:Photon.SocketServer.PeerBase"/> implementation.
            </summary>
            <param name="initRequest">
              The initialization request.
            </param>
            <returns>
              A new instance of <see cref="T:Photon.SocketServer.PeerBase"/> or  null.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.ApplicationBase.OnServerConnectionFailed(System.Int32,System.String,System.Object)">
            <summary>
              Callback of <see cref="M:Photon.SocketServer.ApplicationBase.ConnectToServer(System.Net.IPEndPoint,System.String,System.Object)"/> when the connection attempt fails.
            </summary>
            <param name="errorCode">
              The error code.
            </param>
            <param name="errorMessage">
              The error message.
            </param>
            <param name="state">
              The state.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ApplicationBase.OnStopRequested">
            <summary>
              Called when photon starts a new app domain for the same application.
              New connections will connect to the new app domain.
              This app domain continues to receive operations until from existing connections until the last peer disconnects.
            </summary>
            <remarks>
              This feature requires the AutoRestart setting in the PhotonServer.config. 
              Please refer to the configuration manual for more details.
            </remarks>
        </member>
        <member name="M:Photon.SocketServer.ApplicationBase.Setup">
            <summary>
              This method is called when the current application has been started.
              The inheritor can setup log4net here and execute other initialization routines here.
            </summary>
            <example>
              log4net initialization:
              <code>
                private static readonly ILogger log = LogManager.GetCurrentClassLogger();
                protected override void Setup()
                {
                // configure log4net with a config file
                var configFileInfo = new FileInfo(Path.Combine(this.BinaryPath, "log4net.config"));
                XmlConfigurator.ConfigureAndWatch(configFileInfo);
            
                // redirect photon sdk internal logging to log4net
                ExitGames.Logging.LogManager.SetLoggerFactory(ExitGames.Logging.Log4Net.Log4NetLoggerFactory.Instance);
                }
              </code>
            </example>
        </member>
        <member name="M:Photon.SocketServer.ApplicationBase.TearDown">
            <summary>
              This method is called when the current application is being stopped.
              The inheritor can execute cleanup routines here.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.ApplicationBase.GetBinaryPath(System.String)">
            <summary>
            Helper method to get the path to the current assembly.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.ApplicationBase.Instance">
            <summary>
            Gets the application instance.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.ApplicationBase.ApplicationName">
            <summary>
              Gets the application name set in PhotonServer.config.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.ApplicationBase.ApplicationPath">
            <summary>
              Gets the application path set in PhotonServer.config.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.ApplicationBase.ApplicationRootPath">
            <summary>
              Gets the path of the application root path - base location of all applications.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.ApplicationBase.BinaryPath">
            <summary>
              Gets the path of the application binaries.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.ApplicationBase.PeerCount">
            <summary>
              Gets the number of peers currently connected to the application.
            </summary>
            <value>The peer count.</value>
        </member>
        <member name="P:Photon.SocketServer.ApplicationBase.PhotonInstanceName">
            <summary>
              Gets the name of the photon instance.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.ApplicationBase.Running">
            <summary>
              Gets a value indicating whether the application is running (the time between <see cref="M:Photon.SocketServer.ApplicationBase.Setup"/> and <see cref="M:Photon.SocketServer.ApplicationBase.OnStopRequested"/>).
            </summary>
        </member>
        <member name="P:Photon.SocketServer.ApplicationBase.UnmanagedLogPath">
            <summary>
            Gets the log path of Photon.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.ApplicationBase.ApplicationSink">
            <summary>
              Gets the photon application sink.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Concurrency.ActionQueue">
            <summary>
              This class is an <see cref="T:ExitGames.Concurrency.Fibers.IFiber"/> wrapper. 
              It ensures that async actions are exeucted in a serial manner.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Concurrency.ActionQueue.fiber">
            <summary>
              The fiber.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Concurrency.ActionQueue.owner">
            <summary>
              The owner.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Concurrency.ActionQueue.#ctor(System.Object,ExitGames.Concurrency.Fibers.IFiber)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Concurrency.ActionQueue"/> class.
            </summary>
            <param name="owner">
              The owner.
            </param>
            <param name="fiber">
              The fiber.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Concurrency.ActionQueue.EnqueueAction(System.Action)">
            <summary>
              Enqueues an action into the <see cref="P:Photon.SocketServer.Concurrency.ActionQueue.Fiber"/>.
            </summary>
            <param name="action">
              The action.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Concurrency.ActionQueue.ScheduleAction(System.Action,System.Int64)">
            <summary>
              Schedules an action on the <see cref="P:Photon.SocketServer.Concurrency.ActionQueue.Fiber"/>.
            </summary>
            <param name="action">
              The action.
            </param>
            <param name="timeTilEnqueueInMs">
              The time til enqueue in ms.
            </param>
            <returns>
              a timer control
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Concurrency.ActionQueue.ScheduleActionOnInterval(System.Action,System.Int64)">
            <summary>
              Schedules an action on an interval.
            </summary>
            <param name = "action">
              The action.
            </param>
            <param name = "timeTilEnqueueInMs">
              The time til enqueue in ms.
            </param>
            <returns>
              a timer control
            </returns>
        </member>
        <member name="P:Photon.SocketServer.Concurrency.ActionQueue.Fiber">
            <summary>
              Gets the underlying <see cref="T:ExitGames.Concurrency.Fibers.IFiber"/>.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Concurrency.ActionQueue.Owner">
            <summary>
              Gets the action queue's owner.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.InitResponse">
            <summary>
              Provides initialization request parameter.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.InitResponse.applicationId">
            <summary>
              The application id.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.InitResponse.protocol">
            <summary>
              The rpc protocol.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.InitResponse.#ctor(System.String,Photon.SocketServer.IRpcProtocol)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.InitResponse"/> class.
            </summary>
            <param name="applicationId">
              The application id.
            </param>
            <param name="protocol">
              The rpc Protocol.
            </param>
        </member>
        <member name="P:Photon.SocketServer.InitResponse.ApplicationId">
            <summary>
              Gets the application id.
            </summary>
            <value>The application id.</value>
        </member>
        <member name="P:Photon.SocketServer.InitResponse.ConnectionId">
            <summary>
              Gets the connection id.
            </summary>
            <remarks>
              Peers connected to different ports may have similar connection ids.
            </remarks>
        </member>
        <member name="P:Photon.SocketServer.InitResponse.LocalIP">
            <summary>
              Gets the local IP the client connected to.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.InitResponse.LocalPort">
            <summary>
              Gets the port the client connects to.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.InitResponse.PhotonPeer">
            <summary>
              Gets the native peer.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.InitResponse.Protocol">
            <summary>
              Gets the used rpc protocol.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.InitResponse.RemoteIP">
            <summary>
              Gets the client's IP address.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.InitResponse.RemotePort">
            <summary>
              Gets the port the client connects from.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.EncryptionMethod">
            <summary>
              Specifies the encryption method for <see cref="M:Photon.SocketServer.PeerBase.InitializeEncryption(System.Byte[],Photon.SocketServer.EncryptionMethod)"/>.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.EncryptionMethod.Sha256Pkcs7">
            <summary>
              An SHA256 hash is used as the secret with a PKCS7 padding.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.EncryptionMethod.Md5Iso10126">
            <summary>
              An MD5 hash is used as the secret with a ISO10126 padding
            </summary>
        </member>
        <member name="T:Photon.SocketServer.IRpcProtocol">
            <summary>
              The implementation class supports a specific real time server protocol.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.IRpcProtocol.Serialize(System.IO.Stream,System.Object)">
            <summary>
              Serialze an object to a stream
            </summary>
            <param name = "stream">
              The stream.
            </param>
            <param name = "obj">
              The object to serialize.
            </param>
        </member>
        <member name="M:Photon.SocketServer.IRpcProtocol.SerializeEventData(Photon.SocketServer.EventData)">
            <summary>
              Serializes an <see cref="T:Photon.SocketServer.EventData"/>.
            </summary>
            <param name="eventData">
              The event data.
            </param>
            <returns>
              The serialized event.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.IRpcProtocol.SerializeEventDataEncrypted(Photon.SocketServer.IEventData,Photon.SocketServer.Security.ICryptoProvider)">
            <summary>
              Encrypts an <see cref="T:Photon.SocketServer.EventData"/>.
            </summary>
            <param name="eventData">
              The event data.
            </param>
            <param name="cryptoProvider">
              The crypto provider.
            </param>
            <returns>
              The serialized event.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.IRpcProtocol.SerializeInitRequest(System.String,System.Version)">
            <summary>
              Serialize an init request.
            </summary>
            <param name = "appName">
              The app Name.
            </param>
            <param name = "version">
              The version.
            </param>
            <returns>
              The serialized init response.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.IRpcProtocol.SerializeInitResponse">
            <summary>
              Serialize an init response.
            </summary>
            <returns>
              The serialized init response.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.IRpcProtocol.SerializeInternalOperationRequest(Photon.SocketServer.OperationRequest)">
            <summary>
              Serializes an internal <see cref="T:Photon.SocketServer.OperationRequest"/>.
            </summary>
            <param name="operationRequest">
              The operation request.
            </param>
            <returns>
              The serialized operation request.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.IRpcProtocol.SerializeInternalOperationResponse(Photon.SocketServer.OperationResponse)">
            <summary>
              Serialize an <see cref="T:Photon.SocketServer.OperationResponse"/> for system operations.
            </summary>
            <param name="operationResponse">
              The operation response.
            </param>
            <returns>
              The serialized operation response.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.IRpcProtocol.SerializeOperationRequest(Photon.SocketServer.OperationRequest)">
            <summary>
              Serializes an <see cref="T:Photon.SocketServer.OperationRequest"/>
            </summary>
            <param name="operationRequest">
              The operation request.
            </param>
            <returns>
              A byte array containing the serialized operation request.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.IRpcProtocol.SerializeOperationRequestEncrypted(Photon.SocketServer.OperationRequest,Photon.SocketServer.Security.ICryptoProvider)">
            <summary>
              Serializes an <see cref="T:Photon.SocketServer.OperationRequest"/>
              The operation request data will be encrypted using the specified <see cref="T:Photon.SocketServer.Security.ICryptoProvider"/>.
            </summary>
            <param name="operationRequest">
              The operation request.
            </param>
            <param name="cryptoProvider">
              An <see cref="T:Photon.SocketServer.Security.ICryptoProvider"/> instance used to encrypt the operation request.
            </param>
            <returns>
              A byte array containing the serialized operation request.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.IRpcProtocol.SerializeOperationResponse(Photon.SocketServer.OperationResponse)">
            <summary>
              Serializes an <see cref="T:Photon.SocketServer.OperationResponse"/>.
            </summary>
            <param name="operationResponse">
              The response.
            </param>
            <returns>
              The serialized operation response.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.IRpcProtocol.SerializeOperationResponseEncrypted(Photon.SocketServer.OperationResponse,Photon.SocketServer.Security.ICryptoProvider)">
            <summary>
              Serializes an <see cref="T:Photon.SocketServer.OperationResponse"/>.
              The operation response data will be encrypted using the specified <see cref="T:Photon.SocketServer.Security.ICryptoProvider"/>.
            </summary>
            <param name="operationResponse">
              The response.
            </param>
            <param name="cryptoProvider">
              An <see cref="T:Photon.SocketServer.Security.ICryptoProvider"/> instance used to encrypt the operation response.
            </param>
            <returns>
              The serialized operation response.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.IRpcProtocol.TryConvertParameter(Photon.SocketServer.Rpc.Reflection.ObjectMemberInfo{Photon.SocketServer.Rpc.DataMemberAttribute},System.Object@)">
            <summary>
              Since C# supports many more types than the used protocol some parameters need to be converted.
              This method tries to convert an operation request parameter into to a type that works for a target field or property.
            </summary>
            <param name = "parameterInfo">
              The parameter info.
            </param>
            <param name = "value">
              The value.
            </param>
            <returns>
              True if value has a valid type.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.IRpcProtocol.TryParse(System.IO.Stream,System.Object@)">
            <summary>
              Try to parse an object from a stream.
            </summary>
            <param name = "stream">
              The stream.
            </param>
            <param name = "obj">
              The result object.
            </param>
            <returns>
              True on success.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.IRpcProtocol.TryParseEventData(System.Byte[],Photon.SocketServer.EventData@)">
            <summary>
              Tries to convert a byte array into an <see cref="T:Photon.SocketServer.EventData"/> instance.
              The <paramref name="data"/> was serialized with <see cref="M:Photon.SocketServer.IRpcProtocol.SerializeEventData(Photon.SocketServer.EventData)"/>.
            </summary>
            <param name="data">
              The data.
            </param>
            <param name="eventData">
              The event data.
            </param>
            <returns>
              True on success.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.IRpcProtocol.TryParseEventDataEncrypted(System.Byte[],Photon.SocketServer.Security.ICryptoProvider,Photon.SocketServer.EventData@)">
            <summary>
              Tries to convert a byte array into an <see cref="T:Photon.SocketServer.EventData"/> instance.
              The <paramref name="data"/> was serialized with <see cref="M:Photon.SocketServer.IRpcProtocol.SerializeEventDataEncrypted(Photon.SocketServer.IEventData,Photon.SocketServer.Security.ICryptoProvider)"/>.
            </summary>
            <param name="data">
              The data.
            </param>
            <param name="cryptoProvider">
              The crypto provider.
            </param>
            <param name="eventData">
              The event data.
            </param>
            <returns>
              True on success.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.IRpcProtocol.TryParseMessageHeader(System.Byte[],Photon.SocketServer.Rpc.Protocols.RtsMessageHeader@)">
            <summary>
              Tries to parse the header.
            </summary>
            <param name = "data">
              The data.
            </param>
            <param name = "header">
              The header.
            </param>
            <returns>
              True on success.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.IRpcProtocol.TryParseOperationRequest(System.Byte[],Photon.SocketServer.OperationRequest@)">
            <summary>
              Tries to convert a byte array into an <see cref="T:Photon.SocketServer.OperationRequest"/> instance.
              The <paramref name="data"/> was serialized with <see cref="M:Photon.SocketServer.IRpcProtocol.SerializeOperationRequest(Photon.SocketServer.OperationRequest)"/>.
            </summary>
            <param name="data">
              The data.
            </param>
            <param name="operationRequest">
              The operation Request.
            </param>
            <returns>
              True on success.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.IRpcProtocol.TryParseOperationRequestEncrypted(System.Byte[],Photon.SocketServer.Security.ICryptoProvider,Photon.SocketServer.OperationRequest@)">
            <summary>
              Tries to convert a byte array into an <see cref="T:Photon.SocketServer.OperationRequest"/> instance.
              The <paramref name="data"/> was serialized with <see cref="M:Photon.SocketServer.IRpcProtocol.SerializeOperationRequestEncrypted(Photon.SocketServer.OperationRequest,Photon.SocketServer.Security.ICryptoProvider)"/>.
            </summary>
            <param name="data">
              The data.
            </param>
            <param name="cryptoProvider">
              The crypto Provider.
            </param>
            <param name="operationRequest">
              The operation Request.
            </param>
            <returns>
              True on success.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.IRpcProtocol.TryParseOperationResponse(System.Byte[],Photon.SocketServer.OperationResponse@)">
            <summary>
              Tries to convert a byte array into an <see cref="T:Photon.SocketServer.OperationResponse"/> instance.
              The <paramref name="data"/> was serialized with <see cref="M:Photon.SocketServer.IRpcProtocol.SerializeOperationResponse(Photon.SocketServer.OperationResponse)"/>.
            </summary>
            <param name="data">
              The data.
            </param>
            <param name="operationResponse">
              The operation Response.
            </param>
            <returns>
              True on success.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.IRpcProtocol.TryParseOperationResponseEncrypted(System.Byte[],Photon.SocketServer.Security.ICryptoProvider,Photon.SocketServer.OperationResponse@)">
            <summary>
              Tries to convert a byte array into an <see cref="T:Photon.SocketServer.OperationResponse"/> instance.
              The <paramref name="data"/> was serialized with <see cref="M:Photon.SocketServer.IRpcProtocol.SerializeOperationResponseEncrypted(Photon.SocketServer.OperationResponse,Photon.SocketServer.Security.ICryptoProvider)"/>.
            </summary>
            <param name="data">
              The data.
            </param>
            <param name="cryptoProvider">
              The crypto Provider.
            </param>
            <param name="operationResponse">
              The operation Response.
            </param>
            <returns>
              True on success.
            </returns>
        </member>
        <member name="P:Photon.SocketServer.IRpcProtocol.ProtocolType">
            <summary>
              Gets the type of the protocol.
            </summary>
            <value>The type of the protocol.</value>
        </member>
        <member name="T:Photon.SocketServer.Operations.InitEncryptionRequest">
            <summary>
              Operation request to initialize a peer for ending and receiving encrypted operation requests.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Operation">
            <summary>
              This class is a common base class for operations that have properties flagged with the <see cref="T:Photon.SocketServer.Rpc.DataMemberAttribute"/>.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Rpc.DataContract">
            <summary>
              This class is a common base class for all data contracts.
              Properties flagged with the <see cref="T:Photon.SocketServer.Rpc.DataMemberAttribute"/> can be converted from/to a dictionary.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.DataContract.errorMessage">
            <summary>
              The error message.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.DataContract.invalidParams">
            <summary>
              The invalid params.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.DataContract.isValid">
            <summary>
              The is valid.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.DataContract.missingParams">
            <summary>
              The missing params.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.DataContract.#ctor(Photon.SocketServer.IRpcProtocol,System.Collections.Generic.IDictionary{System.Byte,System.Object})">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Rpc.DataContract"/> class. 
              The params dictionary is mapped to properties flagged with the <see cref="T:Photon.SocketServer.Rpc.DataMemberAttribute"/>.
              Check the <see cref="P:Photon.SocketServer.Rpc.DataContract.IsValid"/> property after creation to determine if all paramters have been initialized correctly.
            </summary>
            <param name="protocol">
              There are some protcol specific types that need to be converted to other C# types, <see cref="M:Photon.SocketServer.IRpcProtocol.TryConvertParameter(Photon.SocketServer.Rpc.Reflection.ObjectMemberInfo{Photon.SocketServer.Rpc.DataMemberAttribute},System.Object@)">IRpcProtocol.TryConvertParameter</see> is used for this purpose.
            </param>
            <param name="dataMembers">
              A dictionary that contains the received parameters.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.DataContract.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Rpc.DataContract"/> class.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.DataContract.GetErrorMessage">
            <summary>
              Gets a message containing descriptive entries for each missing or invalid paramter.
            </summary>
            <returns>
              A string containing descriptive entries for each missing or invalid paramter.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.DataContract.ToDictionary">
            <summary>
              Converts all properties flagged with the <see cref="T:Photon.SocketServer.Rpc.DataMemberAttribute"/> to a dictionary.
            </summary>
            <returns>
              A dictionary with properties that are flagged with the <see cref="T:Photon.SocketServer.Rpc.DataMemberAttribute"/>.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.DataContract.BuildErrorMessage(System.Collections.Generic.IDictionary{System.Byte,System.Object})">
            <summary>
              Builds the error message.
            </summary>
            <param name = "params">
              The params.
            </param>
            <returns>
              The error message.
            </returns>
        </member>
        <member name="P:Photon.SocketServer.Rpc.DataContract.IsValid">
            <summary>
              Gets a value indicating whether all operation parameter are initialized.
              Call the <see cref="M:Photon.SocketServer.Rpc.DataContract.GetErrorMessage"/> method to get a detailed description
              for all missing parameters.
            </summary>
            <value><c>true</c> if this instance is valid; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Operation.request">
            <summary>
              The operation request.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Operation.startTime">
            <summary>
              The time at OnStart.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Operation.#ctor(Photon.SocketServer.IRpcProtocol,Photon.SocketServer.OperationRequest)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Rpc.Operation"/> class.
              This contructor is used for incoming operations.
            </summary>
            <param name="protocol">
              There are some protcol specific types that need to be converted to other C# types, <see cref="M:Photon.SocketServer.IRpcProtocol.TryConvertParameter(Photon.SocketServer.Rpc.Reflection.ObjectMemberInfo{Photon.SocketServer.Rpc.DataMemberAttribute},System.Object@)">IRpcProtocol.TryConvertParameter</see> is used for this purpose.
            </param>
            <param name="request">
              The operation request containing the operations paramter values.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Operation.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Rpc.Operation"/> class.
              This contructor is used for outgoing operations.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Operation.OnComplete">
            <summary>
              Updates photon counters for the measure execution time.
              Call <see cref="M:Photon.SocketServer.Rpc.Operation.OnStart"/> first.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Operation.OnStart">
            <summary>
              Starts measuring the execution time.
              Call <see cref="M:Photon.SocketServer.Rpc.Operation.OnComplete"/>  to update photon counters.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Operation.OperationRequest">
            <summary>
              Gets the <see cref="P:Photon.SocketServer.Rpc.Operation.OperationRequest"/>.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Operations.InitEncryptionRequest.#ctor(Photon.SocketServer.IRpcProtocol,Photon.SocketServer.OperationRequest)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Operations.InitEncryptionRequest"/> class.
            </summary>
            <param name="protocol">
              The protocol.
            </param>
            <param name="operationRequest">
              The operation request.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Operations.InitEncryptionRequest.#ctor(System.Byte[],System.Byte)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Operations.InitEncryptionRequest"/> class.
            </summary>
            <param name="clientKey">
              The clients public key.
            </param>
            <param name="mode">
              The mode used for encryption
            </param>
        </member>
        <member name="P:Photon.SocketServer.Operations.InitEncryptionRequest.ClientKey">
            <summary>
              Gets or sets the clients public key.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Operations.InitEncryptionRequest.Mode">
            <summary>
              Gets or sets the encryption mode 0 or 1.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Operations.InitEncryptionResponse">
            <summary>
              The operation response for the <see cref="T:Photon.SocketServer.Operations.InitEncryptionRequest"/>.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Operations.InitEncryptionResponse.ServerKey">
            <summary>
              Gets or sets the servers public key.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Operations.InternalOperationCodes">
            <summary>
              Defines the internal operation codes.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Operations.InternalOperationCodes.InitEncryption">
            <summary>
              The opration code for the <see cref="T:Photon.SocketServer.Operations.InitEncryptionRequest"/> request.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Operations.PingRequest.#ctor(Photon.SocketServer.IRpcProtocol,Photon.SocketServer.OperationRequest)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Operations.PingRequest"/> class.
            </summary>
            <param name="protocol">
              The protocol.
            </param>
            <param name="operationRequest">
              The operation request.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Operations.PingRequest.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Operations.PingRequest"/> class.
            </summary>
            <param name="clientTimeStamp">
              The clients time stamp.
            </param>
        </member>
        <member name="P:Photon.SocketServer.Operations.PingRequest.ClientTimeStamp">
            <summary>
              Gets or sets the clients timestamp.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Operations.PingResponse.#ctor(Photon.SocketServer.IRpcProtocol,Photon.SocketServer.OperationRequest)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Operations.PingResponse"/> class.
            </summary>
            <param name="protocol">
              The protocol.
            </param>
            <param name="operationRequest">
              The operation request.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Operations.PingResponse.#ctor(System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Operations.PingResponse"/> class.
            </summary>
            <param name="clientTimeStamp">
              The clients timestamp.
            </param>
            <param name="serverTimeStamp">
              The servers timestamp.
            </param>
        </member>
        <member name="P:Photon.SocketServer.Operations.PingResponse.ClientTimeStamp">
            <summary>
              Gets or sets the clients timestamp.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Operations.PingResponse.ServerTimeStamp">
            <summary>
              Gets or sets the servers timestamp.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.PeerConnectionStateMachine.ConnectionState">
            <summary>
              Possible states of a <see cref="T:Photon.SocketServer.PeerBase"/>.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.IEventData">
            <summary>
              The implementation class contains data that is sent to clients with <see cref="M:Photon.SocketServer.PeerBase.SendEvent(Photon.SocketServer.IEventData,Photon.SocketServer.SendParameters)"/>.
              Implementors are <see cref="T:Photon.SocketServer.EventData"/> and <see cref="T:Photon.SocketServer.SerializedEventData"/>.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.IEventData.Serialize(Photon.SocketServer.IRpcProtocol)">
            <summary>
              Serializes the event data.
            </summary>
            <param name = "protocol">The protocol used to serialize the event data.</param>
            <returns>A byte array that contains the serialized event data parameters and the event code.</returns>
        </member>
        <member name="P:Photon.SocketServer.IEventData.Code">
            <summary>
              Gets Code.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.IEventData.Item(System.Byte)">
            <summary>
            Gets or sets the paramter associated with the specified key.
            </summary>
            <param name="parameterKey">The key of the parameter to get or set.</param>
            <returns>
            The parameter associated with the specified key. 
            If the specified key is not found, a get operation throws a KeyNotFoundException, 
            and a set operation creates a new paramter with the specified key.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <see cref="P:Photon.SocketServer.IEventData.Parameters"/> property has not been initialized.
            </exception>
        </member>
        <member name="P:Photon.SocketServer.IEventData.Parameters">
            <summary>
              Gets the event parameters that will be sent to the client.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.NetworkProtocolType">
            <summary>
              Specifies the available network protocol types.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.NetworkProtocolType.Unknown">
            <summary>
              Unknown protocol type
            </summary>
        </member>
        <member name="F:Photon.SocketServer.NetworkProtocolType.Udp">
            <summary>
              The udp protocol
            </summary>
        </member>
        <member name="F:Photon.SocketServer.NetworkProtocolType.Tcp">
            <summary>
              The tcp protocol
            </summary>
        </member>
        <member name="F:Photon.SocketServer.NetworkProtocolType.WebSocket">
            <summary>
              The websocket protocol
            </summary>
        </member>
        <member name="T:Photon.SocketServer.PeerBase">
            <summary>
              This class is a base class for server connections.
              The <see cref="P:Photon.SocketServer.PeerBase.RequestFiber"/> processes all incoming messages.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.PeerBase.log">
            <summary>
              The logger.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.PeerBase.operationDataLogger">
            <summary>
              The operation data logger.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.PeerBase.protocol">
            <summary>
              The rpc protocol.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.PeerBase.requestFiber">
            <summary>
              The request fiber.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.PeerBase.connectionState">
            <summary>
              The current <see cref="T:Photon.SocketServer.PeerConnectionStateMachine.IConnectionState"/>.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.PeerBase.cryptoProvider">
            <summary>
              The crypto provider
            </summary>
        </member>
        <member name="F:Photon.SocketServer.PeerBase.onDisconnectCallCount">
            <summary>
              for debugging Application_OnDisconnect calls
            </summary>
        </member>
        <member name="F:Photon.SocketServer.PeerBase.unmanagedPeer">
            <summary>
              The native peer.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.PeerBase.#ctor(Photon.SocketServer.IRpcProtocol,PhotonHostRuntimeInterfaces.IPhotonPeer)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.PeerBase"/> class.
            </summary>
            <param name="protocol">
              The protocol.
            </param>
            <param name="unmanagedPeer">
              The unmanaged peer instance.
            </param>
        </member>
        <member name="M:Photon.SocketServer.PeerBase.Finalize">
            <summary>
              Finalizes an instance of the <see cref="T:Photon.SocketServer.PeerBase"/> class.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.PeerBase.Disconnect">
            <summary>
              Closes the connection.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.PeerBase.Flush">
            <summary>
              Flushes all pending data to the socket.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.PeerBase.InitializeEncryption(System.Byte[])">
            <summary>
              Initializes the peer to receive and send encrypted operations with <see cref="F:Photon.SocketServer.EncryptionMethod.Sha256Pkcs7"/>.
            </summary>
            <param name="otherPartyPublicKey">
              The other party public key.
            </param>
            <returns>
              A byte array containing the public key of the created <see cref="P:Photon.SocketServer.PeerBase.CryptoProvider"/> instance.
              The key should be used to initialize cryptography operations on the client site.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.PeerBase.InitializeEncryption(System.Byte[],Photon.SocketServer.EncryptionMethod)">
            <summary>
              Initializes the peer to receive and send encrypted operations.
            </summary>
            <param name="otherPartyPublicKey">The other party public key.</param>
            <param name="mode"> Specifies the <see cref="T:Photon.SocketServer.EncryptionMethod"/>.</param>
            <returns>
              A byte array containing the public key of the created <see cref="P:Photon.SocketServer.PeerBase.CryptoProvider"/> instance.
              The key should be used to initialize cryptography operations on the client site.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.PeerBase.SendEvent(Photon.SocketServer.IEventData,Photon.SocketServer.SendParameters)">
            <summary>
              Sends an <see cref="T:Photon.SocketServer.IEventData"/> object to the client.
            </summary>
            <param name="eventData">
              The event data.
            </param>
            <param name="sendParameters">
              The send Options.
            </param>
            <returns>
              <see cref="F:Photon.SocketServer.SendResult.EncryptionNotSupported"/>: Encryption not initialized.
              <see cref="F:Photon.SocketServer.SendResult.Disconnected"/>: Not connected anymore.
              <see cref="F:Photon.SocketServer.SendResult.SendBufferFull"/>: The send buffer was full.
              <see cref="F:Photon.SocketServer.SendResult.Ok"/>: Success.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.PeerBase.SendOperationResponse(Photon.SocketServer.OperationResponse,Photon.SocketServer.SendParameters)">
            <summary>
              Sends the operation response to the client.
            </summary>
            <param name="operationResponse">
              The operation response.
            </param>
            <param name="sendParameters">
              The send Options.
            </param>
            <returns>
              <see cref="F:Photon.SocketServer.SendResult.EncryptionNotSupported"/>: Encryption not initialized.
              <see cref="F:Photon.SocketServer.SendResult.Disconnected"/>: Not connected.
              <see cref="F:Photon.SocketServer.SendResult.SendBufferFull"/>: The send buffer is full.
              <see cref="F:Photon.SocketServer.SendResult.Ok"/>: success.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.PeerBase.Dispose">
            <summary>
              Disposes the peer.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.PeerBase.Photon#SocketServer#IManagedPeer#Application_OnDisconnect(PhotonHostRuntimeInterfaces.DisconnectReason,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
              Callback for disconnect.
            </summary>
            <returns>
              True if called the first time.
            </returns>
            <param name="reasonCode">
            The disconnect reason code.
            </param>
            <param name="reasonDetail">
            The disconnect reason detail.
            </param>
            <param name="rtt">
            The round trip time.
            </param>
            <param name="rttVariance">
            The round trip time variance.
            </param>
            <param name="numFailures">
            The amount of failures. 
            </param>
        </member>
        <member name="M:Photon.SocketServer.PeerBase.Photon#SocketServer#IManagedPeer#Application_OnReceive(System.Byte[],Photon.SocketServer.SendParameters,System.Int32,System.Int32,System.Int32)">
            <summary>
              Callback for incoming data.
            </summary>
            <param name = "data">
              The data.
            </param>
            <param name = "sendParameters">
              The send Options.
            </param>
            <param name="rtt">
            The round trip time.
            </param>
            <param name="rttVariance">
            The round trip time variance.
            </param>
            <param name="numFailures">
            The amount of failures. 
            </param>
        </member>
        <member name="M:Photon.SocketServer.PeerBase.Photon#SocketServer#IManagedPeer#Application_OnSendBufferEmpty">
            <summary>
              Callback when the send buffer is empty again (after it had been full).
            </summary>
        </member>
        <member name="M:Photon.SocketServer.PeerBase.OnReceiveInternal(System.Byte[],Photon.SocketServer.SendParameters,System.Int32,System.Int32,System.Int32)">
            <summary>
              Received data on request fiber.
            </summary>
            <param name = "data">
              The data.
            </param>
            <param name = "sendParameters">
              The send Options.
            </param>
            <param name="rtt">
            The round trip time.
            </param>
            <param name="rttVariance">
            The round trip time variance.
            </param>
            <param name="numFailures">
            The number of failures.
            </param>
        </member>
        <member name="M:Photon.SocketServer.PeerBase.SendBytesInternal(System.Byte[],Photon.SocketServer.SendParameters)">
            <summary>
              Sends bytes to the client.
            </summary>
            <param name="data">
              The data.
            </param>
            <param name="sendParameters">
              The send Options.
            </param>
            <returns>
              <see cref="F:Photon.SocketServer.SendResult.Disconnected"/>: Not connected anymore.
              <see cref="F:Photon.SocketServer.SendResult.SendBufferFull"/>: The send buffer was full.
              <see cref="F:Photon.SocketServer.SendResult.Ok"/>: Success.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.PeerBase.TransitConnectionState(Photon.SocketServer.PeerConnectionStateMachine.IConnectionState,Photon.SocketServer.PeerConnectionStateMachine.IConnectionState)">
            <summary>
              Used by the <see cref="T:Photon.SocketServer.PeerConnectionStateMachine.IConnectionState"/> implementations for state transitions.
            </summary>
            <param name="newState">
              The new state.
            </param>
            <param name="oldState">
              The current state.
            </param>
            <returns>
              True if the transition was successfull (if the <paramref name="oldState"/> was set before).
            </returns>
        </member>
        <member name="M:Photon.SocketServer.PeerBase.OnOperationRequest(Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)">
            <summary>
              Incoming <see cref="T:Photon.SocketServer.OperationRequest"/>s are handled here.
              This method is being enqueud on the <see cref="P:Photon.SocketServer.PeerBase.RequestFiber"/>.
            </summary>
            <param name="operationRequest">
              The operation Request.
            </param>
            <param name="sendParameters">
              The send parameters.
            </param>
        </member>
        <member name="M:Photon.SocketServer.PeerBase.OnSendBufferFull">
            <summary>
              A send operation failed because of insufficient buffer space.
              If this happens there is too much relieable data being sent for the available band width.
              The client is disconnected per default. Override to change the behavior.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.PeerBase.OnSendFailed(Photon.SocketServer.SendResult,Photon.SocketServer.SendParameters,System.Int32)">
            <summary>
            Called when a send operation failed.  
            </summary>
            <param name="sendResult">
            The reason why the send oparation has been failed
            </param>
            <param name="sendParameters">
            The <see cref="T:Photon.SocketServer.SendParameters"/> used by the send operation.
            </param>
            <param name="messageSize"> 
            The size of the message in bytes.
            </param>
            <remarks>
            This method can be overriden to handle send errors. 
            The default implementation just logs a warning message.
            </remarks>
        </member>
        <member name="M:Photon.SocketServer.PeerBase.OnReceive(System.Int32)">
            <summary>
            Called if incoming data was received for the peer.
            Can be overidden to track the number messages and bytes received by this peer instance.
            </summary>
            <param name="bytesReceived">
            The number of bytes received.
            </param>
        </member>
        <member name="M:Photon.SocketServer.PeerBase.OnSend(System.Int32)">
            <summary>
            Called if data was send to the the peer.
            Can be overidden to track the number messages and bytes send by this peer instance.
            </summary>
            <param name="bytesSend">
            The number of bytes send.
            </param>
        </member>
        <member name="M:Photon.SocketServer.PeerBase.Dispose(System.Boolean)">
            <summary>
              Diposes the internal fibers.
            </summary>
            <param name="disposing">
              True if called from <see cref="M:Photon.SocketServer.PeerBase.Dispose"/>.
            </param>
        </member>
        <member name="M:Photon.SocketServer.PeerBase.OnDisconnect(PhotonHostRuntimeInterfaces.DisconnectReason,System.String)">
            <summary>
              The connection was closed.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.PeerBase.OnSendBufferEmpty">
            <summary>
              The default behavior of <see cref="M:Photon.SocketServer.PeerBase.OnSendBufferFull"/> is to disconnect the client.
              If this behavior is changed (override) the inheritor can pause sending until <see cref="M:Photon.SocketServer.PeerBase.OnSendBufferEmpty"/> is called.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.PeerBase.OnUnexpectedDataReceived(System.Byte[],Photon.SocketServer.SendParameters)">
            <summary>
              This method is called if incoming data has an unexpected format.
              Per default this method disconnects the client. 
              Override to change this behavior.
            </summary>
            <param name = "data">
              The received data.
            </param>
            <param name = "sendParameters">
              The send Options.
            </param>
        </member>
        <member name="M:Photon.SocketServer.PeerBase.LogEvent(Photon.SocketServer.IEventData,System.Int32,System.Byte[],Photon.SocketServer.SendResult)">
            <summary>
              Logs the event.
            </summary>
            <param name = "eventData">
              The event Data.
            </param>
            <param name = "channelId">
              The channel id.
            </param>
            <param name = "data">
              The data.
            </param>
            <param name = "sendResult">
              The send result.
            </param>
        </member>
        <member name="M:Photon.SocketServer.PeerBase.LogOperationResponse(Photon.SocketServer.OperationResponse,System.Byte[],Photon.SocketServer.SendResult,Photon.SocketServer.SendParameters)">
            <summary>
              The log operation response.
            </summary>
            <param name = "response">
              The response.
            </param>
            <param name = "data">
              The data.
            </param>
            <param name = "sendResult">
              The send result.
            </param>
            <param name = "sendParameters">
              The send Options.
            </param>
        </member>
        <member name="M:Photon.SocketServer.PeerBase.OnInitEncryptionRequest(Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)">
            <summary>
              Handels internal init encryption requests.
            </summary>
            <param name = "operationRequest">
              The operation requests.
            </param>
            <param name = "sendParameters">
              The send Options.
            </param>
        </member>
        <member name="M:Photon.SocketServer.PeerBase.OnPingRequest(Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)">
            <summary>
              Handels internal ping requests.
            </summary>
            <param name = "operationRequest">
              The operation requests.
            </param>
            <param name = "sendParameters">
              The send Options.
            </param>
        </member>
        <member name="M:Photon.SocketServer.PeerBase.OnInternalOperationRequest(System.Byte[],Photon.SocketServer.SendParameters)">
            <summary>
              Invoked when internal operations are received.
            </summary>
            <param name = "data">
              The operation data.
            </param>
            <param name = "sendParameters">
              The send Options.
            </param>
        </member>
        <member name="M:Photon.SocketServer.PeerBase.ValidateInternalOperation(Photon.SocketServer.Rpc.Operation,Photon.SocketServer.SendParameters)">
            <summary>
              Checks if a operation is valid. If the operation is not valid
              an operation response containing a desciptive error message
              will be sent to the peer.
            </summary>
            <param name = "operation">
              The operation.
            </param>
            <param name = "sendParameters">
              The send Options.
            </param>
            <returns>
              true if the operation is valid; otherwise false.
            </returns>
        </member>
        <member name="P:Photon.SocketServer.PeerBase.Connected">
            <summary>
              Gets a value indicating whether this <see cref="T:Photon.SocketServer.PeerBase"/> instance is connected.
            </summary>
            <value><c>true</c> if connected; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Photon.SocketServer.PeerBase.ConnectionId">
            <summary>
              Gets the connection id.
            </summary>
            <remarks>
              Peers connected to different ports may have similar connection ids.
            </remarks>
        </member>
        <member name="P:Photon.SocketServer.PeerBase.Disposed">
            <summary>
              Gets a value indicating whether the peer was disposed.
            </summary>
            <remarks>
              The peer is automatically disposed after <see cref="M:Photon.SocketServer.PeerBase.OnDisconnect(PhotonHostRuntimeInterfaces.DisconnectReason,System.String)"/>.
            </remarks>
        </member>
        <member name="P:Photon.SocketServer.PeerBase.LocalIP">
            <summary>
              Gets the IP the client connects to.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.PeerBase.LocalPort">
            <summary>
              Gets the port the client connects to.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.PeerBase.NetworkProtocol">
            <summary>
              Gets the network protocol type used by the peer.
            </summary>
            <value>The network protocol type.</value>
        </member>
        <member name="P:Photon.SocketServer.PeerBase.Protocol">
            <summary>
              Gets the used rpc protocol.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.PeerBase.RemoteIP">
            <summary>
              Gets the client's remote IP address.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.PeerBase.RemotePort">
            <summary>
              Gets the port the client connects from.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.PeerBase.RequestFiber">
            <summary>
              Gets fiber for incoming messages.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.PeerBase.ConnectionStateImpl">
            <summary>
              Gets the current <see cref="T:Photon.SocketServer.PeerConnectionStateMachine.IConnectionState"/>.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.PeerBase.CryptoProvider">
            <summary>
              Gets or sets an <see cref="T:Photon.SocketServer.Security.ICryptoProvider"/> instance used 
              to encrypt and decrypt operation requests.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.PeerBase.UnmanagedPeer">
            <summary>
              Gets or sets the unmanaged peer.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Protocol">
            <summary>
              The AMF3 implementation of <see cref="T:Photon.SocketServer.IRpcProtocol"/>.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Protocol.HeaderV1Instance">
            <summary>
              The singleton instance for header v1.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Protocol.HeaderV2Instance">
            <summary>
              The singleton instance for header v2.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Protocol.ProtocolVersion">
            <summary>
              Version 1.6.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Protocol.headerSize">
            <summary>
              the rts message header size
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Protocol.headerWriter">
            <summary>
              the rts message header writer
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Protocol.protocolType">
            <summary>
              The protocol type
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Protocol.#ctor(Photon.SocketServer.Rpc.Protocols.ProtocolType,Photon.SocketServer.Rpc.Protocols.IRtsMessageHeaderConverter)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Protocol"/> class.
            </summary>
            <param name="protocolType">
              The protocol Type.
            </param>
            <param name="headerWriter">
              The header Provider.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Protocol.Serialize(System.IO.Stream,System.Object)">
            <summary>
              Serialze an object to a stream
            </summary>
            <param name = "stream">
              The stream.
            </param>
            <param name = "obj">
              The object to serialize.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Protocol.SerializeEventData(Photon.SocketServer.EventData)">
            <summary>
              The serialize event.
            </summary>
            <param name = "eventData">
              The event data.
            </param>
            <returns>
              The serialized event
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Protocol.SerializeEventDataEncrypted(Photon.SocketServer.IEventData,Photon.SocketServer.Security.ICryptoProvider)">
            <summary>
              Not supported by the AMF3 protocol.
            </summary>
            <param name="eventData">
              The event data.
            </param>
            <param name="cryptoProvider">
              The crypto provider.
            </param>
            <returns>
              Throws a <see cref="T:System.NotSupportedException"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
              Not supported by AMF3.
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Protocol.SerializeInitRequest(System.String,System.Version)">
            <summary>
              The serialize init request.
            </summary>
            <param name = "applicationId">
              The application id.
            </param>
            <param name = "clientVersion">
              The client version.
            </param>
            <returns>
              the serialized init request
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Protocol.SerializeInitResponse">
            <summary>
              The serialize init response.
            </summary>
            <returns>
              dummy bytes
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Protocol.SerializeInternalOperationRequest(Photon.SocketServer.OperationRequest)">
            <summary>
              Not supported by the AMF3 protocol..
            </summary>
            <param name="operationRequest">
              The operation request.
            </param>
            <returns>
              Throws a <see cref="T:System.NotSupportedException"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
              Not supported by AMF3.
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Protocol.SerializeInternalOperationResponse(Photon.SocketServer.OperationResponse)">
            <summary>
              Not supported by the AMF3 protocol.
            </summary>
            <param name="operationResponse">
              The operation response to serialize.
            </param>
            <returns>
              Throws a <see cref="T:System.NotSupportedException"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
              Not supported by AMF3.
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Protocol.SerializeOperationRequest(Photon.SocketServer.OperationRequest)">
            <summary>
              Serializes an <see cref="T:Photon.SocketServer.OperationRequest"/>.
            </summary>
            <param name="operationRequest">
              The operation request.
            </param>
            <returns>
              The serialized operation request.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Protocol.SerializeOperationRequestEncrypted(Photon.SocketServer.OperationRequest,Photon.SocketServer.Security.ICryptoProvider)">
            <summary>
              Not supported by the AMF3 protocol.
            </summary>
            <param name="operationRequest">
              The operation request.
            </param>
            <param name="cryptoProvider">
              An <see cref="T:Photon.SocketServer.Security.ICryptoProvider"/> instance used to encrypt the operation request.
            </param>
            <returns>
              Throws a <see cref="T:System.NotSupportedException"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
              Not supported by AMF3.
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Protocol.SerializeOperationResponse(Photon.SocketServer.OperationResponse)">
            <summary>
              Serializes an <see cref="T:Photon.SocketServer.OperationResponse"/>.
            </summary>
            <param name="operationResponse">
              The operation response to serialize.
            </param>
            <returns>
              The serialized operation response.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Protocol.SerializeOperationResponseEncrypted(Photon.SocketServer.OperationResponse,Photon.SocketServer.Security.ICryptoProvider)">
            <summary>
              Not supported by the AMF3 protocol.
            </summary>
            <param name="operationResponse">
              The response.
            </param>
            <param name="cryptoProvider">
              An <see cref="T:Photon.SocketServer.Security.ICryptoProvider"/> instance used to encrypt the operation response.
            </param>
            <returns>
              Throws a <see cref="T:System.NotSupportedException"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
              Not supported by AMF3.
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Protocol.TryConvertParameter(Photon.SocketServer.Rpc.Reflection.ObjectMemberInfo{Photon.SocketServer.Rpc.DataMemberAttribute},System.Object@)">
            <summary>
              The try convert operation parameter.
            </summary>
            <param name = "paramterInfo">
              The paramter info.
            </param>
            <param name = "value">
              The value.
            </param>
            <returns>
              true if operation parameter.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Protocol.TryParse(System.IO.Stream,System.Object@)">
            <summary>
              Try to parse an object from a stream.
            </summary>
            <param name = "stream">
              The stream.
            </param>
            <param name = "obj">
              The result object.
            </param>
            <returns>
              True on success.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Protocol.TryParseEventData(System.Byte[],Photon.SocketServer.EventData@)">
            <summary>
              Converts a byte array to an <see cref="T:Photon.SocketServer.EventData"/> object.
            </summary>
            <param name="data">
              The data.
            </param>
            <param name="eventData">
              The event data.
            </param>
            <returns>
              true if successfull.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Protocol.TryParseEventDataEncrypted(System.Byte[],Photon.SocketServer.Security.ICryptoProvider,Photon.SocketServer.EventData@)">
            <summary>
              Not supported by the AMF3 protocol.
            </summary>
            <param name = "data">
              The data.
            </param>
            <param name = "cryptoProvider">
              The crypto Provider.
            </param>
            <param name = "eventData">
              The event data.
            </param>
            <returns>
              Always false.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Protocol.TryParseMessageHeader(System.Byte[],Photon.SocketServer.Rpc.Protocols.RtsMessageHeader@)">
            <summary>
              Tries to parse the message header.
            </summary>
            <param name = "data">
              The data.
            </param>
            <param name = "header">
              The header.
            </param>
            <returns>
              True on success.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Protocol.TryParseOperationRequest(System.Byte[],Photon.SocketServer.OperationRequest@)">
            <summary>
              Tries to parse an <see cref="T:Photon.SocketServer.OperationRequest"/>.
            </summary>
            <param name="data">
              The data.
            </param>
            <param name="operationRequest">
              The operation request.
            </param>
            <returns>
              True if request was parsed successfully.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Protocol.TryParseOperationRequestEncrypted(System.Byte[],Photon.SocketServer.Security.ICryptoProvider,Photon.SocketServer.OperationRequest@)">
            <summary>
              Not supported by the AMF3 protocol.
            </summary>
            <param name="data">
              The data.
            </param>
            <param name="cryptoProvider">
              An <see cref="T:Photon.SocketServer.Security.ICryptoProvider"/> instance used to decrypt encrypted operation requests.
            </param>
            <param name="operationRequest">
              The operation request.
            </param>
            <returns>
              Always false.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Protocol.TryParseOperationResponse(System.Byte[],Photon.SocketServer.OperationResponse@)">
            <summary>
              Tries to parse an operation response.
            </summary>
            <param name = "data">
              A byte array containing the binary operation response data.
            </param>
            <param name = "operationResponse">
              Contains the parsed operation response, if the methods returns with success;
              otherwise, the parameter will be uninitialized. 
            </param>
            <returns>
              true if the operation response was parsed successfully; otherwise false.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Protocol.TryParseOperationResponseEncrypted(System.Byte[],Photon.SocketServer.Security.ICryptoProvider,Photon.SocketServer.OperationResponse@)">
            <summary>
              Not supported by the AMF3 protocol.
            </summary>
            <param name="data">
              A byte array containing the binary operation response data.
            </param>
            <param name="cryptoProvider">
              A <see cref="T:Photon.SocketServer.Security.ICryptoProvider"/> instance used to decrpyt an encrypted operation response.
            </param>
            <param name="operationResponse">
              Contains the parsed operation response, if the methods returns with success;
              otherwise, the parameter will be uninitialized. 
            </param>
            <returns>
              Always false.
            </returns>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Protocol.ProtocolType">
            <summary>
              Gets the type of the protocol.
            </summary>
            <value>The type of the protocol.</value>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16Flash">
            <summary>
            TODO: For testing only
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16">
            <summary>
              The GpBinary implementation of <see cref="T:Photon.SocketServer.IRpcProtocol"/>.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.HeaderV1Instance">
            <summary>
              The protocol instane with the old header.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.HeaderV2Instance">
            <summary>
              The protocol instane with the new header.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.ProtocolVersion">
            <summary>
              The protocol version 1.6
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.operationDataLogger">
            <summary>
              An <see cref="T:ExitGames.Logging.ILogger"/> instance used to log operations to the logging framework.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.headerSize">
            <summary>
              the rts message header size
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.headerWriter">
            <summary>
              the rts message header writer
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.protocolType">
            <summary>
              The protocol type
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.#ctor(Photon.SocketServer.Rpc.Protocols.ProtocolType,Photon.SocketServer.Rpc.Protocols.IRtsMessageHeaderConverter)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16"/> class.
            </summary>
            <param name="protocolType">
              The protocol Type.
            </param>
            <param name="headerWriter">
              The header Provider.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.Serialize(System.IO.Stream,System.Object)">
            <summary>
              Serialze an object to a stream
            </summary>
            <param name = "stream">
              The stream.
            </param>
            <param name = "obj">
              The object to serialize.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.SerializeEventData(Photon.SocketServer.EventData)">
            <summary>
              The serialize event.
            </summary>
            <param name="eventData">
              The event data.
            </param>
            <returns>
              The serialized event.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">
              A value can not be serialized.
            </exception>
            <exception cref="T:System.ArrayTypeMismatchException">
              A collection with different types can not be serialized.
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.SerializeEventDataEncrypted(Photon.SocketServer.IEventData,Photon.SocketServer.Security.ICryptoProvider)">
            <summary>
              Encrypts an event.
            </summary>
            <param name="eventData">
              The event data.
            </param>
            <param name="cryptoProvider">
              The crypto provider.
            </param>
            <returns>
              the encrypted event.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              cryptoProvider is null.
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.SerializeInitRequest(System.String,System.Version)">
            <summary>
              The serialize init request.
            </summary>
            <param name = "applicationId">
              The application id.
            </param>
            <param name = "clientVersion">
              The client version.
            </param>
            <returns>
              a serialized init request message
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.SerializeInitResponse">
            <summary>
              The serialize init response.
            </summary>
            <returns>
              The serialized init response.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.SerializeInternalOperationRequest(Photon.SocketServer.OperationRequest)">
            <summary>
              Serializes an internal <see cref="T:Photon.SocketServer.OperationRequest"/>.
            </summary>
            <param name="operationRequest">
              The operation request.
            </param>
            <returns>
              The serialized operation request.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.SerializeInternalOperationResponse(Photon.SocketServer.OperationResponse)">
            <summary>
              Serializes an internal <see cref="T:Photon.SocketServer.OperationResponse"/>.
            </summary>
            <param name="operationResponse">
              The operation response.
            </param>
            <returns>
              The serialized operation response.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.SerializeOperationRequest(Photon.SocketServer.OperationRequest)">
            <summary>
              Serializes an operation request.
            </summary>
            <param name = "operationRequest">
              The operation request.
            </param>
            <returns>
              a serialized operation request message
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.SerializeOperationRequestEncrypted(Photon.SocketServer.OperationRequest,Photon.SocketServer.Security.ICryptoProvider)">
            <summary>
              The serialize operation request.
            </summary>
            <param name="operationRequest">
              The operation request.
            </param>
            <param name="cryptoProvider">
              The <see cref="T:System.Security.Cryptography.ICryptoTransform"/> used to encrypt operation response data.
            </param>
            <returns>
              a serialized operation request message
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.SerializeOperationResponse(Photon.SocketServer.OperationResponse)">
            <summary>
              Serializes an <see cref="T:Photon.SocketServer.OperationResponse"/>.
            </summary>
            <param name="operationResponse">
              The response.
            </param>
            <returns>
              The serialized operation response.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.SerializeOperationResponseEncrypted(Photon.SocketServer.OperationResponse,Photon.SocketServer.Security.ICryptoProvider)">
            <summary>
              Serializes an <see cref="T:Photon.SocketServer.OperationResponse"/>.
              The operation response data will be encrypted using the specified <see cref="T:Photon.SocketServer.Security.ICryptoProvider"/>.
            </summary>
            <param name="operationResponse">
              The response.
            </param>
            <param name="cryptoProvider">
              An <see cref="T:Photon.SocketServer.Security.ICryptoProvider"/> instance used to encrypt the operation response.
            </param>
            <returns>
              The serialized operation response.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.TryConvertParameter(Photon.SocketServer.Rpc.Reflection.ObjectMemberInfo{Photon.SocketServer.Rpc.DataMemberAttribute},System.Object@)">
            <summary>
              The convert operation parameter.
            </summary>
            <param name = "paramterInfo">
              The paramter info.
            </param>
            <param name = "value">
              The value.
            </param>
            <returns>
              <paramref name = "value" /> or a Guid if value is 16 bytes.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.TryParse(System.IO.Stream,System.Object@)">
            <summary>
              Try to parse an object from a stream.
            </summary>
            <param name = "stream">
              The stream.
            </param>
            <param name = "obj">
              The result object.
            </param>
            <returns>
              True on success.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.TryParseEventData(System.Byte[],Photon.SocketServer.EventData@)">
            <summary>
              Tries to parse an event.
            </summary>
            <param name = "data">
              The data.
            </param>
            <param name = "eventData">
              The event data.
            </param>
            <returns>
              true if successful.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.TryParseEventDataEncrypted(System.Byte[],Photon.SocketServer.Security.ICryptoProvider,Photon.SocketServer.EventData@)">
            <summary>
              Tries to parse an event.
            </summary>
            <param name = "data">
              The data.
            </param>
            <param name = "cryptoProvider">
              The crypto Provider.
            </param>
            <param name = "eventData">
              The event data.
            </param>
            <returns>
              true if successful.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.TryParseMessageHeader(System.Byte[],Photon.SocketServer.Rpc.Protocols.RtsMessageHeader@)">
            <summary>
              Tries to parse the message header.
            </summary>
            <param name = "data">
              The data.
            </param>
            <param name = "header">
              The header.
            </param>
            <returns>
              True on success.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.TryParseOperationRequest(System.Byte[],Photon.SocketServer.OperationRequest@)">
            <summary>
              Tries to parse an <see cref="T:Photon.SocketServer.OperationRequest"/>.
            </summary>
            <param name="data">
              The raw request data.
            </param>
            <param name="operationRequest">
              The operation request.
            </param>
            <returns>
              True if request was parsed successfully.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.TryParseOperationRequestEncrypted(System.Byte[],Photon.SocketServer.Security.ICryptoProvider,Photon.SocketServer.OperationRequest@)">
            <summary>
              Tries to parse an <see cref="T:Photon.SocketServer.OperationRequest"/>.
            </summary>
            <param name="data">
              The raw request data.
            </param>
            <param name="cryptoProvider">
              An <see cref="T:Photon.SocketServer.Security.ICryptoProvider"/> instance used to decrypt encrypted operation requests.
            </param>
            <param name="operationRequest">
              The operation request.
            </param>
            <returns>
              True if request was parsed successfully.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.TryParseOperationResponse(System.Byte[],Photon.SocketServer.OperationResponse@)">
            <summary>
              Tries to parse an operation response.
            </summary>
            <param name = "data">
              A byte array containing the binary operation response data.
            </param>
            <param name = "operationResponse">
              Contains the parsed operation response, if the methods returns with success;
              otherwise, the parameter will be uninitialized. 
            </param>
            <returns>
              true if the operation response was parsed successfully; otherwise false.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.TryParseOperationResponseEncrypted(System.Byte[],Photon.SocketServer.Security.ICryptoProvider,Photon.SocketServer.OperationResponse@)">
            <summary>
              Tries to parse an encrypted operation response.
            </summary>
            <param name = "data">
              The data.
            </param>
            <param name = "cryptoProvider">
              The crypto provider.
            </param>
            <param name = "operationResponse">
              The operation response.
            </param>
            <returns>
              true if the operation response was parsed successfully; otherwise false.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.SerializeEventData(Photon.SocketServer.Rpc.Protocols.ReusableMemoryStream,Photon.SocketServer.IEventData)">
            <summary>
              serializes the event data to a stream.
            </summary>
            <param name = "stream">
              The stream.
            </param>
            <param name = "eventData">
              The event data.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.SerializeOperationRequest(System.IO.Stream,Photon.SocketServer.OperationRequest)">
            <summary>
              Serializes an operation request.
            </summary>
            <param name="stream">
              The stream.
            </param>
            <param name="operationRequest">
              The operation request.
            </param>
            <exception cref="T:System.IO.InvalidDataException">
              A value can not be serialized.
            </exception>
            <exception cref="T:System.ArrayTypeMismatchException">
              A collection with different types can not be serialized.
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.SerializeOperationResponse(System.IO.Stream,Photon.SocketServer.OperationResponse)">
            <summary>
              Serializes an operation response.
            </summary>
            <param name="stream">
              The stream.
            </param>
            <param name="operationResponse">
              The operation response.
            </param>
            <exception cref="T:System.IO.InvalidDataException">
              A value can not be serialized.
            </exception>
            <exception cref="T:System.ArrayTypeMismatchException">
              A collection with different types can not be serialized.
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.TryParseEventData(System.IO.Stream,Photon.SocketServer.EventData@)">
            <summary>
              Tries to parse an event data.
            </summary>
            <param name = "stream">
              The stream.
            </param>
            <param name = "eventData">
              The event Data.
            </param>
            <returns>
              True if parsed successfully, otherwise false.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.TryParseOperationRequest(System.IO.MemoryStream,Photon.SocketServer.OperationRequest@)">
            <summary>
              Tries to parse an operation request.
            </summary>
            <param name = "stream">
              The stream.
            </param>
            <param name = "operationRequest">
              The operation request.
            </param>
            <returns>
              True if parsed successfully, otherwise false.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.TryParseOperationResponse(System.IO.Stream,Photon.SocketServer.OperationResponse@)">
            <summary>
              The try parse operation response.
            </summary>
            <param name = "stream">
              The stream.
            </param>
            <param name = "operationResponse">
              The operation response.
            </param>
            <returns>
              true on success.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.SerializeOperationRequest(Photon.SocketServer.OperationRequest,Photon.SocketServer.Rpc.Protocols.RtsMessageType)">
            <summary>
              Serializes an <see cref="T:Photon.SocketServer.OperationResponse"/>.
            </summary>
            <param name="operationRequest">The operation request to serialize.</param>
            <param name="messageType">
              The message type. 
              Should be eiter <see cref="F:Photon.SocketServer.Rpc.Protocols.RtsMessageType.OperationResponse"/> or <see cref="F:Photon.SocketServer.Rpc.Protocols.RtsMessageType.InternalOperationResponse"/>.
            </param>
            <returns>
              A serialized operation response.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.SerializeOperationResponse(Photon.SocketServer.OperationResponse,Photon.SocketServer.Rpc.Protocols.RtsMessageType)">
            <summary>
              Serializes an <see cref="T:Photon.SocketServer.OperationResponse"/>.
            </summary>
            <param name="operationResponse">The operation response to serialize.</param>
            <param name="messageType">
              The message type. 
              Should be eiter <see cref="F:Photon.SocketServer.Rpc.Protocols.RtsMessageType.OperationResponse"/> or <see cref="F:Photon.SocketServer.Rpc.Protocols.RtsMessageType.InternalOperationResponse"/>.
            </param>
            <returns>
              A serialized operation response.
            </returns>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocolV16.ProtocolType">
            <summary>
              Gets the type of the protocol.
            </summary>
            <value>The type of the protocol.</value>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.Json.JsonProtocol.Instance">
            <summary>
            The protocol instance. 
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.Json.JsonProtocol.log">
            <summary>
              An <see cref="T:ExitGames.Logging.ILogger"/> instance used to log messages to the logging framework.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Json.JsonProtocol.TryParseInternalOperationRequest(System.Byte[],Photon.SocketServer.OperationRequest@)">
            <summary>
              Tries to parse an internal <see cref="T:Photon.SocketServer.OperationRequest"/>.
            </summary>
            <param name="data">
              The data.
            </param>
            <param name="operationRequest">
              The operation request.
            </param>
            <returns>
              True if request was parsed successfully.
            </returns>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterAmf3V2">
            <summary>
              This <see cref="T:Photon.SocketServer.Rpc.Protocols.IRtsMessageHeaderConverter"/> writes a 2 bytes long header and uses magic byte 0xF4.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Protocols.IRtsMessageHeaderConverter">
            <summary>
              Implementors write the rts message headers to a data stream.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.IRtsMessageHeaderConverter.TryParseHeader(System.Byte[],Photon.SocketServer.Rpc.Protocols.RtsMessageHeader@)">
            <summary>
              Tries to parse the message header.
            </summary>
            <param name = "data">
              The input data.
            </param>
            <param name = "header">
              The output header.
            </param>
            <returns>
              True on success.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.IRtsMessageHeaderConverter.WriteHeader(System.IO.Stream,Photon.SocketServer.Rpc.Protocols.RtsMessageType,System.Boolean)">
            <summary>
              Writes the header to the stream at the current position.
            </summary>
            <param name = "stream">
              The stream.
            </param>
            <param name = "messageType">
              The message type.
            </param>
            <param name = "encrypted">
              Indiciates whether the message body is encrypted.
            </param>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Protocols.IRtsMessageHeaderConverter.HeaderSize">
            <summary>
              Gets the size of the message header.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterAmf3V2.Instance">
            <summary>
              Singleton instance.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterAmf3V2.log">
            <summary>
              For logging.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterAmf3V2.#ctor">
            <summary>
              Prevents a default instance of the <see cref="T:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterAmf3V2"/> class from being created.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterAmf3V2.TryParseHeader(System.Byte[],Photon.SocketServer.Rpc.Protocols.RtsMessageHeader@)">
            <summary>
              Tries to parse the message header.
            </summary>
            <param name = "data">
              The input data.
            </param>
            <param name = "header">
              The output header.
            </param>
            <returns>
              True on success.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterAmf3V2.WriteHeader(System.IO.Stream,Photon.SocketServer.Rpc.Protocols.RtsMessageType,System.Boolean)">
            <summary>
              Writes the header to the stream at the current position.
            </summary>
            <param name = "stream">
              The stream.
            </param>
            <param name = "messageType">
              The message type.
            </param>
            <param name = "encrypted">
              Indiciates whether the message body is encrypted.
            </param>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterAmf3V2.HeaderSize">
            <summary>
              Gets the size of the message header - in this case 2.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterAmf3V1">
            <summary>
              This <see cref="T:Photon.SocketServer.Rpc.Protocols.IRtsMessageHeaderConverter"/> writes a 6 bytes long header and uses magic byte 0xFE.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterAmf3V1.Instance">
            <summary>
              Singleton instance.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterAmf3V1.log">
            <summary>
              For logging.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterAmf3V1.#ctor">
            <summary>
              Prevents a default instance of the <see cref="T:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterAmf3V1"/> class from being created.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterAmf3V1.TryParseHeader(System.Byte[],Photon.SocketServer.Rpc.Protocols.RtsMessageHeader@)">
            <summary>
              Tries to parse the message header.
            </summary>
            <param name = "data">
              The input data.
            </param>
            <param name = "header">
              The output header.
            </param>
            <returns>
              True on success.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterAmf3V1.WriteHeader(System.IO.Stream,Photon.SocketServer.Rpc.Protocols.RtsMessageType,System.Boolean)">
            <summary>
              Writes the header to the stream at the current position.
            </summary>
            <param name = "stream">
              The stream.
            </param>
            <param name = "messageType">
              The message type.
            </param>
            <param name = "encrypted">
              Indiciates whether the message body is encrypted.
            </param>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterAmf3V1.HeaderSize">
            <summary>
              Gets the size of the message header - in this case 6 bytes.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterBinaryV2">
            <summary>
              This <see cref="T:Photon.SocketServer.Rpc.Protocols.IRtsMessageHeaderConverter"/> writes a 2 bytes long header and uses magic byte 0xF3.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterBinaryV2.Instance">
            <summary>
              Singleton instance.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterBinaryV2.log">
            <summary>
              For logging.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterBinaryV2.#ctor">
            <summary>
              Prevents a default instance of the <see cref="T:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterBinaryV2"/> class from being created.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterBinaryV2.TryParseHeader(System.Byte[],Photon.SocketServer.Rpc.Protocols.RtsMessageHeader@)">
            <summary>
              Tries to parse the message header.
            </summary>
            <param name = "data">
              The input data.
            </param>
            <param name = "header">
              The output header.
            </param>
            <returns>
              True on success.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterBinaryV2.WriteHeader(System.IO.Stream,Photon.SocketServer.Rpc.Protocols.RtsMessageType,System.Boolean)">
            <summary>
              Writes the header to the stream at the current position.
            </summary>
            <param name = "stream">
              The stream.
            </param>
            <param name = "messageType">
              The message type.
            </param>
            <param name = "encrypted">
              Indiciates whether the message body is encrypted.
            </param>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterBinaryV2.HeaderSize">
            <summary>
              Gets the size of the message header - in this case 2.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterBinaryV1">
            <summary>
              This <see cref="T:Photon.SocketServer.Rpc.Protocols.IRtsMessageHeaderConverter"/> writes a 6 bytes long header and uses magic byte 0xF1.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterBinaryV1.Instance">
            <summary>
              Singleton instance.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterBinaryV1.log">
            <summary>
              For logging.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterBinaryV1.#ctor">
            <summary>
              Prevents a default instance of the <see cref="T:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterBinaryV1"/> class from being created.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterBinaryV1.TryParseHeader(System.Byte[],Photon.SocketServer.Rpc.Protocols.RtsMessageHeader@)">
            <summary>
              Tries to parse the message header.
            </summary>
            <param name = "data">
              The input data.
            </param>
            <param name = "header">
              The output header.
            </param>
            <returns>
              True on success.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterBinaryV1.WriteHeader(System.IO.Stream,Photon.SocketServer.Rpc.Protocols.RtsMessageType,System.Boolean)">
            <summary>
              Writes the header to the stream at the current position.
            </summary>
            <param name = "stream">
              The stream.
            </param>
            <param name = "messageType">
              The message type.
            </param>
            <param name = "encrypted">
              Indiciates whether the message body is encrypted.
            </param>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Protocols.RtsMessageHeaderConverterBinaryV1.HeaderSize">
            <summary>
              Gets the size of the message header - in this case 6 bytes.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Protocols.RtsMagicByte">
            <summary>
              Defines the valid magic bytes
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.RtsMagicByte.GpBinaryV1">
            <summary>
              The fist header version for GpBinary (photon 2 and earlier)
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.RtsMagicByte.GpBinaryV2">
            <summary>
              The second header version for GpBinary (photon 3)
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.RtsMagicByte.Amf3V1">
            <summary>
              The first header version for AMF3.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.RtsMagicByte.Amf3V2">
            <summary>
              The second header version for AMF3.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Protocols.RtsMessageHeader">
            <summary>
              The rts message header.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Protocols.RtsMessageHeader.IsEncrypted">
            <summary>
              Gets or sets a value indicating whether the message is encrypted.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Protocols.RtsMessageHeader.MagicByte">
            <summary>
              Gets or sets the message type.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Protocols.RtsMessageHeader.MessageType">
            <summary>
              Gets or sets the message type.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Protocols.RtsMessageHeader.SizeInBytes">
            <summary>
              Gets or sets the size in bytes.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Rpc.ValueTypes.RawCustomValue">
            <summary>
              Instances of this class will be created for unknown custom types sent by a client if 
              the <see cref="P:Photon.SocketServer.Protocol.AllowRawCustomValues"/> property is set to true.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.ValueTypes.RawCustomValue.#ctor(System.Byte,System.Byte[])">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Rpc.ValueTypes.RawCustomValue"/> class.
            </summary>
            <param name="code">The code of the custom type.</param>
            <param name="data">The serialized data.</param>
        </member>
        <member name="P:Photon.SocketServer.Rpc.ValueTypes.RawCustomValue.Code">
            <summary>
              Gets or sets the type code of the custom type.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Rpc.ValueTypes.RawCustomValue.Data">
            <summary>
              Gets or sets the serialized data of the custom type.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Rpc.ValueTypes.RawCustomArray">
            <summary>
              Instances of this class will be created for arrays of unknown custom types sent by a client if 
              the <see cref="P:Photon.SocketServer.Protocol.AllowRawCustomValues"/> property is set to true.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.ValueTypes.RawCustomArray.Code">
            <summary>
              Gets the type code of the custom type.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.ValueTypes.RawCustomArray.data">
            <summary>
              Gets the serialized data for each element of the custom type array.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.ValueTypes.RawCustomArray.#ctor(System.Byte,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Rpc.ValueTypes.RawCustomArray"/> class.
            </summary>
            <param name="code">The code of the custom type.</param>
            <param name="count">The number of element in the array.</param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.ValueTypes.RawCustomArray.GetEnumerator">
            <summary>
              Gets an enumerator for the custom arrays.
            </summary>
            <returns>
              The enumerator.
            </returns>
        </member>
        <member name="P:Photon.SocketServer.Rpc.ValueTypes.RawCustomArray.Length">
            <summary>
              Gets the array's length.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Rpc.ValueTypes.RawCustomArray.Item(System.Int32)">
            <summary>
              Gets the byte array at the specified index.
            </summary>
            <param name = "i">
              The index.
            </param>
            <returns>
              The byte array at the specified index.
            </returns>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Protocols.ProtocolType">
            <summary>
              Specifies the available protocol types.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.ProtocolType.GpBinaryV151">
            <summary>
              Binary byte protocol v1.5 with the old header.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.ProtocolType.GpBinaryV161">
            <summary>
              Binary byte protocol version 1.6 with the old header.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.ProtocolType.Amf3V151">
            <summary>
              Flash AMF3 protocol with the old header.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.ProtocolType.GpBinaryV152">
            <summary>
              Binary byte protocol v1.5 with the new header.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.ProtocolType.GpBinaryV162">
            <summary>
              Binary byte protocol version 1.6 with the new header.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.ProtocolType.Amf3V152">
            <summary>
              Flash AMF3 protocol with the new header.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.ProtocolType.Json">
            <summary>
            Json protocol used by websockets.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Security.DiffieHellmanKeyExchange">
            <summary>
              An implementation of the Diffie–Hellman key exchange.
              Diffie–Hellman establishes a shared secret that can be 
              used for secret communications by exchanging data over a public network.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Security.DiffieHellmanKeyExchange.defaultPrimeRoot">
            <summary>
              The prime root.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Security.DiffieHellmanKeyExchange.prime">
            <summary>
              The prime.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Security.DiffieHellmanKeyExchange.publicKey">
            <summary>
              The public key.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Security.DiffieHellmanKeyExchange.secret">
            <summary>
              The secret.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Security.DiffieHellmanKeyExchange.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Security.DiffieHellmanKeyExchange"/> class.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Security.DiffieHellmanKeyExchange.DeriveSharedKey(System.Byte[])">
            <summary>
              Derives the shared key.
            </summary>
            <param name = "otherPartyPublicKey">The others party public key.</param>
        </member>
        <member name="M:Photon.SocketServer.Security.DiffieHellmanKeyExchange.CalculatePublicKey">
            <summary>
              Calculates the public key.
            </summary>
            <returns>
              A <see cref="T:Photon.SocketServer.Numeric.BigInteger"/>.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Security.DiffieHellmanKeyExchange.CalculateSharedKey(Photon.SocketServer.Numeric.BigInteger)">
            <summary>
              Calculates the shared key.
            </summary>
            <param name="otherPartyPublicKey">
              The other party public key.
            </param>
            <returns>
              A <see cref="T:Photon.SocketServer.Numeric.BigInteger"/>.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Security.DiffieHellmanKeyExchange.GenerateRandomSecret(System.Int32)">
            <summary>
              Generates a random secret.
            </summary>
            <param name="secretLength">
              The secret length.
            </param>
            <returns>
              A <see cref="T:Photon.SocketServer.Numeric.BigInteger"/>.
            </returns>
            <remarks>
              Parameter requirements:
              The private key x be in the interval [2, (q - 2)].
              http://tools.ietf.org/html/rfc2631#section-2.2
            </remarks>
        </member>
        <member name="P:Photon.SocketServer.Security.DiffieHellmanKeyExchange.PublicKey">
            <summary>
              Gets the public key which can be used by the other party to derive the 
              shared key.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Security.DiffieHellmanKeyExchange.SharedKey">
            <summary>
              Gets the shared key that which can be used as the key for cryptographic operations.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.SendParameters">
            <summary>
              The struct contains the parameters for <see cref="M:Photon.SocketServer.PeerBase.SendOperationResponse(Photon.SocketServer.OperationResponse,Photon.SocketServer.SendParameters)"/>, <see cref="M:Photon.SocketServer.PeerBase.SendEvent(Photon.SocketServer.IEventData,Photon.SocketServer.SendParameters)"/> and <see cref="M:Photon.SocketServer.ServerToServer.ServerPeerBase.SendOperationRequest(Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)"/>
              and contains the info about incoming data at <see cref="M:Photon.SocketServer.PeerBase.OnOperationRequest(Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)"/>, <see cref="M:Photon.SocketServer.ServerToServer.ServerPeerBase.OnEvent(Photon.SocketServer.IEventData,Photon.SocketServer.SendParameters)"/> and <see cref="M:Photon.SocketServer.ServerToServer.ServerPeerBase.OnOperationResponse(Photon.SocketServer.OperationResponse,Photon.SocketServer.SendParameters)"/>.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.SendParameters.ChannelId">
            <summary>
              Gets or sets the channel id for the udp protocol.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.SendParameters.Encrypted">
            <summary>
              Gets or sets a value indicating whether the data is sent encrypted.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.SendParameters.Flush">
            <summary>
              Gets or sets a value indicating whether to flush all queued data with the next send.
              This overrides the configured send delay.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.SendParameters.Unreliable">
            <summary>
              Gets or sets a value indicating whether to send the data unreliable.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.SerializedEventData">
            <summary>
              An <see cref="T:Photon.SocketServer.IEventData"/> wrapper that serializes the event upon creation.
              This has a performance benefit if multiple receivers use the same protocol.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.SerializedEventData.eventData">
            <summary>
              The original event data.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.SerializedEventData.rpcProtocol">
            <summary>
              The used serialization protocol.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.SerializedEventData.serializedData">
            <summary>
              The cached serialzed data.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.SerializedEventData.#ctor(Photon.SocketServer.IEventData,Photon.SocketServer.IRpcProtocol)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.SerializedEventData"/> class.
            </summary>
            <param name="eventData">
              The event data.
            </param>
            <param name="rpcProtocol">
              The rpc protocol.
            </param>
        </member>
        <member name="M:Photon.SocketServer.SerializedEventData.#ctor(Photon.SocketServer.IEventData,Photon.SocketServer.IRpcProtocol,System.Byte[])">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.SerializedEventData"/> class.
            </summary>
            <param name="eventData">
              The event data.
            </param>
            <param name="rpcProtocol">
              The rpc protocol.
            </param>
            <param name="data">
              The data.
            </param>
        </member>
        <member name="M:Photon.SocketServer.SerializedEventData.Serialize(Photon.SocketServer.IRpcProtocol)">
            <summary>
              Returns the cached serialization data if the protocol is matches, otherwise serializes with the <paramref name = "protocol" />.
            </summary>
            <param name = "protocol">
              The protocol.
            </param>
            <returns>
              A byte array.
            </returns>
        </member>
        <member name="P:Photon.SocketServer.SerializedEventData.Code">
            <summary>
              Gets the event code.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.SerializedEventData.EventData">
            <summary>
              Gets the event data.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.SerializedEventData.Parameters">
            <summary>
              Gets the event params.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.SerializedEventData.Item(System.Byte)">
            <summary>
            Gets or sets the paramter associated with the specified key.
            </summary>
            <param name="parameterKey">The key of the parameter to get or set.</param>
            <returns>
            The parameter associated with the specified key. 
            If the specified key is not found, a get operation throws a KeyNotFoundException, 
            and a set operation creates a new paramter with the specified key.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <see cref="P:Photon.SocketServer.SerializedEventData.Parameters"/> property has not been initialized.
            </exception>
        </member>
        <member name="P:Photon.SocketServer.SerializedEventData.Protocol">
            <summary>
              Gets the used serialization protocol.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.SerializedEventData.Data">
            <summary>
              Gets the serialized data.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.ServerToServer.ByteBuffer">
            <summary>
              The byte buffer.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ServerToServer.ByteBuffer.binaryData">
            <summary>
              The binary data.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.ByteBuffer.#ctor(System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.ServerToServer.ByteBuffer"/> class.
            </summary>
            <param name="size">
              The size.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.ByteBuffer.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
              The read.
            </summary>
            <param name = "buffer">
              The buffer.
            </param>
            <param name = "offset">
              The offset.
            </param>
            <param name = "count">
              The count.
            </param>
            <returns>
              The number of bytes read
            </returns>
        </member>
        <member name="P:Photon.SocketServer.ServerToServer.ByteBuffer.Buffer">
            <summary>
              Gets Buffer.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.ServerToServer.ByteBuffer.BytesRead">
            <summary>
              Gets BytesRead.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.ServerToServer.ByteBuffer.Complete">
            <summary>
              Gets a value indicating whether Complete.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.ServerToServer.ByteBuffer.Size">
            <summary>
              Gets Size.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.ServerToServer.EventDataEventArgs">
            <summary>
              Provides data for the <see cref="E:Photon.SocketServer.ServerToServer.TcpClient.Event"/> event.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ServerToServer.EventDataEventArgs.eventData">
            <summary>
              The reveived event data .
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ServerToServer.EventDataEventArgs.sendParameters">
            <summary>
              Backing field of <see cref="P:Photon.SocketServer.ServerToServer.EventDataEventArgs.SendParameters"/>
            </summary>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.EventDataEventArgs.#ctor(Photon.SocketServer.IEventData,Photon.SocketServer.SendParameters)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.ServerToServer.EventDataEventArgs"/> class.
            </summary>
            <param name="eventData">The event data received from the server.</param>
            <param name="sendParameters">The send parameters the event was received with.</param>
        </member>
        <member name="P:Photon.SocketServer.ServerToServer.EventDataEventArgs.EventData">
            <summary>
              Gets the event data received from the server.
            </summary>
            <value>The event data.</value>
        </member>
        <member name="P:Photon.SocketServer.ServerToServer.EventDataEventArgs.SendParameters">
            <summary>
              Gets the send parameters the event was received with
            </summary>
        </member>
        <member name="T:Photon.SocketServer.ServerToServer.InitializeEncryptionEventArgs">
            <summary>
              Contains information for a intiialize encryption operation response.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.InitializeEncryptionEventArgs.#ctor(System.Int16,System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.ServerToServer.InitializeEncryptionEventArgs"/> class.
            </summary>
            <param name="returnCode">The received return code.</param>
            <param name="debugMessage">The received debug message.</param>
        </member>
        <member name="P:Photon.SocketServer.ServerToServer.InitializeEncryptionEventArgs.DebugMessage">
            <summary>
              Gets a the debeug message of the initialize encryption response.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.ServerToServer.InitializeEncryptionEventArgs.ReturnCode">
            <summary>
              Gets the return code from the initialize enryption response.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.ServerToServer.OperationResponseEventArgs">
            <summary>
              Provides data for the <see cref="E:Photon.SocketServer.ServerToServer.TcpClient.OperationResponse"/> event.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ServerToServer.OperationResponseEventArgs.operationResponse">
            <summary>
              The operaiton response.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ServerToServer.OperationResponseEventArgs.sendParameters">
            <summary>
              Backing field of <see cref="P:Photon.SocketServer.ServerToServer.OperationResponseEventArgs.SendParameters"/>
            </summary>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.OperationResponseEventArgs.#ctor(Photon.SocketServer.OperationResponse,Photon.SocketServer.SendParameters)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.ServerToServer.OperationResponseEventArgs"/> class.
            </summary>
            <param name="operationResponse">The received operation response.</param>
            <param name="sendParameters">The send parameters the response was received with.</param>
        </member>
        <member name="P:Photon.SocketServer.ServerToServer.OperationResponseEventArgs.OperationResponse">
            <summary>
              Gets the operation response.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.ServerToServer.OperationResponseEventArgs.SendParameters">
            <summary>
              Gets the send parameters the response was received with
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Numeric.BigInteger.DEFAULT_LEN">
            <summary>
            Default length of a BigInteger in bytes
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Numeric.BigInteger.length">
            <summary>
            The Length of this BigInteger
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Numeric.BigInteger.data">
            <summary>
            The data for this BigInteger
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Numeric.BigInteger.GenerateRandom(System.Int32,System.Security.Cryptography.RandomNumberGenerator)">
            <summary>
            Generates a new, random BigInteger of the specified length.
            </summary>
            <param name="bits">The number of bits for the new number.</param>
            <param name="rng">A random number generator to use to obtain the bits.</param>
            <returns>A random number of the specified length.</returns>
        </member>
        <member name="M:Photon.SocketServer.Numeric.BigInteger.GenerateRandom(System.Int32)">
            <summary>
            Generates a new, random BigInteger of the specified length using the default RNG crypto service provider.
            </summary>
            <param name="bits">The number of bits for the new number.</param>
            <returns>A random number of the specified length.</returns>
        </member>
        <member name="M:Photon.SocketServer.Numeric.BigInteger.Randomize(System.Security.Cryptography.RandomNumberGenerator)">
            <summary>
            Randomizes the bits in "this" from the specified RNG.
            </summary>
            <param name="rng">A RNG.</param>
        </member>
        <member name="M:Photon.SocketServer.Numeric.BigInteger.Randomize">
            <summary>
            Randomizes the bits in "this" from the default RNG.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Numeric.BigInteger.TestBit(System.UInt32)">
            <summary>
            Tests if the specified bit is 1.
            </summary>
            <param name="bitNum">The bit to test. The least significant bit is 0.</param>
            <returns>True if bitNum is set to 1, else false.</returns>
        </member>
        <member name="M:Photon.SocketServer.Numeric.BigInteger.Normalize">
            <summary>
                Normalizes this by setting the length to the actual number of
                uints used in data and by setting the sign to Sign.Zero if the
                value of this is 0.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Numeric.BigInteger.Incr2">
            <summary>
            Increments this by two
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Numeric.BigInteger.Kernel">
            <summary>
            Low level functions for the BigInteger
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Numeric.BigInteger.Kernel.AddSameSign(Photon.SocketServer.Numeric.BigInteger,Photon.SocketServer.Numeric.BigInteger)">
            <summary>
            Adds two numbers with the same sign.
            </summary>
            <param name="bi1">A BigInteger</param>
            <param name="bi2">A BigInteger</param>
            <returns>bi1 + bi2</returns>
        </member>
        <member name="M:Photon.SocketServer.Numeric.BigInteger.Kernel.Compare(Photon.SocketServer.Numeric.BigInteger,Photon.SocketServer.Numeric.BigInteger)">
            <summary>
            Compares two BigInteger
            </summary>
            <param name="bi1">A BigInteger</param>
            <param name="bi2">A BigInteger</param>
            <returns>The sign of bi1 - bi2</returns>
        </member>
        <member name="M:Photon.SocketServer.Numeric.BigInteger.Kernel.SingleByteDivideInPlace(Photon.SocketServer.Numeric.BigInteger,System.UInt32)">
            <summary>
            Performs n / d and n % d in one operation.
            </summary>
            <param name="n">A BigInteger, upon exit this will hold n / d</param>
            <param name="d">The divisor</param>
            <returns>n % d</returns>
        </member>
        <member name="M:Photon.SocketServer.Numeric.BigInteger.Kernel.Multiply(System.UInt32[],System.UInt32,System.UInt32,System.UInt32[],System.UInt32,System.UInt32,System.UInt32[],System.UInt32)">
            <summary>
            Multiplies the data in x [xOffset:xOffset+xLen] by
            y [yOffset:yOffset+yLen] and puts it into
            d [dOffset:dOffset+xLen+yLen].
            </summary>
            <remarks>
            This code is unsafe! It is the caller's responsibility to make
            sure that it is safe to access x [xOffset:xOffset+xLen],
            y [yOffset:yOffset+yLen], and d [dOffset:dOffset+xLen+yLen].
            </remarks>
        </member>
        <member name="M:Photon.SocketServer.Numeric.BigInteger.Kernel.MultiplyMod2p32pmod(System.UInt32[],System.Int32,System.Int32,System.UInt32[],System.Int32,System.Int32,System.UInt32[],System.Int32,System.Int32)">
            <summary>
            Multiplies the data in x [xOffset:xOffset+xLen] by
            y [yOffset:yOffset+yLen] and puts the low mod words into
            d [dOffset:dOffset+mod].
            </summary>
            <remarks>
            This code is unsafe! It is the caller's responsibility to make
            sure that it is safe to access x [xOffset:xOffset+xLen],
            y [yOffset:yOffset+yLen], and d [dOffset:dOffset+mod].
            </remarks>
        </member>
        <member name="T:Photon.SocketServer.ServerToServer.PingResponse">
            <summary>
              The ping response.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ServerToServer.PingResponse.SizeInBytes">
            <summary>
              The size in bytes.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.PingResponse.#ctor(System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.ServerToServer.PingResponse"/> class.
            </summary>
            <param name="clientTime">
              The client time.
            </param>
            <param name="serverTime">
              The server time.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.PingResponse.#ctor(System.Byte[])">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.ServerToServer.PingResponse"/> class.
            </summary>
            <param name="buffer">
              The buffer.
            </param>
        </member>
        <member name="P:Photon.SocketServer.ServerToServer.PingResponse.ClientTime">
            <summary>
              Gets ClientTime.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.ServerToServer.PingResponse.ServerTime">
            <summary>
              Gets ServerTime.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.ServerToServer.PingResponseEventArgs">
            <summary>
              Provides data for the <see cref="E:Photon.SocketServer.ServerToServer.TcpClient.PingResponse"/> event.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ServerToServer.PingResponseEventArgs.pingResponse">
            <summary>
              ping response recived from the server.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.PingResponseEventArgs.#ctor(Photon.SocketServer.ServerToServer.PingResponse)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.ServerToServer.PingResponseEventArgs"/> class.
            </summary>
            <param name="pingResponse">The ping response received from the server.</param>
        </member>
        <member name="P:Photon.SocketServer.ServerToServer.PingResponseEventArgs.PingResponse">
            <summary>
              Gets the ping response recived from the server.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.ServerToServer.ServerPeerBase">
            <summary>
              The server peer base.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ServerToServer.ServerPeerBase.log">
            <summary>
              The logger.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ServerToServer.ServerPeerBase.operationDataLogger">
            <summary>
              The operation data logger.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.ServerPeerBase.#ctor(Photon.SocketServer.IRpcProtocol,PhotonHostRuntimeInterfaces.IPhotonPeer)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.ServerToServer.ServerPeerBase"/> class.
            </summary>
            <param name="protocol">
              The rpc protocol.
            </param>
            <param name="unmanagedPeer">
              The unmanaged peer.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.ServerPeerBase.InitializeEncryption">
            <summary>
              Initializes the peer to receive and send encrypted operations.
            </summary>
            <returns>
              Returns <see cref="F:Photon.SocketServer.SendResult.Ok"/> if the event was successfully sent; 
              otherwise an error value. See <see cref="T:Photon.SocketServer.SendResult"/> for more information. 
            </returns>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.ServerPeerBase.SendOperationRequest(Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)">
            <summary>
              Sends an operation request.
            </summary>
            <param name="operationRequest">
              The operation request.
            </param>
            <param name="sendParameters">
              The send Options.
            </param>
            <returns>
              <see cref="F:Photon.SocketServer.SendResult.EncryptionNotSupported"/>: Encryption not initialized.
              <see cref="F:Photon.SocketServer.SendResult.Disconnected"/>: Not connected anymore.
              <see cref="F:Photon.SocketServer.SendResult.SendBufferFull"/>: The send buffer was full.
              <see cref="F:Photon.SocketServer.SendResult.Ok"/>: Success.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.ServerPeerBase.OnReceiveInternal(System.Byte[],Photon.SocketServer.SendParameters,System.Int32,System.Int32,System.Int32)">
            <summary>
              Enables the server peer to receive events and operation response.
            </summary>
            <param name = "data">
              The data.
            </param>
            <param name = "sendParameters">
              The send Options.
            </param>
            <param name="rtt">
            The round trip time.
            </param>
            <param name="rttVariance">
            The round trip time variance.
            </param>
            <param name="numFailures">
            The number of failures.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.ServerPeerBase.OnEvent(Photon.SocketServer.IEventData,Photon.SocketServer.SendParameters)">
            <summary>
              Called when an <see cref="T:Photon.SocketServer.EventData"/> was received.
            </summary>
            <param name="eventData">
              The event data.
            </param>
            <param name="sendParameters">
              The send Parameters.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.ServerPeerBase.OnOperationResponse(Photon.SocketServer.OperationResponse,Photon.SocketServer.SendParameters)">
            <summary>
              Called when an <see cref="T:Photon.SocketServer.OperationResponse"/> was received.
            </summary>
            <param name="operationResponse">
              The operation response.
            </param>
            <param name="sendParameters">
              The send Parameters.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.ServerPeerBase.OnInitializeEcryptionCompleted(System.Int16,System.String)">
            <summary>
              Invoked if an initialize encryption request was completed.
            </summary>
            <param name = "resultCode">
              The result code.
            </param>
            <param name = "debugMessage">
              The debuf message.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.ServerPeerBase.LogOperationRequest(Photon.SocketServer.OperationRequest,System.Byte[],Photon.SocketServer.SendResult,Photon.SocketServer.SendParameters)">
            <summary>
              Logs the operation request.
            </summary>
            <param name = "request">
              The request.
            </param>
            <param name = "data">
              The data.
            </param>
            <param name = "sendResult">
              The send result.
            </param>
            <param name = "sendParameters">
              The send Options.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.ServerPeerBase.SendInternalOperationRequest(Photon.SocketServer.OperationRequest)">
            <summary>
              Sends an internal operaton request.
            </summary>
            <param name = "request">
              The request.
            </param>
            <returns>
              the send result
            </returns>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.ServerPeerBase.SendOperationRequestInternal(System.Byte[],Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)">
            <summary>
              Used by <see cref="M:Photon.SocketServer.ServerToServer.ServerPeerBase.SendOperationRequest(Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)"/>.
            </summary>
            <param name="data">
              The data.
            </param>
            <param name="operationRequest">
              The operation request.
            </param>
            <param name="sendParameters">
              The send parameters.
            </param>
            <returns>
              <see cref="F:Photon.SocketServer.SendResult.Disconnected"/>: Not connected anymore.
              <see cref="F:Photon.SocketServer.SendResult.SendBufferFull"/>: The send buffer was full.
              <see cref="F:Photon.SocketServer.SendResult.Ok"/>: Success.
            </returns>
        </member>
        <member name="T:Photon.SocketServer.ServerToServer.SocketErrorEventArgs">
            <summary>
              Provides data for the <see cref="E:Photon.SocketServer.ServerToServer.TcpClient.ConnectError"/> event.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.SocketErrorEventArgs.#ctor(System.Net.Sockets.SocketError)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.ServerToServer.SocketErrorEventArgs"/> class.
            </summary>
            <param name="socketError">The <see cref="P:Photon.SocketServer.ServerToServer.SocketErrorEventArgs.SocketError"/> occured during connection attemp.</param>
        </member>
        <member name="P:Photon.SocketServer.ServerToServer.SocketErrorEventArgs.SocketError">
            <summary>
              Gets the socket error code occured during the connection attemp.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.ServerToServer.TcpBinaryReader">
            <summary>
              The tcp binary reader.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ServerToServer.TcpBinaryReader.HeaderSize">
            <summary>
              The header size.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ServerToServer.TcpBinaryReader.Protocol">
            <summary>
              the used rpc protocol
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ServerToServer.TcpBinaryReader.log">
            <summary>
              An <see cref="T:ExitGames.Logging.ILogger"/> instance used to log messages to the logging framework.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ServerToServer.TcpBinaryReader.header">
            <summary>
              The header.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ServerToServer.TcpBinaryReader.headerBuffer">
            <summary>
              The header buffer.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ServerToServer.TcpBinaryReader.messageBuffer">
            <summary>
              The message buffer.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ServerToServer.TcpBinaryReader.parseFunction">
            <summary>
              The parse function.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ServerToServer.TcpBinaryReader.pingResponseBuffer">
            <summary>
              The ping response buffer.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ServerToServer.TcpBinaryReader.sendParameters">
            <summary>
              The received send parameters for channelId and reliability
            </summary>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpBinaryReader.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.ServerToServer.TcpBinaryReader"/> class.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpBinaryReader.Parse(System.Byte[],System.Int32)">
            <summary>
              The parse.
            </summary>
            <param name = "buffer">
              The buffer.
            </param>
            <param name = "count">
              The count.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpBinaryReader.ParseHeader(System.Byte[],System.Int32,System.Int32)">
            <summary>
              The parse header.
            </summary>
            <param name = "buffer">
              The buffer.
            </param>
            <param name = "offset">
              The offset.
            </param>
            <param name = "count">
              The count.
            </param>
            <returns>
              Number of bytes parsed.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpBinaryReader.ParseMagicNumber(System.Byte[],System.Int32,System.Int32)">
            <summary>
              The parse magic number.
            </summary>
            <param name = "buffer">
              The buffer.
            </param>
            <param name = "offset">
              The offset.
            </param>
            <param name = "count">
              The count.
            </param>
            <returns>
              The parsed magic number.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpBinaryReader.ParseMessage(System.Byte[],System.Int32,System.Int32)">
            <summary>
              The parse message.
            </summary>
            <param name = "buffer">
              The buffer.
            </param>
            <param name = "offset">
              The offset.
            </param>
            <param name = "count">
              The count.
            </param>
            <returns>
              Number of bytes parsed.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpBinaryReader.ParsePing(System.Byte[],System.Int32,System.Int32)">
            <summary>
              The parse ping.
            </summary>
            <param name = "buffer">
              The buffer.
            </param>
            <param name = "offset">
              The offset.
            </param>
            <param name = "count">
              The count.
            </param>
            <returns>
              Number of bytes parsed.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpBinaryReader.TryRtsMessageHeader(System.Byte[],System.Int32@)">
            <summary>
              Reads the rts message header.
            </summary>
            <param name = "data">
              The data.
            </param>
            <param name = "bodyLength">
              The body length.
            </param>
            <returns>
              true on success.
            </returns>
        </member>
        <member name="E:Photon.SocketServer.ServerToServer.TcpBinaryReader.OnEvent">
            <summary>
              Invoked if an <see cref="T:Photon.SocketServer.EventData"/> was received.
            </summary>
        </member>
        <member name="E:Photon.SocketServer.ServerToServer.TcpBinaryReader.OnInitResponse">
            <summary>
              Invoked if a init response was received.
            </summary>
        </member>
        <member name="E:Photon.SocketServer.ServerToServer.TcpBinaryReader.OnOperationResponse">
            <summary>
              Invoked if an <see cref="T:Photon.SocketServer.OperationResponse"/> was received.
            </summary>
        </member>
        <member name="E:Photon.SocketServer.ServerToServer.TcpBinaryReader.OnPingResponse">
            <summary>
              Invoked if a <see cref="T:Photon.SocketServer.ServerToServer.PingResponse"/> was received.
            </summary>
        </member>
        <member name="E:Photon.SocketServer.ServerToServer.TcpBinaryReader.OnInternalOperationResponse">
            <summary>
              Invoked if an internal <see cref="T:Photon.SocketServer.OperationResponse"/> was received.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.ServerToServer.TcpBinaryReader.CryptoProvider">
            <summary>
              Gets or sets the CryptoProvider.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.ServerToServer.TcpBinaryReader.ParseDelegate">
            <summary>
              The parse delegate.
            </summary>
            <param name = "buffer">
              The buffer.
            </param>
            <param name = "offset">
              The offset.
            </param>
            <param name = "count">
              The count.
            </param>
            <returns>
              number of bytes parsed
            </returns>
        </member>
        <member name="T:Photon.SocketServer.ServerToServer.TcpClient">
            <summary>
              Provides methods to communicate with other photon server applications.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.ServerToServer.TcpClientBase">
            <summary>
              Base class for Tcp client implementations.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ServerToServer.TcpClientBase.log">
            <summary>
              The loger.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ServerToServer.TcpClientBase.operationDataLogger">
            <summary>
              An <see cref="T:ExitGames.Logging.ILogger"/> instance used to log operations to the logging framework.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ServerToServer.TcpClientBase.binaryReader">
            <summary>
              The binary reader.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ServerToServer.TcpClientBase.clientVersion">
            <summary>
              The client version.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ServerToServer.TcpClientBase.socketSynRoot">
            <summary>
              A sync root for connect/disconnect.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ServerToServer.TcpClientBase.application">
            <summary>
              Backing field for <see cref="P:Photon.SocketServer.ServerToServer.TcpClientBase.ApplicationId"/>.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ServerToServer.TcpClientBase.connected">
            <summary>
              Backing field of <see cref="P:Photon.SocketServer.ServerToServer.TcpClientBase.Connected"/>.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ServerToServer.TcpClientBase.keyExchange">
            <summary>
              the key exchange
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ServerToServer.TcpClientBase.localEnd">
            <summary>
              Backing field for <see cref="P:Photon.SocketServer.ServerToServer.TcpClientBase.LocalEndPoint"/>.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ServerToServer.TcpClientBase.remoteEnd">
            <summary>
              Backing field for <see cref="P:Photon.SocketServer.ServerToServer.TcpClientBase.RemoteEndPoint"/>.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.ServerToServer.TcpClientBase.socketConnection">
            <summary>
              the used socket
            </summary>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClientBase.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.ServerToServer.TcpClientBase"/> class.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClientBase.#ctor(System.Version)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.ServerToServer.TcpClientBase"/> class.
            </summary>
            <param name="clientVersion">
              The client version.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClientBase.Connect(System.Net.IPEndPoint,System.String)">
            <summary>
              Establishes a connection to the remote host.
            </summary>
            <param name = "remoteEndPoint">
              The remote end point to connect to.
            </param>
            <param name = "applicationId">
              The photon application to connect to.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClientBase.Connect(System.Net.IPEndPoint,System.String,System.Net.IPEndPoint)">
            <summary>
              Establishes a connection to the remote host.
            </summary>
            <param name = "remoteEndPoint">
              The remote end point to connect to.
            </param>
            <param name = "applicationId">
              The photon application to connect to.
            </param>
            <param name = "localEndPoint">
              The local end point to bind the socket to. Use null to avoid binding.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClientBase.Disconnect">
            <summary>
              Closes the connection to the remote host.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClientBase.InitializeEncryption">
            <summary>
              Initializes the peer to receive and send encrypted operations.
            </summary>
            <returns>
              Returns <see cref="F:Photon.SocketServer.SendResult.Ok"/> if the event was successfully sent; 
              otherwise an error value. See <see cref="T:Photon.SocketServer.SendResult"/> for more information. 
            </returns>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClientBase.SendOperationRequest(Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)">
            <summary>
              Sends an operation request to the server.
            </summary>
            <param name="operationRequest">
              The operation request.
            </param>
            <param name="sendParameters">
              The send parameters.
            </param>
            <returns>
              Returns <see cref="F:Photon.SocketServer.SendResult.Ok"/> if the operation request was successfully sent; 
              otherwise an error value. See <see cref="T:Photon.SocketServer.SendResult"/> for more information. 
            </returns>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClientBase.SendPing">
            <summary>
              Sends a ping request to the server.
              The ping request will be send with <see cref="P:System.Environment.TickCount"/> 
              as the tme stamp.
            </summary>
            <returns>
              Returns OK or disconnected.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClientBase.SendPing(System.Int32)">
            <summary>
              Sends a ping request to the server.
            </summary>
            <param name = "timeStamp">
              A user definined time stamp. 
              The time stamp will be send back by the server with the ping response
              ans can be used to mesure the duration of the request.
            </param>
            <returns>
              Returns OK or disconnected.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClientBase.Dispose">
            <summary>
              Releases all resources used this instance.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClientBase.Dispose(System.Boolean)">
            <summary>
              Releases unmanaged and - optionally - managed resources
            </summary>
            <param name = "disposing">
              <c>true</c> to release both managed and unmanaged resources; 
              <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClientBase.OnAsyncSocketError(System.Net.Sockets.SocketError)">
            <summary>
              A asynchronous operation completed with a <see cref="T:System.Net.Sockets.SocketError"/>.
            </summary>
            <param name="socketError">
              The socket error.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClientBase.OnConnectCompleted">
            <summary>
              On connect completed...
            </summary>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClientBase.OnConnectError(System.Net.Sockets.SocketError)">
            <summary>
              On connect error...
            </summary>
            <param name = "socketError">
              The error.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClientBase.OnDisconnect(System.Net.Sockets.SocketError)">
            <summary>
              On disconnect ...
            </summary>
            <param name = "socketError">
              The error.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClientBase.OnEvent(Photon.SocketServer.IEventData,Photon.SocketServer.SendParameters)">
            <summary>
              The on event.
            </summary>
            <param name = "eventData">
              The event data.
            </param>
            <param name = "sendParameters">
              The send parameters the event was received with.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClientBase.OnInitializeEcryptionCompleted(System.Int16,System.String)">
            <summary>
              Invoked if an initialize encryption request was completed.
            </summary>
            <param name = "resultCode">
              The result code.
            </param>
            <param name = "debugMessage">
              The debuf message.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClientBase.OnOperationResponse(Photon.SocketServer.OperationResponse,Photon.SocketServer.SendParameters)">
            <summary>
              The on operation response.
            </summary>
            <param name = "operationResponse">
              The operation response.
            </param>
            <param name = "sendParameters">
              The send parameters the event was received with.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClientBase.OnPingResponse(Photon.SocketServer.ServerToServer.PingResponse)">
            <summary>
              The on ping response.
            </summary>
            <param name = "pingResponse">
              The ping response.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClientBase.BeginReceive(System.Net.Sockets.Socket,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
              Begin async receive ...
            </summary>
            <param name = "socket">
              The socket.
            </param>
            <param name = "e">
              The event args.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClientBase.OnConnectAsyncCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
              On async connect completed ...
            </summary>
            <param name = "sender">
              The sender.
            </param>
            <param name = "e">
              The e.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClientBase.OnInitResponse(System.Byte[])">
            <summary>
              On init response ...
            </summary>
            <param name = "data">
              The data.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClientBase.OnInternalOperationResponse(Photon.SocketServer.OperationResponse)">
            <summary>
              Handles the InitEncryption response.
            </summary>
            <param name = "response">
              The response.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClientBase.OnReceiveAsyncCompleted(System.Object,System.Net.Sockets.SocketAsyncEventArgs)">
            <summary>
              On async receive completed ...
            </summary>
            <param name = "sender">
              The sender.
            </param>
            <param name = "e">
              The e.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClientBase.Send(System.Byte[],Photon.SocketServer.SendParameters)">
            <summary>
              Sends bytes ...
            </summary>
            <param name = "data">
              The data.
            </param>
            <param name = "sendParameters">
              The send parameters are received on the server and can be used for further dispatching.
            </param>
            <returns>
              Ok or disconnected
            </returns>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClientBase.SendInitRequest">
            <summary>
              Sends an init request
            </summary>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClientBase.SendInternalOperationRequest(Photon.SocketServer.OperationRequest)">
            <summary>
              Sends an internal operaton request.
            </summary>
            <param name = "request">
              The request.
            </param>
            <returns>
              the send result
            </returns>
        </member>
        <member name="P:Photon.SocketServer.ServerToServer.TcpClientBase.ApplicationId">
            <summary>
              Gets the application id.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.ServerToServer.TcpClientBase.ClientVersion">
            <summary>
              Gets the client version.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.ServerToServer.TcpClientBase.Connected">
            <summary>
              Gets a value indicating whether this instance is connected to a remote host.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.ServerToServer.TcpClientBase.CryptoProvider">
            <summary>
              Gets or sets the CryptoProvider.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.ServerToServer.TcpClientBase.LocalEndPoint">
            <summary>
              Gets the local endpoint.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.ServerToServer.TcpClientBase.Protocol">
            <summary>
              Gets the used rpc protocol.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.ServerToServer.TcpClientBase.RemoteEndPoint">
            <summary>
              Gets the remote end point.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClient.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.ServerToServer.TcpClient"/> class.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClient.#ctor(System.Version)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.ServerToServer.TcpClient"/> class.
            </summary>
            <param name="clientVersion">
              The client version.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClient.OnAsyncSocketError(System.Net.Sockets.SocketError)">
            <summary>
              Invokes the <see cref="E:Photon.SocketServer.ServerToServer.TcpClient.AsyncSocketError"/> event.
            </summary>
            <param name="socketError">
              The socket error.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClient.OnConnectCompleted">
            <summary>
              Raises the <see cref="E:Photon.SocketServer.ServerToServer.TcpClient.ConnectCompleted"/> event.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClient.OnConnectError(System.Net.Sockets.SocketError)">
            <summary>
              Raises the <see cref="E:Photon.SocketServer.ServerToServer.TcpClient.ConnectError"/> event.
            </summary>
            <param name="error">The socket error which occured during teh connection attempt.</param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClient.OnDisconnect(System.Net.Sockets.SocketError)">
            <summary>
              Raises the <see cref="E:Photon.SocketServer.ServerToServer.TcpClient.Disconnected"/> event.
            </summary>
            <param name="socketError">
              The socket error code.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClient.OnEvent(Photon.SocketServer.IEventData,Photon.SocketServer.SendParameters)">
            <summary>
              Raises the <see cref="E:Photon.SocketServer.ServerToServer.TcpClient.Event"/> event.
            </summary>
            <param name="eventData">The event data.</param>
            <param name="sendParameters">The send parameters the response was received with.</param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClient.OnInitializeEcryptionCompleted(System.Int16,System.String)">
            <summary>
              Raises the <see cref="E:Photon.SocketServer.ServerToServer.TcpClient.InitializeEncryptionCompleted"/> event.
            </summary>
            <param name="resultCode">The result code received from the remote host.</param>
            <param name="debugMessage">The debug message received from the remote host.</param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClient.OnOperationResponse(Photon.SocketServer.OperationResponse,Photon.SocketServer.SendParameters)">
            <summary>
              Raises the <see cref="E:Photon.SocketServer.ServerToServer.TcpClient.OperationResponse"/> event.
            </summary>
            <param name="operationResponse">The operation response.</param>
            <param name="sendParameters">The send parameters the response was received with.</param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TcpClient.OnPingResponse(Photon.SocketServer.ServerToServer.PingResponse)">
            <summary>
              Raises the <see cref="E:Photon.SocketServer.ServerToServer.TcpClient.PingResponse"/> event.
            </summary>
            <param name="pingResponse">The ping response.</param>
        </member>
        <member name="E:Photon.SocketServer.ServerToServer.TcpClient.AsyncSocketError">
            <summary>
              Invoked if an async operation completed with a <see cref="T:System.Net.Sockets.SocketError"/>.
            </summary>
        </member>
        <member name="E:Photon.SocketServer.ServerToServer.TcpClient.ConnectCompleted">
            <summary>
              Invoked when the client succussfully connected to the remote host.
            </summary>
        </member>
        <member name="E:Photon.SocketServer.ServerToServer.TcpClient.ConnectError">
            <summary>
              Invoked when an error occures during a connection attempt.
            </summary>
        </member>
        <member name="E:Photon.SocketServer.ServerToServer.TcpClient.Disconnected">
            <summary>
              Invoked when the client has been diconnected.
            </summary>
        </member>
        <member name="E:Photon.SocketServer.ServerToServer.TcpClient.Event">
            <summary>
              Occurs when an event has been received from the remote host.
            </summary>
        </member>
        <member name="E:Photon.SocketServer.ServerToServer.TcpClient.InitializeEncryptionCompleted">
            <summary>
              Occurs when an inittlaize encryption response has been received from the remote host.
            </summary>
        </member>
        <member name="E:Photon.SocketServer.ServerToServer.TcpClient.OperationResponse">
            <summary>
              Occurs when an operation response hav been received from the remote host.
            </summary>
        </member>
        <member name="E:Photon.SocketServer.ServerToServer.TcpClient.PingResponse">
            <summary>
              Occurs when a ping response has been received from the remote host.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Diagnostics.CpuUsageCounterReader">
            <summary>
              The process cpu usage counter.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Diagnostics.CpuUsageCounterReader.windowsPerformanceCounterField">
            <summary>
              The windows performance counter field.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Diagnostics.CpuUsageCounterReader.Decrement">
            <summary>
              This method is not supported.
            </summary>
            <returns>
              Nothing. Throws a <see cref="T:System.NotSupportedException"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
              This is a read only counter.
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Diagnostics.CpuUsageCounterReader.GetNextValue">
            <summary>
              Gets the next value.
            </summary>
            <returns>
              The next value.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Diagnostics.CpuUsageCounterReader.Increment">
            <summary>
              This method is not supported.
            </summary>
            <returns>
              Nothing. Throws a <see cref="T:System.NotSupportedException"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
              This is a read only counter.
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Diagnostics.CpuUsageCounterReader.IncrementBy(System.Int64)">
            <summary>
              This method is not supported.
            </summary>
            <param name="value">
              The value to increment by.
            </param>
            <returns>
              Nothing. Throws a <see cref="T:System.NotSupportedException"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
              This is a read only counter.
            </exception>
        </member>
        <member name="P:Photon.SocketServer.Diagnostics.CpuUsageCounterReader.CounterType">
            <summary>
              Gets CounterType.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Diagnostics.CpuUsageCounterReader.Name">
            <summary>
              Gets Name.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.InitRequest">
            <summary>
              Provides initialization request parameter.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.InitRequest.applicationId">
            <summary>
              The application id.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.InitRequest.clientVersion">
            <summary>
              The client version.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.InitRequest.protocol">
            <summary>
              The rpc protocol.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.InitRequest.#ctor(System.String,System.Version,Photon.SocketServer.IRpcProtocol)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.InitRequest"/> class.
            </summary>
            <param name="applicationId">
              The application id.
            </param>
            <param name="clientVersion">
              The client version.
            </param>
            <param name="protocol">
              The rpc Protocol.
            </param>
        </member>
        <member name="P:Photon.SocketServer.InitRequest.ApplicationId">
            <summary>
              Gets the application id.
            </summary>
            <value>The application id.</value>
        </member>
        <member name="P:Photon.SocketServer.InitRequest.ClientVersion">
            <summary>
              Gets the client version.
            </summary>
            <value>The client version.</value>
        </member>
        <member name="P:Photon.SocketServer.InitRequest.ConnectionId">
            <summary>
              Gets the connection id.
            </summary>
            <remarks>
              Peers connected to different ports may have similar connection ids.
            </remarks>
        </member>
        <member name="P:Photon.SocketServer.InitRequest.LocalIP">
            <summary>
              Gets the local IP the client connected to.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.InitRequest.LocalPort">
            <summary>
              Gets the port the client connects to.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.InitRequest.PhotonPeer">
            <summary>
              Gets the native peer.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.InitRequest.Protocol">
            <summary>
              Gets the used rpc protocol.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.InitRequest.RemoteIP">
            <summary>
              Gets the client's IP address.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.InitRequest.RemotePort">
            <summary>
              Gets the port the client connects from.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Concurrency.MessageChannel`1">
            <summary>
              Subclass of <see cref="T:ExitGames.Concurrency.Channels.Channel`1">ExitGames.Concurrency.Channels.Channel&lt;T&gt;</see>.
              Uses an <see cref="T:ExitGames.Diagnostics.Counter.ICounter">ExitGames.Diagnostics.Counter.ICounter</see> to track the amount of published messages.
            </summary>
            <typeparam name="T">
              The type of message published in this channel.
            </typeparam>
        </member>
        <member name="F:Photon.SocketServer.Concurrency.MessageChannel`1.counter">
            <summary>
              The counter.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Concurrency.MessageChannel`1.#ctor(ExitGames.Diagnostics.Counter.ICounter)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Concurrency.MessageChannel`1"/> class.
            </summary>
            <param name="publishCounter">
              The counter to track the amount of published messages.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Concurrency.MessageChannel`1.Finalize">
            <summary>
              Finalizes an instance of the <see cref="T:Photon.SocketServer.Concurrency.MessageChannel`1"/> class.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Concurrency.MessageChannel`1.Dispose">
            <summary>
              Calls <see cref="M:Photon.SocketServer.Concurrency.MessageChannel`1.Dispose(System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Concurrency.MessageChannel`1.Dispose(System.Boolean)">
            <summary>
              Disposes the counter and clears all subscribers.
            </summary>
            <param name="disposing">
              Indicates wheter called from <see cref="M:Photon.SocketServer.Concurrency.MessageChannel`1.Dispose"/> or from the destructor.
            </param>
        </member>
        <member name="T:Photon.SocketServer.Concurrency.MessageChannel`1.Executor">
            <summary>
              This class counts the number of published messages.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Concurrency.MessageChannel`1.Executor.counter">
            <summary>
              The counter.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Concurrency.MessageChannel`1.Executor.#ctor(ExitGames.Diagnostics.Counter.ICounter)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Concurrency.MessageChannel`1.Executor"/> class.
            </summary>
            <param name="counter">
              The counter.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Concurrency.MessageChannel`1.Executor.ReceiveOnProducerThread(`0)">
            <summary>
              Receive message on producer thread.
            </summary>
            <param name = "msg">
              The msg.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Concurrency.MessageChannel`1.Executor.DeregisterSubscription(System.IDisposable)">
            <summary>
              Deregister Subscription - does nothing.
            </summary>
            <param name = "toRemove">
              The to remove.
            </param>
            <returns>
              Always false.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Concurrency.MessageChannel`1.Executor.RegisterSubscription(System.IDisposable)">
            <summary>
              Register Subscription - does nothing.
            </summary>
            <param name = "toAdd">
              The to add.
            </param>
        </member>
        <member name="P:Photon.SocketServer.Concurrency.MessageChannel`1.Executor.Subscriptions">
            <summary>
              Gets Subscriptions.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Concurrency.UnsubscriberCollection">
            <summary>
              This is a collection of <see cref="T:ExitGames.Concurrency.Channels.Channel`1">channel</see> subscriptions.
              <see cref="M:Photon.SocketServer.Concurrency.UnsubscriberCollection.Dispose"/> unsubcribes all subscriptions.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Concurrency.UnsubscriberCollection.unsubscriber">
            <summary>
              The unsubscriber.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Concurrency.UnsubscriberCollection.#ctor(System.IDisposable[])">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Concurrency.UnsubscriberCollection"/> class.
            </summary>
            <param name="unsubscriber">
              The unsubscriber.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Concurrency.UnsubscriberCollection.Dispose">
            <summary>
              The dispose.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Diagnostics.Configuration.CounterPublisherSettings">
            <summary>
              The counter publisher settings.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Diagnostics.Configuration.CounterPublisherSettings.TryGetIpEndpoint(System.Net.IPEndPoint@)">
            <summary>
              The try get ip endpoint.
            </summary>
            <param name = "endPoint">
              The end point.
            </param>
            <returns>
              True if parsed successfully.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Diagnostics.Configuration.CounterPublisherSettings.TryGetSendInterface(System.Net.IPAddress@)">
            <summary>
              The try get send interface.
            </summary>
            <param name = "address">
              The address.
            </param>
            <returns>
              True if parsed successfully.
            </returns>
        </member>
        <member name="P:Photon.SocketServer.Diagnostics.Configuration.CounterPublisherSettings.Enabled">
            <summary>
              Gets or sets a value indicating whether Enabled.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Diagnostics.Configuration.CounterPublisherSettings.AddDefaultAppCounter">
            <summary>
              Gets or sets a value indicating whether the application default counter should be added to
              the counter publisher by default. 
              The default counters are defined in the Photon.SocketServer.Diagnostics.PhotonCounter class.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Diagnostics.Configuration.CounterPublisherSettings.Endpoint">
            <summary>
              Gets Endpoint.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Diagnostics.Configuration.CounterPublisherSettings.Protocol">
            <summary>
              Gets or sets the protocol.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Diagnostics.Configuration.CounterPublisherSettings.PublishInterval">
            <summary>
              Gets PublishInterval.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Diagnostics.Configuration.CounterPublisherSettings.SendInterface">
            <summary>
              Gets SendInterface.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Diagnostics.Configuration.CounterPublisherSettings.UpdateInterval">
            <summary>
              Gets UpdateInterval.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Diagnostics.Configuration.PhotonSettings">
            <summary>
              The photon settings.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Diagnostics.Configuration.PhotonSettings.Default">
            <summary>
              The default.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Diagnostics.Configuration.PhotonSettings.#cctor">
            <summary>
              Initializes static members of the <see cref="T:Photon.SocketServer.Diagnostics.Configuration.PhotonSettings"/> class.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Diagnostics.Configuration.PhotonSettings.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Diagnostics.Configuration.PhotonSettings"/> class.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Diagnostics.Configuration.PhotonSettings.CounterPublisher">
            <summary>
              Gets CounterPublisher.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Diagnostics.CounterPublisher">
            <summary>
              The counter publisher.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Diagnostics.CounterPublisher.defaultInstance">
            <summary>
              The default instance.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Diagnostics.CounterPublisher.counterPublisher">
            <summary>
              Counter publisher.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Diagnostics.CounterPublisher.enabled">
            <summary>
              The enabled.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Diagnostics.CounterPublisher.protocol">
            <summary>
              The protocol type;
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Diagnostics.CounterPublisher.sendInterface">
            <summary>
              The send interface.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Diagnostics.CounterPublisher.sendInterval">
            <summary>
              The send interval.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Diagnostics.CounterPublisher.updateInterval">
            <summary>
              The update interval.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Diagnostics.CounterPublisher.counterSender">
            <summary>
              Counter sender.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Diagnostics.CounterPublisher.socketSender">
            <summary>
              PGM sender.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Diagnostics.CounterPublisher.#ctor(System.Net.IPEndPoint,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Diagnostics.CounterPublisher"/> class.
            </summary>
            <param name="endPoint">
              The end point.
            </param>
            <param name="updateInterval">
              The update interval.
            </param>
            <param name="sendInterval">
              The send interval.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Diagnostics.CounterPublisher.#ctor(Photon.SocketServer.Diagnostics.CounterPublisher.ProtocolType,System.Net.IPEndPoint,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Diagnostics.CounterPublisher"/> class.
            </summary>
            <param name="protocol">The protocol type. Currently only Udp and Pgm protocols are supported.</param>
            <param name="endPoint">The end point.</param>
            <param name="updateInterval">The update interval.</param>
            <param name="sendInterval">The send interval.</param>
        </member>
        <member name="M:Photon.SocketServer.Diagnostics.CounterPublisher.#ctor(System.Net.IPEndPoint,System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Diagnostics.CounterPublisher"/> class.
            </summary>
            <param name="endPoint">
              The end point.
            </param>
            <param name="sendInterface">
              The send interface.
            </param>
            <param name="updateInterval">
              The update interval.
            </param>
            <param name="sendInterval">
              The send interval.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Diagnostics.CounterPublisher.#ctor(Photon.SocketServer.Diagnostics.CounterPublisher.ProtocolType,System.Net.IPEndPoint,System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Diagnostics.CounterPublisher"/> class.
            </summary>
            <param name="protocol">The protocol type. Currently only Udp and Pgm protocols are supported.</param>
            <param name="endPoint">The end point.</param>
            <param name="sendInterface">The send interface.</param>
            <param name="updateInterval">The update interval.</param>
            <param name="sendInterval">The send interval.</param>
        </member>
        <member name="M:Photon.SocketServer.Diagnostics.CounterPublisher.#ctor(Photon.SocketServer.Diagnostics.Configuration.CounterPublisherSettings)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Diagnostics.CounterPublisher"/> class.
            </summary>
            <param name="settings">
              The settings.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Diagnostics.CounterPublisher.AddCounter(ExitGames.Diagnostics.Counter.ICounter,System.String)">
            <summary>
              The add counter.
            </summary>
            <param name = "counter">
              The counter.
            </param>
            <param name = "name">
              The name.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Diagnostics.CounterPublisher.AddCounterClass(System.Object)">
            <summary>
              The add counter class.
            </summary>
            <param name = "counterClass">
              The counter class.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Diagnostics.CounterPublisher.AddCounterClass(System.Object,System.String)">
            <summary>
              The add counter class.
            </summary>
            <param name = "counterClass">
              The counter class.
            </param>
            <param name = "nameSpace">
              The name space.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Diagnostics.CounterPublisher.AddStaticCounterClass(System.Type)">
            <summary>
              The add static counter class.
            </summary>
            <param name = "counterClass">
              The counter class.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Diagnostics.CounterPublisher.AddStaticCounterClass(System.Type,System.String)">
            <summary>
              The add static counter class.
            </summary>
            <param name = "counterClass">
              The counter class.
            </param>
            <param name = "nameSpace">
              The name space.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Diagnostics.CounterPublisher.Start">
            <summary>
              The start.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Diagnostics.CounterPublisher.OnCounterSenderDisconnected(System.Object,System.EventArgs)">
            <summary>
              Invoked if the counter sender was disconnected.
            </summary>
            <param name = "sender">The sender.</param>
            <param name = "e">The event args</param>
        </member>
        <member name="M:Photon.SocketServer.Diagnostics.CounterPublisher.OnCounterSenderError(System.Object,System.UnhandledExceptionEventArgs)">
            <summary>
              The on counter sender error.
            </summary>
            <param name = "sender">
              The sender.
            </param>
            <param name = "e">
              The e.
            </param>
        </member>
        <member name="P:Photon.SocketServer.Diagnostics.CounterPublisher.DefaultInstance">
            <summary>
              Gets DefaultInstance.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Diagnostics.CounterPublisher.EndPoint">
            <summary>
              Gets the end point.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Diagnostics.CounterPublisher.Protocol">
            <summary>
              Gets the protocol type.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Diagnostics.OperationsMaxTimeCounter">
            <summary>
              An <see cref="T:ExitGames.Diagnostics.Counter.ICounter"/> for the max operation execution time.
              The only supported method is <see cref="M:Photon.SocketServer.Diagnostics.OperationsMaxTimeCounter.GetNextValue"/>.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Diagnostics.OperationsMaxTimeCounter.Instance">
            <summary>
              The singleton.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Diagnostics.OperationsMaxTimeCounter.#ctor">
            <summary>
              Prevents a default instance of the <see cref="T:Photon.SocketServer.Diagnostics.OperationsMaxTimeCounter"/> class from being created.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Diagnostics.OperationsMaxTimeCounter.Decrement">
            <summary>
              This method is not supported.
            </summary>
            <returns>
              Nothing. Throws a <see cref="T:System.NotSupportedException"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
              This is a read only counter.
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Diagnostics.OperationsMaxTimeCounter.GetNextValue">
            <summary>
              Gets the next value and resets <see cref="F:Photon.SocketServer.Diagnostics.PhotonCounter.OperationsMaxTime"/> to 0.
            </summary>
            <returns>
              The next value.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Diagnostics.OperationsMaxTimeCounter.Increment">
            <summary>
              This method is not supported.
            </summary>
            <returns>
              Nothing. Throws a <see cref="T:System.NotSupportedException"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
              This is a read only counter.
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Diagnostics.OperationsMaxTimeCounter.IncrementBy(System.Int64)">
            <summary>
              This method is not supported.
            </summary>
            <param name="value">
              The value to increment by.
            </param>
            <returns>
              Nothing. Throws a <see cref="T:System.NotSupportedException"/>.
            </returns>
            <exception cref="T:System.NotSupportedException">
              This is a read only counter.
            </exception>
        </member>
        <member name="P:Photon.SocketServer.Diagnostics.OperationsMaxTimeCounter.CounterType">
            <summary>
              Gets the counter type.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Diagnostics.OperationsMaxTimeCounter.Name">
            <summary>
              Gets the counter name.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Diagnostics.PhotonCounter">
            <summary>
              The photon counter.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Diagnostics.PhotonCounter.AverageOperationExecutionTime">
            <summary>
              The average operation execution time.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Diagnostics.PhotonCounter.EventSentCount">
            <summary>
              The event sent count.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Diagnostics.PhotonCounter.EventSentPerSec">
            <summary>
              The event sent per sec.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Diagnostics.PhotonCounter.InitPerSec">
            <summary>
              The init per sec.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Diagnostics.PhotonCounter.OperationReceiveCount">
            <summary>
              The operation receive count.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Diagnostics.PhotonCounter.OperationReceivePerSec">
            <summary>
              The operation receive per sec.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Diagnostics.PhotonCounter.OperationResponseCount">
            <summary>
              The operation response count.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Diagnostics.PhotonCounter.OperationResponsePerSec">
            <summary>
              The operation response per sec.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Diagnostics.PhotonCounter.OperationsFast">
            <summary>
              The operations fast.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Diagnostics.PhotonCounter.OperationsMaxTime">
            <summary>
              The operations max time.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Diagnostics.PhotonCounter.OperationsMiddle">
            <summary>
              The operations middle per second.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Diagnostics.PhotonCounter.OperationsSlow">
            <summary>
              The operations slow per second.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Diagnostics.PhotonCounter.SessionCount">
            <summary>
              The session count.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Diagnostics.PhotonCounter.GetElapsedMilliseconds(System.Int64)">
            <summary>
              Gets the elapseds time in milliseconds since the operation request has been created.
            </summary>
            <param name="timestamp">
              A return value of <see cref="M:Photon.SocketServer.Diagnostics.PhotonCounter.GetTimestamp"/>.
            </param>
            <returns>
              The elapseds time in milliseconds.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Diagnostics.PhotonCounter.GetTimestamp">
            <summary>
              Gets the current number of ticks in the timer mechanism.
            </summary>
            <returns>
              A long integer representing the tick counter value of the underlying timer mechanism.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Diagnostics.PhotonCounter.OnOperationCompleted(System.Int64)">
            <summary>
              This method should be called when a request is completed in order to update the counters.
              <see cref="M:Photon.SocketServer.Rpc.Peer.OnOperationRequest(Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)"/> does this automatically if the <see cref="P:Photon.SocketServer.Rpc.Peer.CurrentOperationHandler"/> returns an <see cref="T:Photon.SocketServer.OperationResponse"/>.
            </summary>
            <param name="startTimestamp">
              The start timestamp is a return value of <see cref="M:Photon.SocketServer.Diagnostics.PhotonCounter.GetTimestamp"/>.
            </param>
        </member>
        <member name="T:Photon.SocketServer.Reliability">
            <summary>
              Determines if an <see cref="T:Photon.SocketServer.OperationRequest"/>, an <see cref="T:Photon.SocketServer.OperationResponse"/> or an <see cref="T:Photon.SocketServer.EventData"/> is transported reliable or unreliable.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Reliability.Reliable">
            <summary>
              Reliable events/operations are guaranteed to arrive unless the client disconnects.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Reliability.Unreliable">
            <summary>
              Unreliable events/operations are not guaranteed to arrive.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Protocols.ReusableMemoryStream">
            <summary>
              The reusable memory stream.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.ReusableMemoryStream.stream">
            <summary>
              The stream.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.ReusableMemoryStream.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Rpc.Protocols.ReusableMemoryStream"/> class.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.ReusableMemoryStream.#ctor(System.Byte[])">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Rpc.Protocols.ReusableMemoryStream"/> class.
            </summary>
            <param name="buffer">
              The buffer.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.ReusableMemoryStream.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Rpc.Protocols.ReusableMemoryStream"/> class.
            </summary>
            <param name="buffer">
              The buffer.
            </param>
            <param name="offset">
              The offset.
            </param>
            <param name="count">
              The count.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.ReusableMemoryStream.Flush">
            <summary>
              The flush.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.ReusableMemoryStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
              The read.
            </summary>
            <param name = "buffer">
              The buffer.
            </param>
            <param name = "offset">
              The offset.
            </param>
            <param name = "count">
              The count.
            </param>
            <returns>
              The read bytes.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.ReusableMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
              The seek.
            </summary>
            <param name = "offset">
              The offset.
            </param>
            <param name = "origin">
              The origin.
            </param>
            <returns>
              The new position within the stream, calculated by combining the initial reference point and the offset
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.ReusableMemoryStream.SetLength(System.Int64)">
            <summary>
              The set length.
            </summary>
            <param name = "value">
              The value.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.ReusableMemoryStream.ToArray">
            <summary>
              The to array.
            </summary>
            <returns>
              the byte array
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.ReusableMemoryStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
              The write.
            </summary>
            <param name = "buffer">
              The buffer.
            </param>
            <param name = "offset">
              The offset.
            </param>
            <param name = "count">
              The count.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.ReusableMemoryStream.Dispose(System.Boolean)">
            <summary>
              The dispose.
            </summary>
            <param name = "disposing">
              The disposing.
            </param>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Protocols.ReusableMemoryStream.CanRead">
            <summary>
              Gets a value indicating whether CanRead.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Protocols.ReusableMemoryStream.CanSeek">
            <summary>
              Gets a value indicating whether CanSeek.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Protocols.ReusableMemoryStream.CanWrite">
            <summary>
              Gets a value indicating whether CanWrite.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Protocols.ReusableMemoryStream.Length">
            <summary>
              Gets Length.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Protocols.ReusableMemoryStream.Position">
            <summary>
              Gets or sets Position.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.EventData">
            <summary>
              This class contains data that is sent to clients with <see cref="M:Photon.SocketServer.PeerBase.SendEvent(Photon.SocketServer.IEventData,Photon.SocketServer.SendParameters)">PhotonPeer.SendEvent</see>.
              The <see cref="T:Photon.SocketServer.IRpcProtocol"/> serializes EventData with <see cref="M:Photon.SocketServer.IRpcProtocol.SerializeEventData(Photon.SocketServer.EventData)">SerializeEventData</see>. 
              <see cref="M:Photon.SocketServer.EventData.SetParameters(System.Object)"/> converts properties that are flagged with <see cref="T:Photon.SocketServer.Rpc.DataMemberAttribute"/> into the <see cref="P:Photon.SocketServer.EventData.Parameters"/> dictionary.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.EventData.#ctor(System.Byte,System.Object)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.EventData"/> class.
            </summary>
            <param name="eventCode">
              The event Code.
            </param>
            <param name="dataContract">
              All properties of <paramref name="dataContract"/> with the <see cref="T:Photon.SocketServer.Rpc.DataMemberAttribute"/> are mapped to the <see cref="P:Photon.SocketServer.EventData.Parameters"/> dictionary.
            </param>
        </member>
        <member name="M:Photon.SocketServer.EventData.#ctor(System.Byte,System.Collections.Generic.Dictionary{System.Byte,System.Object})">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.EventData"/> class.
              This constructor sets the <see cref="P:Photon.SocketServer.EventData.Parameters"/> and the <see cref="P:Photon.SocketServer.EventData.Code"/>.
            </summary>
            <param name="eventCode">
              Determines the <see cref="P:Photon.SocketServer.EventData.Code"/>.
            </param>
            <param name="parameters">
              Determines the <see cref="P:Photon.SocketServer.EventData.Parameters"/>.
            </param>
        </member>
        <member name="M:Photon.SocketServer.EventData.#ctor(System.Byte)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.EventData"/> class.
            </summary>
            <param name="eventCode">
              The event code.
            </param>
        </member>
        <member name="M:Photon.SocketServer.EventData.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.EventData"/> class.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.EventData.SendTo``1(Photon.SocketServer.IEventData,System.Collections.Generic.IEnumerable{``0},Photon.SocketServer.SendParameters)">
            <summary>
              Sends an event to a list of peers.
              This method serializes the data just once per protocol instead of once per peer.
            </summary>
            <param name="eventData">
              The event to send.
            </param>
            <param name="peers">
              The peers to send the event to.
            </param>
            <param name="sendParameters">
              The send Options.
            </param>
            <typeparam name="TPeer">
              A <see cref="T:Photon.SocketServer.PeerBase"/> subclass type.
            </typeparam>
        </member>
        <member name="M:Photon.SocketServer.EventData.SendTo``1(System.Collections.Generic.IEnumerable{``0},Photon.SocketServer.SendParameters)">
            <summary>
              Sends the event to a list of peers.
              This method serializes the data just once per protocol instead of once per peer.
            </summary>
            <param name="peers">
              The peers to send the event to.
            </param>
            <param name="sendParameters">
              The send Options.
            </param>
            <typeparam name="TPeer">
              A <see cref="T:Photon.SocketServer.PeerBase"/> subclass type.
            </typeparam>
        </member>
        <member name="M:Photon.SocketServer.EventData.SetParameters(System.Object)">
            <summary>
              Converts properties of an object to <see cref="P:Photon.SocketServer.EventData.Parameters"/>.
              Included properties require the <see cref="T:Photon.SocketServer.Rpc.DataMemberAttribute"/>.
            </summary>
            <param name="dataContract">
              The properties of this object are mapped to <see cref="P:Photon.SocketServer.EventData.Parameters"/>.
            </param>
        </member>
        <member name="M:Photon.SocketServer.EventData.SetParameters(System.Collections.Generic.Dictionary{System.Byte,System.Object})">
            <summary>
              Replaces the <see cref="P:Photon.SocketServer.EventData.Parameters"/> with <paramref name="parameters"/>.
            </summary>
            <param name="parameters">
              The parameters to set.
            </param>
        </member>
        <member name="M:Photon.SocketServer.EventData.Serialize(Photon.SocketServer.IRpcProtocol)">
            <summary>
              Serializes this instance with the <paramref name = "protocol" />.
            </summary>
            <param name = "protocol">
              The protocol.
            </param>
            <returns>
              A byte array.
            </returns>
        </member>
        <member name="P:Photon.SocketServer.EventData.Code">
            <summary>
              Gets or sets the event code.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.EventData.Parameters">
            <summary>
              Gets or sets the event parameters that will be sent to the client.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.EventData.Item(System.Byte)">
            <summary>
            Gets or sets the paramter associated with the specified key.
            </summary>
            <param name="parameterKey">The key of the parameter to get or set.</param>
            <returns>
            The parameter associated with the specified key. 
            If the specified key is not found, a get operation throws a KeyNotFoundException, 
            and a set operation creates a new paramter with the specified key.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <see cref="P:Photon.SocketServer.EventData.Parameters"/> property has not been initialized.
            </exception>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Reader">
            <summary>
              Provides methods to read Action Message Format (AMF 3) binary data.
            </summary>
            <remarks>
              Object references are references to an already inlined object. Object references start at 0 
              and are in the order that the objects are defined. Object references include dates, arrays, 
              and objects.
            </remarks>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Reader.amfBaseDate">
            <summary>
              amf base date.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Reader.log">
            <summary>
              The log.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Reader.binaryReader">
            <summary>
              The binary reader.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Reader.classDefReferences">
            <summary>
              class def references.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Reader.objectReferences">
            <summary>
              object references.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Reader.stringReferences">
            <summary>
              string references.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Reader.#ctor(ExitGames.IO.IBinaryReader)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Reader"/> class.
            </summary>
            <param name="binaryReader">
              <see cref="T:ExitGames.IO.IBinaryReader"/> used to write data to the underling stream.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Reader.Read(System.Object@)">
            <summary>
              Reads the next object from the underling stream.
            </summary>
            <param name = "result">
              The result.
            </param>
            <returns>
              The object that has been read.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Reader.Read(Photon.SocketServer.Rpc.Protocols.Amf3.Amf3TypeMarker,System.Object@)">
            <summary>
              Reads an object from the underling stream.
            </summary>
            <param name="amfTypeMarker">
              An <see cref="T:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3TypeMarker"/> which indicates which type of object to read.
            </param>
            <param name="result">
              The result.
            </param>
            <returns>
              The object that has been read.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Reader.ReadArray(System.Object@)">
            <summary>
              Reads an array from the underling stream.
            </summary>
            <remarks>
              For associative arrays, data is in name/value pairs, similar to how objects are encoded (type 2). 
              If the integer-data was zero, then the name/value pairs are terminated by a single-null 
              string (that is simply a 1). If the integer-data was 1, then the name/value pairs are terminated 
              by a single-null value string as well, but the null-value string will also have a final value. 
              This second case occurs when the associative array has defined a key that is either 0 or \’\’ (empty string). 
              If both 0 and \’\’ are set in the array then the first name/value pair sent will have a null 
              string for the key and the final name/value pair sent will also have a null string for a key. 
              (I’m not sure if there is any other way to get a null string key.) The zero value seems to be always 
              the one sent first in case of the two null strings.
            </remarks>
            <param name = "result">
              The result.
            </param>
            <returns>
              The read array.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Reader.ReadByteArray">
            <summary>
              Reads a byte array from a binary reader.
            </summary>
            <remarks>
              ActionScript 3.0 introduces a new type to hold an Array of bytes, namely ByteArray. 
              AMF 3 serializes this type using a variable length encoding 29-bit integer for the 
              byte-length prefix followed by the raw bytes of the ByteArray.
              ByteArray instances can be sent as a reference to a previously occurring ByteArray 
              instance by using an index to the implicit object reference table.
            </remarks>
            <returns>
              A byte array containing data read from the underlying stream.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Reader.ReadDateTime(System.Object@)">
            <summary>
              read date time.
            </summary>
            <param name="result">
              The result <see cref="T:System.DateTime"/> .
            </param>
            <returns>
              true if read was successfull. 
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Reader.ReadDynamicObjectProperties(System.Object@)">
            <summary>
              Reads dynamic object properies.
            </summary>
            <param name = "result">
              The result.
            </param>
            <returns>
              True on success.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Reader.ReadInlineArray(System.Int32,System.Object@)">
            <summary>
              Reads an inline array from the underling stream
            </summary>
            <param name = "flags">
              the flags
            </param>
            <param name = "result">
              The result.
            </param>
            <returns>
              A array object read from the current stream. 
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Reader.ReadInlineDynamicObject(System.Object@)">
            <summary>
              read inline dynamic object.
            </summary>
            <remarks>
              If there is a class-def reference there are no property names 
              and the number of values is equal to the number of properties 
              in the class-def.
            </remarks>
            <param name = "result">
              The result.
            </param>
            <returns>
              The read inline dynamic object.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Reader.ReadInlineNonDynamicObject(System.Int32,System.Object@)">
            <summary>
              read inline non dynamic object.
            </summary>
            <param name = "flags">
              The flags.
            </param>
            <param name = "result">
              The result.
            </param>
            <returns>
              the non dynamic object
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Reader.ReadInteger">
            <summary>
              Reads the next 1-4 bytes (variable bit length) from the binary stream 
              and converts the result to an unsigned integer.
            </summary>
            <remarks>
              AMF 3 represents smaller integers with fewer bytes using the most
              significant bit of each byte. The worst case uses 32-bits to represent 
              a 29-bit number, which is what we would have done with no compression.
              To save space it is an integer that can be 1-4 bytes long. The first bit 
              of the first three bytes determine if the next byte is included (1) in 
              this integer-data or not (0). The last byte, if present, is read completely (8 bits). 
              The first bits are then removed from the first three bytes and the remaining bits concatenated 
              to form a big-endian integer. 
              The integer is negative if it is the full 29 bits long and the first bit is set (1). 
              This uses Two's complement notation and is therefore identical to normal signed integer behaviour.
              - 0x00000000 - 0x0000007F : 0xxxxxxx
              - 0x00000080 - 0x00003FFF : 1xxxxxxx 0xxxxxxx
              - 0x00004000 - 0x001FFFFF : 1xxxxxxx 1xxxxxxx 0xxxxxxx
              - 0x00200000 - 0x3FFFFFFF : 1xxxxxxx 1xxxxxxx 1xxxxxxx xxxxxxxx
              - 0x40000000 - 0xFFFFFFFF : throw range exception
            </remarks>
            <returns>
              The read integer.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Reader.ReadObject(System.Object@)">
            <summary>
              Reads an object from the underling stream.
            </summary>
            <param name = "result">
              The result.
            </param>
            <returns>
              The read object.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Reader.ReadObjectProperties(Photon.SocketServer.Rpc.Protocols.Amf3.Amf3ClassDefinition,System.Object@)">
            <summary>
              read object properties.
            </summary>
            <param name = "classDefinition">
              The class definition.
            </param>
            <param name = "result">
              The result.
            </param>
            <returns>
              the object properties
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Reader.ReadString(System.String@)">
            <summary>
              Read and deserialize a string
              Strings can be sent as a reference to a previously
              occurring String by using an index to the implicit string reference table.
              Strings are encoding using UTF-8 - however the header may either
              describe a string literal or a string reference.
              - string = 0x06 string-data
              - string-data = integer-data [ modified-utf-8 ]
              - modified-utf-8 = *OCTET
            </summary>
            <param name = "result">
              The result.
            </param>
            <returns>
              true on success.
            </returns>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3ClassDefinition">
            <summary>
              amf 3 class definition.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3ClassDefinition.ClassName">
            <summary>
              Gets or sets ClassName.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3ClassDefinition.IsDynamic">
            <summary>
              Gets or sets a value indicating whether this class type is dynamic.
            </summary>
            <value>
              <c>true</c> if this instance is dynamic; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3ClassDefinition.PropertyNames">
            <summary>
              Gets or sets PropertyNames.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3TypeMarker">
            <summary>
              A type marker is one byte in length and describes the type 
              of encoded data that follows. There are 13 types in AMF 3.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3TypeMarker.Undefined">
            <summary>
              Undefined value.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3TypeMarker.Null">
            <summary>
              Null value.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3TypeMarker.False">
            <summary>
              False value.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3TypeMarker.True">
            <summary>
              True value.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3TypeMarker.Integer">
            <summary>
              Integer value.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3TypeMarker.Double">
            <summary>
              Double value.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3TypeMarker.String">
            <summary>
              String value.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3TypeMarker.XmlDoc">
            <summary>
              Xml doc value.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3TypeMarker.Date">
            <summary>
              Date value.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3TypeMarker.Array">
            <summary>
              Array value.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3TypeMarker.Object">
            <summary>
              Object value.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3TypeMarker.Xml">
            <summary>
              Xml value.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3TypeMarker.ByteArray">
            <summary>
              Byte array.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Writer">
            <summary>
              Provides methods to write Action Message Format (AMF 3) binary data.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Writer.amfBaseDate">
            <summary>
              Value used for Datetime conversion.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Writer.binaryWriter">
            <summary>
              Used to write native types to the underling stream.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Writer.#ctor(System.IO.Stream)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Writer"/> class 
              based on the supplied stream.
            </summary>
            <param name="stream">
              The ouput stream.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Writer.#ctor(ExitGames.IO.IBinaryWriter)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Writer"/> class
              based on the supplied <see cref="T:ExitGames.IO.IBinaryWriter"/>.
            </summary>
            <param name="binaryWriter">
              The binary writer
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Writer.Write(System.Object)">
            <summary>
              Serializes an object.
            </summary>
            <param name="value">
              The value.
            </param>
            <exception cref="T:System.IO.InvalidDataException">
              The type of the <paramref name="value"/> can not be serialized.
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Writer.WriteArray(System.Collections.IList)">
            <summary>
              write array.
            </summary>
            <param name = "value">
              The value.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Writer.WriteBoolean(System.Boolean)">
            <summary>
              Writes a boolean value to the underling stream.
            </summary>
            <param name = "value">
              the value
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Writer.WriteByteArray(System.Byte[])">
            <summary>
              Writes a byte array to the underlying stream.
            </summary>
            <param name = "value">
              A byte array containing the data to write.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Writer.WriteDate(System.DateTime)">
            <summary>
              write date.
            </summary>
            <param name = "value">
              The value.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Writer.WriteDictionary(System.Collections.IDictionary)">
            <summary>
              write name value collection.
            </summary>
            <param name = "value">
              The value.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Writer.WriteGuid(System.Guid)">
            <summary>
              Writes a guid value as an byte array to the underling stream.
            </summary>
            <param name = "value">
              The guid value to write.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Writer.WriteInteger(System.Int64)">
            <summary>
              write integer.
            </summary>
            <param name = "value">
              The value.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Writer.WriteNameValueCollection(System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
              write name value collection.
            </summary>
            <param name = "value">
              The value.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Writer.WriteNull">
            <summary>
              write null.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Writer.WriteNumber(System.Double)">
            <summary>
              write number.
            </summary>
            <param name = "value">
              The value.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Writer.WriteString(System.String,System.Boolean)">
            <summary>
              Writes a string to the underling stream.
            </summary>
            <param name = "value">
              the value
            </param>
            <param name = "writeTypeMarker">
              indicates wheter to write the type marker
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Writer.WriteArrayHeader(System.Boolean,System.Int32)">
            <summary>
              write array header.
            </summary>
            <param name = "isInline">
              The is inline.
            </param>
            <param name = "integerIndexedElementCount">
              The integer indexed element count.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.Amf3.Amf3Writer.WriteIntegerValue(System.Int32)">
            <summary>
              write integer value.
            </summary>
            <param name = "value">
              The value.
            </param>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteReader">
            <summary>
              gp reader.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteReader.log">
            <summary>
              The log.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteReader.Read(ExitGames.IO.IBinaryReader,System.Object@)">
            <summary>
              Reads an object from a binary reader.
            </summary>
            <param name = "binaryReader">
              The binary Reader.
            </param>
            <param name = "result">
              The result.
            </param>
            <returns>
              The next object read from the binary reader.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteReader.ReadArray(ExitGames.IO.IBinaryReader,System.Object@)">
            <summary>
              Reads an array from a specified <see cref="T:ExitGames.IO.IBinaryReader"/>
            </summary>
            <param name="binaryReader">The <see cref="T:ExitGames.IO.IBinaryReader"/> to read from.</param>
            <param name="result">
              When this method returns true, contains the array that was read from the <see cref="T:ExitGames.IO.IBinaryReader"/>.
            </param>
            <returns>True if the value was successfully read; otherwise false.</returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteReader.ReadBool(ExitGames.IO.IBinaryReader,System.Object@)">
            <summary>
              Reads a boolean value from a specified <see cref="T:ExitGames.IO.IBinaryReader"/>
            </summary>
            <param name="binaryReader">The <see cref="T:ExitGames.IO.IBinaryReader"/> to read from.</param>
            <param name="result">
              When this method returns true, contains the value that was read from the <see cref="T:ExitGames.IO.IBinaryReader"/>.
            </param>
            <returns>True if the value was successfully read; otherwise false.</returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteReader.ReadByte(ExitGames.IO.IBinaryReader,System.Object@)">
            <summary>
              Reads a byte value from a specified <see cref="T:ExitGames.IO.IBinaryReader"/>
            </summary>
            <param name="binaryReader">The <see cref="T:ExitGames.IO.IBinaryReader"/> to read from.</param>
            <param name="result">
              When this method returns true, contains the value that was read from the <see cref="T:ExitGames.IO.IBinaryReader"/>.
            </param>
            <returns>True if the value was successfully read; otherwise false.</returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteReader.ReadByteArray(ExitGames.IO.IBinaryReader,System.Object@)">
            <summary>
              Reads a byte array from a specified <see cref="T:ExitGames.IO.IBinaryReader"/>
            </summary>
            <param name="reader">
              The <see cref="T:ExitGames.IO.IBinaryReader"/> to read from.
            </param>
            <param name="byteArray">
              When this method returns true, contains the byte array that was read from the <see cref="T:ExitGames.IO.IBinaryReader"/>.
            </param>
            <returns>True if the byte array was successfully read; otherwise false.</returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteReader.ReadCustomType(ExitGames.IO.IBinaryReader,System.Object@)">
            <summary>
              Tries to read a custom type.
            </summary>
            <param name = "reader">The reader.</param>
            <param name = "result">The result.</param>
            <returns>True if the custom type could be readed successfully; otherwise false.</returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteReader.ReadDouble(ExitGames.IO.IBinaryReader,System.Object@)">
            <summary>
              Reads an <see cref="T:System.Double"/> value from a specified <see cref="T:ExitGames.IO.IBinaryReader"/>
            </summary>
            <param name="binaryReader">The <see cref="T:ExitGames.IO.IBinaryReader"/> to read from.</param>
            <param name="result">
              When this method returns true, contains the value that was read from the <see cref="T:ExitGames.IO.IBinaryReader"/>.
            </param>
            <returns>True if the value was successfully read; otherwise false.</returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteReader.ReadGuid(ExitGames.IO.IBinaryReader)">
            <summary>
              read guid.
            </summary>
            <param name = "reader">
              The reader.
            </param>
            <returns>
              a guid
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteReader.ReadHashTable(ExitGames.IO.IBinaryReader,System.Object@)">
            <summary>
              Reads an <see cref="T:System.Collections.Hashtable"/> value from a specified <see cref="T:ExitGames.IO.IBinaryReader"/>
            </summary>
            <param name="reader">
              The <see cref="T:ExitGames.IO.IBinaryReader"/> to read from.
            </param>
            <param name="result">
              When this method returns true, contains the value that was read from the <see cref="T:ExitGames.IO.IBinaryReader"/>.
            </param>
            <returns>True if the value was successfully read; otherwise false.</returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteReader.ReadInt16(ExitGames.IO.IBinaryReader,System.Object@)">
            <summary>
              Reads an Int16 value from a specified <see cref="T:ExitGames.IO.IBinaryReader"/>
            </summary>
            <param name="binaryReader">The <see cref="T:ExitGames.IO.IBinaryReader"/> to read from.</param>
            <param name="result">
              When this method returns true, contains the value that was read from the <see cref="T:ExitGames.IO.IBinaryReader"/>.
            </param>
            <returns>True if the value was successfully read; otherwise false.</returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteReader.ReadInt32(ExitGames.IO.IBinaryReader,System.Object@)">
            <summary>
              Reads an Int32 value from a specified <see cref="T:ExitGames.IO.IBinaryReader"/>
            </summary>
            <param name="binaryReader">The <see cref="T:ExitGames.IO.IBinaryReader"/> to read from.</param>
            <param name="result">
              When this method returns true, contains the value that was read from the <see cref="T:ExitGames.IO.IBinaryReader"/>.
            </param>
            <returns>True if the value was successfully read; otherwise false.</returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteReader.ReadInt64(ExitGames.IO.IBinaryReader,System.Object@)">
            <summary>
              Reads an <see cref="T:System.Int64"/> value from a specified <see cref="T:ExitGames.IO.IBinaryReader"/>
            </summary>
            <param name="binaryReader">The <see cref="T:ExitGames.IO.IBinaryReader"/> to read from.</param>
            <param name="result">
              When this method returns true, contains the value that was read from the <see cref="T:ExitGames.IO.IBinaryReader"/>.
            </param>
            <returns>True if the value was successfully read; otherwise false.</returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteReader.ReadIntArray(ExitGames.IO.IBinaryReader,System.Object@)">
            <summary>
              reads an int array.
            </summary>
            <param name = "reader">
              The reader.
            </param>
            <param name = "intArray">
              the result int array
            </param>
            <returns>
              true on success, otherwise false
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteReader.ReadSingle(ExitGames.IO.IBinaryReader,System.Object@)">
            <summary>
              Reads an <see cref="T:System.Single"/> value from a specified <see cref="T:ExitGames.IO.IBinaryReader"/>
            </summary>
            <param name="binaryReader">The <see cref="T:ExitGames.IO.IBinaryReader"/> to read from.</param>
            <param name="result">
              When this method returns true, contains the value that was read from the <see cref="T:ExitGames.IO.IBinaryReader"/>.
            </param>
            <returns>True if the value was successfully read; otherwise false.</returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteReader.ReadString(ExitGames.IO.IBinaryReader,System.Object@)">
            <summary>
              Reads an <see cref="T:System.String"/> from a specified <see cref="T:ExitGames.IO.IBinaryReader"/>
            </summary>
            <param name="reader">
              The <see cref="T:ExitGames.IO.IBinaryReader"/> to read from.
            </param>
            <param name="result">
              When this method returns true, contains the string that was read from the <see cref="T:ExitGames.IO.IBinaryReader"/>.
            </param>
            <returns>True if the value was successfully read; otherwise false.</returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteReader.ReadString(ExitGames.IO.IBinaryReader,System.String@)">
            <summary>
              Reads an <see cref="T:System.String"/> from a specified <see cref="T:ExitGames.IO.IBinaryReader"/>
            </summary>
            <param name="reader">
              The <see cref="T:ExitGames.IO.IBinaryReader"/> to read from.
            </param>
            <param name="result">
              When this method returns true, contains the string that was read from the <see cref="T:ExitGames.IO.IBinaryReader"/>.
            </param>
            <returns>True if the value was successfully read; otherwise false.</returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteReader.ReadStringArray(ExitGames.IO.IBinaryReader,System.Object@)">
            <summary>
              Reads an array of <see cref="T:System.String"/> objects from a specified <see cref="T:ExitGames.IO.IBinaryReader"/>
            </summary>
            <param name="reader">
              The <see cref="T:ExitGames.IO.IBinaryReader"/> to read from.
            </param>
            <param name="result">
              When this method returns true, contains the array of strings that was read from the <see cref="T:ExitGames.IO.IBinaryReader"/>.
            </param>
            <returns>True if the value was successfully read; otherwise false.</returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteReader.ReadVector(ExitGames.IO.IBinaryReader,System.Object@)">
            <summary>
              Reads an <see cref="T:System.Collections.ArrayList"/> objects from a specified <see cref="T:ExitGames.IO.IBinaryReader"/>
            </summary>
            <param name="reader">
              The <see cref="T:ExitGames.IO.IBinaryReader"/> to read from.
            </param>
            <param name="result">
              When this method returns true, contains the <see cref="T:System.Collections.ArrayList"/> that was read from the <see cref="T:ExitGames.IO.IBinaryReader"/>.
            </param>
            <returns>True if the value was successfully read; otherwise false.</returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteReader.Read(ExitGames.IO.IBinaryReader,Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpType,System.Object@)">
            <summary>
              The read.
            </summary>
            <param name = "binaryReader">
              The binary reader.
            </param>
            <param name = "protocolType">
              The protocol type.
            </param>
            <param name = "result">
              The result.
            </param>
            <returns>
              error 1 or ok
            </returns>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteTypeConverter">
            <summary>
              The gp binary byte type converter.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteTypeConverter.GetClrArrayType(Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpType)">
            <summary>
              The get clr array type.
            </summary>
            <param name = "gpType">
              The gp type.
            </param>
            <returns>
              the gpType
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteTypeConverter.GetClrArrayType(Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpType,System.Int32@)">
            <summary>
              Gets the type for an array.
            </summary>
            <param name = "gpType">
              The gp type.
            </param>
            <param name = "size">
              The size per item.
            </param>
            <returns>
              The type for the array.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteTypeConverter.GetGpType(System.TypeCode)">
            <summary>
              The get gp type.
            </summary>
            <param name = "typeCode">
              The type code.
            </param>
            <returns>
              the gpType
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteTypeConverter.GetGpType(System.Type)">
            <summary>
              The get gp type.
            </summary>
            <param name = "type">
              The type.
            </param>
            <returns>
              the gpType
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteTypeConverter.GetGpTypeSize(Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpType)">
            <summary>
              Gets the minimum size for a type.
            </summary>
            <param name = "gpType">
              The gp type.
            </param>
            <returns>
              The minimum size.
            </returns>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteWriter">
            <summary>
              gp writer.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteWriter.Write(ExitGames.IO.IBinaryWriter,System.Object)">
            <summary>
              Serializes an object.
            </summary>
            <param name="writer">
              The writer.
            </param>
            <param name="value">
              The value.
            </param>
            <exception cref="T:System.IO.InvalidDataException">
              The type of the <paramref name="value"/> can not be serialized.
            </exception>
            <exception cref="T:System.ArrayTypeMismatchException">
              A collection with different types can not be serialized.
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteWriter.WriteEventData(ExitGames.IO.IBinaryWriter,Photon.SocketServer.IEventData)">
            <summary>
              Writes an event data object.
            </summary>
            <param name = "binaryWriter">
              The binary writer.
            </param>
            <param name = "eventData">
              The event data.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteWriter.WriteOperationRequest(ExitGames.IO.IBinaryWriter,Photon.SocketServer.OperationRequest)">
            <summary>
              Writes an operation request.
            </summary>
            <param name = "writer">
              The writer.
            </param>
            <param name = "operationRequest">
              The operation request.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteWriter.WriteOperationResponse(ExitGames.IO.IBinaryWriter,Photon.SocketServer.OperationResponse)">
            <summary>
              Writes an <see cref="T:Photon.SocketServer.OperationResponse"/>.
            </summary>
            <param name="writer">
              The writer.
            </param>
            <param name="operationResponse">
              The operation response.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteWriter.WriteString(ExitGames.IO.IBinaryWriter,System.String,System.Boolean)">
            <summary>
              Writes a string.
            </summary>
            <param name = "writer">
              The writer.
            </param>
            <param name = "value">
              The value.
            </param>
            <param name = "setType">
              If true the type is written.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteWriter.Write(ExitGames.IO.IBinaryWriter,System.Object,System.Boolean)">
            <summary>
              Serializes an object.
            </summary>
            <param name="writer">
              The writer.
            </param>
            <param name="value">
              The object to write.
            </param>
            <param name="setType">
              The set type.
            </param>
            <exception cref="T:System.IO.InvalidDataException">
              The type of the <paramref name="value"/> can not be serialized.
            </exception>
            <exception cref="T:System.ArrayTypeMismatchException">
              A collection with different types can not be serialized.
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteWriter.WriteArray(ExitGames.IO.IBinaryWriter,System.Collections.IList)">
            <summary>
              Writes an array.
            </summary>
            <param name = "writer">
              The writer.
            </param>
            <param name = "serObject">
              The ser object.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteWriter.WriteByteArray(ExitGames.IO.IBinaryWriter,System.Byte[])">
            <summary>
              The write byte array.
            </summary>
            <param name = "writer">
              The writer.
            </param>
            <param name = "serObject">
              The ser object.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteWriter.WriteHashTable(ExitGames.IO.IBinaryWriter,System.Collections.Hashtable)">
            <summary>
              write hash table.
            </summary>
            <param name = "writer">
              The writer.
            </param>
            <param name = "serObject">
              The ser object.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteWriter.WriteVector(ExitGames.IO.IBinaryWriter,System.Collections.ICollection)">
            <summary>
              Writes a collection.
            </summary>
            <param name="writer">
              The writer.
            </param>
            <param name="serObject">
              The collection object.
            </param>
            <exception cref="T:System.ArrayTypeMismatchException">
              The vector supports just one type.
            </exception>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpType">
            <summary>
              The gp type.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpType.Unknown">
            <summary>
              Unkown type.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpType.Array">
            <summary>
              An array of objects.
            </summary>
            <remarks>
              This type is new in version 1.5.
            </remarks>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpType.Boolean">
            <summary>
              A boolean Value.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpType.Byte">
            <summary>
              A byte value.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpType.ByteArray">
            <summary>
              An array of bytes.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpType.ObjectArray">
            <summary>
              An array of objects.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpType.Short">
            <summary>
              A 16-bit integer value.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpType.Float">
            <summary>
              A 32-bit floating-point value.
            </summary>
            <remarks>
              This type is new in version 1.5.
            </remarks>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpType.Dictionary">
            <summary>
              A dictionary
            </summary>
            <remarks>
              This type is new in version 1.6.
            </remarks>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpType.Double">
            <summary>
              A 64-bit floating-point value.
            </summary>
            <remarks>
              This type is new in version 1.5.
            </remarks>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpType.Hashtable">
            <summary>
              A Hashtable.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpType.Integer">
            <summary>
              A 32-bit integer value.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpType.IntegerArray">
            <summary>
              An array of 32-bit integer values.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpType.Long">
            <summary>
              A 64-bit integer value.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpType.String">
            <summary>
              A string value.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpType.StringArray">
            <summary>
              An array of string values.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpType.Vector">
            <summary>
              A vector.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpType.Custom">
            <summary>
              A costum type
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpType.Null">
            <summary>
              Null value don't have types.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Protocol">
            <summary>
              This class provides access to the available protocols.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Protocol.log">
            <summary>
              The log.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Protocol.protocols15">
            <summary>
              All existing v1.5 protocols
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Protocol.protocols16">
            <summary>
              All existing v1.6 protocols
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Protocol.TryRegisterCustomType(System.Type,System.Byte,System.Func{System.Object,System.Byte[]},System.Func{System.Byte[],System.Object})">
            <summary>
              Tries to register a custom type for serialisation.
            </summary>
            <param name = "customType">Type of the custom type.</param>
            <param name = "typeCode">The type code.</param>
            <param name = "serializeFunction">The serialize function.</param>
            <param name = "deserializeFunction">The deserialize function.</param>
            <returns>
              True if the custom type was successfully registered; otherwise false.
              False will be returned if either the type or the type code allready is registered.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Protocol.CheckProtocolType(System.Byte)">
            <summary>
              Gets the protocol type for a specified magic number.
            </summary>
            <param name="magicNumber">
              The magic number
            </param>
            <returns>
              The <see cref="T:Photon.SocketServer.Rpc.Protocols.ProtocolType"/> for the specified magic number.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Protocol.SerializeInitRequest(Photon.SocketServer.Rpc.Protocols.IRtsMessageHeaderConverter,System.Version,System.Version,System.String)">
            <summary>
              The serialize init request.
            </summary>
            <param name = "headerWriter">
              The header Writer.
            </param>
            <param name = "protocolVersion">
              The protocol version
            </param>
            <param name = "clientVersion">
              The client version.
            </param>
            <param name = "applicationId">
              The application id.
            </param>
            <returns>
              the serialized init request
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Protocol.SerializeInitResponse(Photon.SocketServer.Rpc.Protocols.IRtsMessageHeaderConverter)">
            <summary>
              The serialize init response.
            </summary>
            <param name = "headerWriter">
              The header writer.
            </param>
            <returns>
              the init response
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Protocol.TryParseInitRequest(System.Byte[],Photon.SocketServer.InitRequest@)">
            <summary>
              The try parse init request.
            </summary>
            <param name = "data">
              The data.
            </param>
            <param name = "initRequest">
              The init request.
            </param>
            <returns>
              True if init request had correct format.
            </returns>
        </member>
        <member name="P:Photon.SocketServer.Protocol.AllowRawCustomValues">
            <summary>
              Gets or sets a value indicating whether unknown customes types are allowed.
              if set to true unknown custom types will be serialized as an <see cref="T:Photon.SocketServer.Rpc.ValueTypes.RawCustomValue"/> instance.
            </summary>
            <value>
              <c>true</c> if unknown custom types are allowed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Photon.SocketServer.Protocol.Amf3V161">
            <summary>
              Gets the Amf3 protocol version 1.6 with header version 1.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Protocol.Amf3V162">
            <summary>
              Gets the Amf3 protocol version 1.6 with header version 2.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Protocol.GpBinaryV151">
            <summary>
              Gets the GpBinary protocol version 1.5 with header version 1
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Protocol.GpBinaryV152">
            <summary>
              Gets the GpBinary protocol version 1.5 with header version 2
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Protocol.GpBinaryV161">
            <summary>
              Gets the GpBinary protocol version 1.6 with header version 1
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Protocol.GpBinaryV162">
            <summary>
              Gets the GpBinary protocol version 1.6 with header version 2
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Protocols.RtsInitMessage">
            <summary>
              Represents a realtime server intitialization message.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.RtsInitMessage.SizeInBytes">
            <summary>
              Returns the size of the <see cref="T:Photon.SocketServer.Rpc.Protocols.RtsMessageHeader"/> in bytes.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.RtsInitMessage.applicationId">
            <summary>
              The application id.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.RtsInitMessage.clientVersion">
            <summary>
              The client version.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.RtsInitMessage.protocolVersion">
            <summary>
              Gets the protocol version.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.RtsInitMessage.#ctor(System.Byte[],System.Byte[],System.String)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Rpc.Protocols.RtsInitMessage"/> class.
            </summary>
            <param name="protocolVersion">
              The protocol version.
            </param>
            <param name="clientVersion">
              The client version.
            </param>
            <param name="applicationId">
              The application Id.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.RtsInitMessage.TryParse(System.Byte[],System.Int32,Photon.SocketServer.Rpc.Protocols.RtsInitMessage@)">
            <summary>
              Tries to parse a <see cref="T:Photon.SocketServer.Rpc.Protocols.RtsInitMessage"/> from a byte array.
            </summary>
            <param name="buffer">
              The buffer.
            </param>
            <param name="startIndex">
              The start index.
            </param>
            <param name="initMessage">
              The init message.
            </param>
            <returns>
              true if successfull.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.RtsInitMessage.Serialize(System.IO.Stream)">
            <summary>
              The serialize.
            </summary>
            <param name = "stream">
              The stream.
            </param>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Protocols.RtsInitMessage.ApplicationId">
            <summary>
              Gets ApplicationId.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Protocols.RtsInitMessage.ClientVersion">
            <summary>
              Gets ClientVersion.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Protocols.RtsInitMessage.ProtocolVersion">
            <summary>
              Gets ProtocolVersion.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Protocols.RtsInitResponseMessage">
            <summary>
              The rts init response message.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.RtsInitResponseMessage.SizeInBytes">
            <summary>
              The size in bytes.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.RtsInitResponseMessage.Serialize(System.IO.Stream)">
            <summary>
              The serialize.
            </summary>
            <param name = "stream">
              The stream.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.RtsInitResponseMessage.TryParse(System.Byte[],System.Int32)">
            <summary>
              The try parse.
            </summary>
            <param name = "data">
              The data.
            </param>
            <param name = "index">
              The index.
            </param>
            <returns>
              true if successful.
            </returns>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Protocols.RtsMessageType">
            <summary>
              Defines the RealTimeServer message types used for serialization.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.RtsMessageType.Init">
            <summary>
              The Init mesasge.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.RtsMessageType.InitResponse">
            <summary>
              The Init response message.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.RtsMessageType.Operation">
            <summary>
              The Operation request message.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.RtsMessageType.OperationResponse">
            <summary>
              The Operation response message.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.RtsMessageType.Event">
            <summary>
              The Event message.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.RtsMessageType.InternalOperationRequest">
            <summary>
              Message type for internal operation requests.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.RtsMessageType.InternalOperationResponse">
            <summary>
              Message type for internal operation responses.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Reflection.DynamicMethodCreator">
            <summary>
              Provides methods to create delegates for fast dynamic access
              to properties and fields of a specified target class.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Reflection.DynamicMethodCreator.CreateGetter(System.Reflection.MemberInfo)">
            <summary>
              Creates a <see cref="T:System.Func`2">getter</see> for a specified <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberInfo">
              The <see cref="T:System.Reflection.MemberInfo"/> to obtain the <see cref="T:System.Func`2">getter</see> for.
              Must be of type <see cref="T:System.Reflection.FieldInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/>.
            </param>
            <returns>
              A <see cref="T:System.Func`2">getter</see> instance or null if the specified <see cref="T:System.Reflection.MemberInfo"/> does not contain a get method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              memberInfo is a null reference (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentException">
              memberInfo is not of type <see cref="T:System.Reflection.FieldInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/>.
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Reflection.DynamicMethodCreator.CreateGetter(System.Reflection.PropertyInfo)">
            <summary>
              Creates a <see cref="T:System.Func`2">getter</see> for a specified property.
            </summary>
            <param name="propertyInfo">
              The <see cref="T:System.Reflection.PropertyInfo"/> of the property for which to create a <see cref="T:System.Func`2">getter</see>.
            </param>
            <returns>
              A <see cref="T:System.Func`2">getter</see> instance or null if the specified property does 
              not contain a get method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              propertyInfo is a null reference (Nothing in Visual Basic). 
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Reflection.DynamicMethodCreator.CreateGetter(System.Reflection.FieldInfo)">
            <summary>
              Creates a <see cref="T:System.Func`2">getter</see> for a specified field.
            </summary>
            <param name="fieldInfo">
              The <see cref="T:System.Reflection.FieldInfo"/> of the field for which to create a <see cref="T:System.Func`2">getter</see>.
            </param>
            <returns>
              An <see cref="T:System.Func`2">getter</see> instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              fieldInfo is a null reference (Nothing in Visual Basic). 
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Reflection.DynamicMethodCreator.CreateInstantiateObjectHandler(System.Type)">
            <summary>
              Creates a <see cref="T:System.Func`1">instantiator</see> for a specified type.
            </summary>
            <param name="type">
              The type for which to create the delegate.
            </param>
            <returns>
              An <see cref="T:System.Func`1">instantiator</see> delegate for acessing the types contructor method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              type paramter is a null reference (Nothing in Visual Basic). 
            </exception>
            <exception cref="T:System.ArgumentException">
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Reflection.DynamicMethodCreator.CreateSetter(System.Reflection.MemberInfo)">
            <summary>
              Creates a <see cref="T:System.Action`2">setter</see> for a specified <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberInfo">
              The <see cref="T:System.Reflection.MemberInfo"/> to obtain the <see cref="T:System.Action`2">setter</see> for.
              Must be of type <see cref="T:System.Reflection.FieldInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/>.
            </param>
            <returns>
              A <see cref="T:System.Action`2">setter</see> instance or null if the specified <see cref="T:System.Reflection.MemberInfo"/> 
              does not contain a set method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              memberInfo is a null reference (Nothing in Visual Basic).
            </exception>
            <exception cref="T:System.ArgumentException">
              memberInfo is not of type <see cref="T:System.Reflection.FieldInfo"/> or <see cref="T:System.Reflection.PropertyInfo"/>.
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Reflection.DynamicMethodCreator.CreateSetter(System.Reflection.PropertyInfo)">
            <summary>
              Creates a <see cref="T:System.Action`2">setter</see> for a specified field.
            </summary>
            <param name="propertyInfo">
              The <see cref="T:System.Reflection.PropertyInfo"/> of the property for which to create a <see cref="T:System.Action`2">setter</see>.
            </param>
            <returns>
              An <see cref="T:System.Action`2">setter</see> instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              propertyInfo is a null reference (Nothing in Visual Basic). 
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Reflection.DynamicMethodCreator.CreateSetter(System.Reflection.FieldInfo)">
            <summary>
              Creates a <see cref="T:System.Action`2">setter</see> for a specified field.
            </summary>
            <param name="fieldInfo">
              The <see cref="T:System.Reflection.FieldInfo"/> of the field for which to create a <see cref="T:System.Action`2">setter</see>.
            </param>
            <returns>
              An <see cref="T:System.Action`2">setter</see> instance.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              fieldInfo is a null reference (Nothing in Visual Basic). 
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Reflection.DynamicMethodCreator.BoxIfNeeded(System.Type,System.Reflection.Emit.ILGenerator)">
            <summary>
              Helper method to generate "Boxing" code for value types.
            </summary>
            <param name="type">
              The type to genrate the code for.
            </param>
            <param name="generator">
              An <see cref="T:System.Reflection.Emit.ILGenerator"/> instance.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Reflection.DynamicMethodCreator.CreateGetDynamicMethod(System.Type)">
            <summary>
              Creates a dynamic get method for a specified type.
            </summary>
            <param name="type">
              The type.
            </param>
            <returns>
              A <see cref="T:System.Reflection.Emit.DynamicMethod"/> instace.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Reflection.DynamicMethodCreator.CreateSetDynamicMethod(System.Type)">
            <summary>
              Creates a dynamic set method for a specified type.
            </summary>
            <param name="type">
              The type.
            </param>
            <returns>
              A <see cref="T:System.Reflection.Emit.DynamicMethod"/> instace.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Reflection.DynamicMethodCreator.UnboxIfNeeded(System.Type,System.Reflection.Emit.ILGenerator)">
            <summary>
              Helper method to generate "Unboxing" code for value types.
            </summary>
            <param name="type">
              The type to genrate the code for.
            </param>
            <param name="generator">
              An <see cref="T:System.Reflection.Emit.ILGenerator"/> instance.
            </param>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Reflection.OperationMethodInfoCache">
            <summary>
              This cache enables high performance mapping of operation codes to operations.
              It collaborates with the <see cref="T:Photon.SocketServer.Rpc.Reflection.OperationDispatcher"/>. 
              Instances of this class should be reused if possible since the method registration is slower than the mapping.
              Registered methods must have the followig structure:
              <code>
                [Operation(OperationCode = 1)]
                OperationResponse MyMethod(PeerBase peer, OperationRequest request); 
              </code>
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Reflection.OperationMethodInfoCache.OperationDelegateType">
            <summary>
              The delegate type.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Reflection.OperationMethodInfoCache.parameter1">
            <summary>
              The parameter 1.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Reflection.OperationMethodInfoCache.parameter2">
            <summary>
              The parameter 2.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Reflection.OperationMethodInfoCache.parameter3">
            <summary>
              The parameter 3.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Reflection.OperationMethodInfoCache.returnType">
            <summary>
              The return type.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Reflection.OperationMethodInfoCache.searchType">
            <summary>
              The search type.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Reflection.OperationMethodInfoCache.functions">
            <summary>
              The functions.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Reflection.OperationMethodInfoCache.methodInfos">
            <summary>
              The dictionary.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Reflection.OperationMethodInfoCache.operationCodes">
            <summary>
              The operation codes.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Reflection.OperationMethodInfoCache.RegisterOperation(System.Func{Photon.SocketServer.PeerBase,Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters,Photon.SocketServer.OperationResponse})">
            <summary>
              Registers a method to map by operation code.
            </summary>
            <param name="method">
              The method to register.
            </param>
            <returns>
              true if successfully registered.
            </returns>
            <exception cref="T:System.ArgumentException">
              method already registered
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Reflection.OperationMethodInfoCache.RegisterOperation(System.Reflection.MethodInfo)">
            <summary>
              Registers a method tp map by operation code.
              The method must have the following structure:
              <code>
                [Operation(OperationCode = 1)]
                OperationResponse MyMethod(Peer peer, OperationRequest request); 
              </code>
            </summary>
            <param name="method">
              The method to register.
            </param>
            <returns>
              true if successfully registered.
            </returns>
            <exception cref="T:System.ArgumentException">
              method already registered
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Reflection.OperationMethodInfoCache.RegisterOperations(System.Type)">
            <summary>
              Registers all methods of the <paramref name="targetType"/> that are flagged with the <see cref="T:Photon.SocketServer.Rpc.Reflection.OperationAttribute"/>.
              Theses methods must have the following structure:
              <code>
                [Operation(OperationCode = 1)]
                OperationResponse MyMethod(Peer peer, OperationRequest request); 
              </code>
            </summary>
            <param name="targetType">
              The target Type.
            </param>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Reflection.OperationMethodInfoCache.OperationFunctions">
            <summary>
              Gets OperationFunctions.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Reflection.OperationMethodInfoCache.OperationMethodInfos">
            <summary>
              Gets OperationMethodInfos.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Rpc.DataMemberAttribute">
            <summary>
              When applied to the member of a type, specifies that the member 
              is part of a data contract and should by serialized.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Rpc.DataMemberAttribute.Code">
            <summary>
              Gets or sets the code.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Rpc.DataMemberAttribute.IsOptional">
            <summary>
              Gets or sets a value indicating whether IsOptional.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Rpc.DataMemberAttribute.Name">
            <summary>
              Gets or sets the data members name.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Rpc.IOperationHandler">
            <summary>
              <see cref="P:Photon.SocketServer.Rpc.Peer.CurrentOperationHandler">Peer.CurrentOperationHandler</see> is an <see cref="T:Photon.SocketServer.Rpc.IOperationHandler"/>.
              The implementor handles incoming <see cref="T:Photon.SocketServer.OperationRequest">OperationRequests</see> (<see cref="M:Photon.SocketServer.Rpc.Peer.OnOperationRequest(Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)"/>, 
              peer disconnects (<see cref="M:Photon.SocketServer.Rpc.Peer.OnDisconnect(PhotonHostRuntimeInterfaces.DisconnectReason,System.String)"/>) and disconnects that are invoked from other peers (<see cref="M:Photon.SocketServer.Rpc.Peer.OnDisconnectByOtherPeer(Photon.SocketServer.PeerBase,Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)"/>).
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.IOperationHandler.OnDisconnect(Photon.SocketServer.PeerBase)">
            <summary>
              Called by <see cref="M:Photon.SocketServer.Rpc.Peer.OnDisconnect(PhotonHostRuntimeInterfaces.DisconnectReason,System.String)"/>.
            </summary>
            <param name="peer">
              The calling peer.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.IOperationHandler.OnDisconnectByOtherPeer(Photon.SocketServer.PeerBase)">
            <summary>
              Called by the <see cref="M:Photon.SocketServer.Rpc.Peer.OnDisconnectByOtherPeer(Photon.SocketServer.PeerBase,Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)"/>.
            </summary>
            <param name="peer">
              The calling peer.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.IOperationHandler.OnOperationRequest(Photon.SocketServer.PeerBase,Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)">
            <summary>
              Called by <see cref="M:Photon.SocketServer.Rpc.Peer.OnOperationRequest(Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)"/>.
            </summary>
            <param name="peer">
              The calling peer.
            </param>
            <param name="operationRequest">
              The operation request.
            </param>
            <param name="sendParameters">
              The send Parameters.
            </param>
            <returns>
              The operation response.
            </returns>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Reflection.ObjectDataMemberMapper">
            <summary>
              Provides methods to get and set objects fields and properties per reflection.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Reflection.ObjectDataMemberMapper.GetValues``1(System.Object)">
            <summary>
              The get values.
            </summary>
            <param name="source">
              The source.
            </param>
            <typeparam name="TAttribute">
              Search type for fields of <paramref name="source"/>.
            </typeparam>
            <returns>
              A dictionary with the key/value pairs of error code 1 if a value is null.
            </returns>
            <exception cref="T:System.ArgumentException">
              Mandatory member of <paramref name="source"/> is null.
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Reflection.ObjectDataMemberMapper.GetValuesByName``1(System.Object)">
            <summary>
              Gets a data objects member values as a name value dictionary.
            </summary>
            <typeparam name = "TAttribute">The type of the attribute.</typeparam>
            <param name = "source">The data object source.</param>
            <returns>returns a dictionary containing the data objects member values.</returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Reflection.ObjectDataMemberMapper.TrySetValues``1(System.Object,System.Collections.Generic.IDictionary{System.Byte,System.Object},Photon.SocketServer.Rpc.Reflection.ObjectDataMemberMapper.TryConvertDelegate{``0},System.Collections.Generic.List{Photon.SocketServer.Rpc.Reflection.ObjectMemberInfo{``0}}@,System.Collections.Generic.List{Photon.SocketServer.Rpc.Reflection.ObjectMemberInfo{``0}}@)">
            <summary>
              The try set values.
            </summary>
            <param name = "target">
              The target.
            </param>
            <param name = "values">
              The values.
            </param>
            <param name = "convertMethod">
              The convert method.
            </param>
            <param name = "missingParams">
              The missing params.
            </param>
            <param name = "invalidParams">
              The invalid params.
            </param>
            <typeparam name = "TAttribute">
              the attribute type
            </typeparam>
            <returns>
              true if successful.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Reflection.ObjectDataMemberMapper.TrySetValues``1(System.Object,System.Collections.Generic.IDictionary{System.String,System.Object},Photon.SocketServer.Rpc.Reflection.ObjectDataMemberMapper.TryConvertDelegate{``0},System.Collections.Generic.List{Photon.SocketServer.Rpc.Reflection.ObjectMemberInfo{``0}}@,System.Collections.Generic.List{Photon.SocketServer.Rpc.Reflection.ObjectMemberInfo{``0}}@)">
            <summary>
              The try set values.
            </summary>
            <param name = "target">
              The target.
            </param>
            <param name = "values">
              The values.
            </param>
            <param name = "convertMethod">
              The convert method.
            </param>
            <param name = "missingParams">
              The missing params.
            </param>
            <param name = "invalidParams">
              The invalid params.
            </param>
            <typeparam name = "TAttribute">
              the attribute type
            </typeparam>
            <returns>
              true if successful.
            </returns>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Reflection.ObjectDataMemberMapper.TryConvertDelegate`1">
            <summary>
              The try convert delegate.
            </summary>
            <param name = "targetMember">
              The target member.
            </param>
            <param name = "value">
              The value.
            </param>
            <typeparam name = "TAttribute">
              The attribute type
            </typeparam>
            <returns>
              True if value is legal.
            </returns>
        </member>
        <member name="T:Photon.SocketServer.OperationRequest">
            <summary>
              Each incoming operation is translated to an <see cref="T:Photon.SocketServer.OperationRequest"/>.
              It is then dispatched with <see cref="M:Photon.SocketServer.PeerBase.OnOperationRequest(Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)"/>.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.OperationRequest.#ctor(System.Byte,System.Object)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.OperationRequest"/> class.
            </summary>
            <param name="operationCode">
              The operation Code.
            </param>
            <param name="dataContract">
              All properties of <paramref name="dataContract"/> with the <see cref="T:Photon.SocketServer.Rpc.DataMemberAttribute"/> are mapped to the <see cref="P:Photon.SocketServer.OperationRequest.Parameters"/> dictionary.
            </param>
        </member>
        <member name="M:Photon.SocketServer.OperationRequest.#ctor(System.Byte,System.Collections.Generic.Dictionary{System.Byte,System.Object})">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.OperationRequest"/> class.
              This constructor sets the <see cref="P:Photon.SocketServer.OperationRequest.Parameters"/> and the <see cref="P:Photon.SocketServer.OperationRequest.OperationCode"/>.
            </summary>
            <param name="operationCode">
              Determines the <see cref="P:Photon.SocketServer.OperationRequest.OperationCode"/>.
            </param>
            <param name="parameters">
              Determines the <see cref="P:Photon.SocketServer.OperationRequest.Parameters"/>.
            </param>
        </member>
        <member name="M:Photon.SocketServer.OperationRequest.#ctor(System.Byte)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.OperationRequest"/> class.
            </summary>
            <param name="operationCode">
              The operation Code.
            </param>
        </member>
        <member name="M:Photon.SocketServer.OperationRequest.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.OperationRequest"/> class.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.OperationRequest.SetParameters(System.Object)">
            <summary>
              Converts properties of an object to <see cref="P:Photon.SocketServer.OperationRequest.Parameters"/>.
              Included properties require the <see cref="T:Photon.SocketServer.Rpc.DataMemberAttribute"/>.
            </summary>
            <param name="dataContract">
              The properties of this object are mapped to <see cref="P:Photon.SocketServer.OperationRequest.Parameters"/>.
            </param>
        </member>
        <member name="M:Photon.SocketServer.OperationRequest.SetParameters(System.Collections.Generic.Dictionary{System.Byte,System.Object})">
            <summary>
              Replaces the <see cref="P:Photon.SocketServer.OperationRequest.Parameters"/> with <paramref name="parameters"/>.
            </summary>
            <param name="parameters">
              The parameters to set.
            </param>
        </member>
        <member name="P:Photon.SocketServer.OperationRequest.Item(System.Byte)">
            <summary>
            Gets or sets the paramter associated with the specified key.
            </summary>
            <param name="parameterKey">The key of the parameter to get or set.</param>
            <returns>
            The parameter associated with the specified key. 
            If the specified key is not found, a get operation throws a KeyNotFoundException, 
            and a set operation creates a new paramter with the specified key.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <see cref="P:Photon.SocketServer.OperationRequest.Parameters"/> property has not been initialized.
            </exception>
        </member>
        <member name="P:Photon.SocketServer.OperationRequest.OperationCode">
            <summary>
              Gets or sets the operation code. It determines how the server responds.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.OperationRequest.Parameters">
            <summary>
              Gets or sets the request parameters.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol">
            <summary>
              The GpBinary implementation of <see cref="T:Photon.SocketServer.IRpcProtocol"/>.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.ParameterCodeDebug">
            <summary>
              The parameter code debug.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.ParameterCodeError">
            <summary>
              The parameter code error.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.ParameterCodeEvent">
            <summary>
              The parameter code event.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.ParameterCodeOperation">
            <summary>
              The parameter code operation.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.HeaderV1Instance">
            <summary>
              The protocol instane with the old header.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.HeaderV2Instance">
            <summary>
              The protocol instane with the new header.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.ProtocolVersion">
            <summary>
              The protocol version 1.5.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.log">
            <summary>
              An <see cref="T:ExitGames.Logging.ILogger"/> instance used to log messages to the logging framework.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.operationDataLogger">
            <summary>
              An <see cref="T:ExitGames.Logging.ILogger"/> instance used to log operations to the logging framework.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.headerSize">
            <summary>
              the rts message header size
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.headerWriter">
            <summary>
              the rts message header writer
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.protocolType">
            <summary>
              The protocol type
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.#ctor(Photon.SocketServer.Rpc.Protocols.ProtocolType,Photon.SocketServer.Rpc.Protocols.IRtsMessageHeaderConverter)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol"/> class.
            </summary>
            <param name="protocolType">
              The protocol Type.
            </param>
            <param name="headerWriter">
              The header Provider.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.Serialize(System.IO.Stream,System.Object)">
            <summary>
              Serialze an object to a stream
            </summary>
            <param name = "stream">
              The stream.
            </param>
            <param name = "obj">
              The object to serialize.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.SerializeEventData(Photon.SocketServer.EventData)">
            <summary>
              The serialize event.
            </summary>
            <param name="eventData">
              The event data.
            </param>
            <returns>
              The serialized event.
            </returns>
            <exception cref="T:System.IO.InvalidDataException">
              A value can not be serialized.
            </exception>
            <exception cref="T:System.ArrayTypeMismatchException">
              A collection with different types can not be serialized.
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.SerializeEventDataEncrypted(Photon.SocketServer.IEventData,Photon.SocketServer.Security.ICryptoProvider)">
            <summary>
              Encrypts an event.
            </summary>
            <param name="eventData">
              The event data.
            </param>
            <param name="cryptoProvider">
              The crypto provider.
            </param>
            <returns>
              The encrypted event.
            </returns>
            <exception cref="T:System.ArgumentNullException">
              cryptoProvider is null.
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.SerializeInitRequest(System.String,System.Version)">
            <summary>
              The serialize init request.
            </summary>
            <param name = "applicationId">
              The application id.
            </param>
            <param name = "clientVersion">
              The client version.
            </param>
            <returns>
              a serialized init request message
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.SerializeInitResponse">
            <summary>
              The serialize init response.
            </summary>
            <returns>
              The serialized init response.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.SerializeInternalOperationRequest(Photon.SocketServer.OperationRequest)">
            <summary>
              Serializes an internal <see cref="T:Photon.SocketServer.OperationRequest"/>.
            </summary>
            <param name="operationRequest">
              The operation request.
            </param>
            <returns>
              The serialized operation request.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.SerializeInternalOperationResponse(Photon.SocketServer.OperationResponse)">
            <summary>
              Serializes an internal <see cref="T:Photon.SocketServer.OperationResponse"/>.
            </summary>
            <param name="operationResponse">
              The operation response.
            </param>
            <returns>
              The serialized operation response.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.SerializeOperationRequest(Photon.SocketServer.OperationRequest)">
            <summary>
              Serializes an operation request.
            </summary>
            <param name = "operationRequest">
              The operation request.
            </param>
            <returns>
              a serialized operation request message
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.SerializeOperationRequestEncrypted(Photon.SocketServer.OperationRequest,Photon.SocketServer.Security.ICryptoProvider)">
            <summary>
              The serialize operation request.
            </summary>
            <param name="operationRequest">
              The operation request.
            </param>
            <param name="cryptoProvider">
              The <see cref="T:System.Security.Cryptography.ICryptoTransform"/> used to encrypt operation response data.
            </param>
            <returns>
              a serialized operation request message
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.SerializeOperationResponse(Photon.SocketServer.OperationResponse)">
            <summary>
              Serializes an <see cref="T:Photon.SocketServer.OperationResponse"/>.
            </summary>
            <param name="operationResponse">
              The response.
            </param>
            <returns>
              The serialized operation response.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.SerializeOperationResponseEncrypted(Photon.SocketServer.OperationResponse,Photon.SocketServer.Security.ICryptoProvider)">
            <summary>
              Serializes an <see cref="T:Photon.SocketServer.OperationResponse"/>.
              The operation response data will be encrypted using the specified <see cref="T:Photon.SocketServer.Security.ICryptoProvider"/>.
            </summary>
            <param name="operationResponse">
              The response.
            </param>
            <param name="cryptoProvider">
              An <see cref="T:Photon.SocketServer.Security.ICryptoProvider"/> instance used to encrypt the operation response.
            </param>
            <returns>
              The serialized operation response.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.TryConvertParameter(Photon.SocketServer.Rpc.Reflection.ObjectMemberInfo{Photon.SocketServer.Rpc.DataMemberAttribute},System.Object@)">
            <summary>
              The convert operation parameter.
            </summary>
            <param name = "paramterInfo">
              The paramter info.
            </param>
            <param name = "value">
              The value.
            </param>
            <returns>
              <paramref name = "value" /> or a Guid if value is 16 bytes.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.TryParse(System.IO.Stream,System.Object@)">
            <summary>
              Try to parse an object from a stream.
            </summary>
            <param name = "stream">
              The stream.
            </param>
            <param name = "obj">
              The result object.
            </param>
            <returns>
              True on success.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.TryParseEventData(System.Byte[],Photon.SocketServer.EventData@)">
            <summary>
              The try parse event data.
            </summary>
            <param name = "data">
              The data.
            </param>
            <param name = "eventData">
              The event data.
            </param>
            <returns>
              true if successful.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.TryParseEventDataEncrypted(System.Byte[],Photon.SocketServer.Security.ICryptoProvider,Photon.SocketServer.EventData@)">
            <summary>
              The try parse encrypted event data.
            </summary>
            <param name = "data">
              The data.
            </param>
            <param name = "cryptoProvider">
              The crypto provider.
            </param>
            <param name = "eventData">
              The event data.
            </param>
            <returns>
              true if successful.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.TryParseMessageHeader(System.Byte[],Photon.SocketServer.Rpc.Protocols.RtsMessageHeader@)">
            <summary>
              Tries to parse the message header.
            </summary>
            <param name = "data">
              The data.
            </param>
            <param name = "header">
              The header.
            </param>
            <returns>
              True on success.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.TryParseOperationRequest(System.Byte[],Photon.SocketServer.OperationRequest@)">
            <summary>
              Tries to parse an <see cref="T:Photon.SocketServer.OperationRequest"/>.
            </summary>
            <param name="data">
              The raw request data.
            </param>
            <param name="operationRequest">
              The operation request.
            </param>
            <returns>
              True if request was parsed successfully.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.TryParseOperationRequestEncrypted(System.Byte[],Photon.SocketServer.Security.ICryptoProvider,Photon.SocketServer.OperationRequest@)">
            <summary>
              Tries to parse an <see cref="T:Photon.SocketServer.OperationRequest"/>.
            </summary>
            <param name="data">
              The raw request data.
            </param>
            <param name="cryptoProvider">
              An <see cref="T:Photon.SocketServer.Security.ICryptoProvider"/> instance used to decrypt encrypted operation requests.
            </param>
            <param name="operationRequest">
              The operation request.
            </param>
            <returns>
              True if request was parsed successfully.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.TryParseOperationResponse(System.Byte[],Photon.SocketServer.OperationResponse@)">
            <summary>
              Tries to parse an operation response.
            </summary>
            <param name = "data">
              A byte array containing the binary operation response data.
            </param>
            <param name = "operationResponse">
              Contains the parsed operation response, if the methods returns with success;
              otherwise, the parameter will be uninitialized. 
            </param>
            <returns>
              true if the operation response was parsed successfully; otherwise false.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.TryParseOperationResponseEncrypted(System.Byte[],Photon.SocketServer.Security.ICryptoProvider,Photon.SocketServer.OperationResponse@)">
            <summary>
              Tries to parse an ecrypted operation response.
            </summary>
            <param name = "data">
              The data.
            </param>
            <param name = "cryptoProvider">
              The crypto provider.
            </param>
            <param name = "operationResponse">
              The operation response.
            </param>
            <returns>
              True on success, otherwise false.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.TryParseEventData(System.IO.Stream,Photon.SocketServer.EventData@)">
            <summary>
              The try parse event data.
            </summary>
            <param name = "stream">
              The stream.
            </param>
            <param name = "eventData">
              The event data.
            </param>
            <returns>
              true on success.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.TryParseOperationResponse(System.IO.Stream,Photon.SocketServer.OperationResponse@)">
            <summary>
              The try parse operation response.
            </summary>
            <param name = "stream">
              The stream.
            </param>
            <param name = "operationResponse">
              The operation response.
            </param>
            <returns>
              true on success.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.SerializeOperationRequest(System.IO.Stream,Photon.SocketServer.OperationRequest)">
            <summary>
              Serializes an operation request.
            </summary>
            <param name="stream">
              The stream.
            </param>
            <param name="operationRequest">
              The operation request.
            </param>
            <exception cref="T:System.IO.InvalidDataException">
              A value can not be serialized.
            </exception>
            <exception cref="T:System.ArrayTypeMismatchException">
              A collection with different types can not be serialized.
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.SerializeOperationResponse(System.IO.Stream,Photon.SocketServer.OperationResponse)">
            <summary>
              Serializes an operation response.
            </summary>
            <param name="stream">
              The stream.
            </param>
            <param name="operationResponse">
              The operation response.
            </param>
            <exception cref="T:System.IO.InvalidDataException">
              A value can not be serialized.
            </exception>
            <exception cref="T:System.ArrayTypeMismatchException">
              A collection with different types can not be serialized.
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.TryParseOperationRequest(System.IO.MemoryStream,Photon.SocketServer.OperationRequest@)">
            <summary>
              Tries to parse an operation request.
            </summary>
            <param name = "stream">
              The stream.
            </param>
            <param name = "operationRequest">
              The operation request.
            </param>
            <returns>
              True on success.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.SerializeEventData(Photon.SocketServer.Rpc.Protocols.ReusableMemoryStream,Photon.SocketServer.IEventData)">
            <summary>
              serializes the event data to a stream.
            </summary>
            <param name = "stream">
              The stream.
            </param>
            <param name = "eventData">
              The event data.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.SerializeOperationRequest(Photon.SocketServer.OperationRequest,Photon.SocketServer.Rpc.Protocols.RtsMessageType)">
            <summary>
              Serializes an <see cref="T:Photon.SocketServer.OperationResponse"/>.
            </summary>
            <param name="operationRequest">The operation request to serialize.</param>
            <param name="messageType">
              The message type. 
              Should be eiter <see cref="F:Photon.SocketServer.Rpc.Protocols.RtsMessageType.OperationResponse"/> or <see cref="F:Photon.SocketServer.Rpc.Protocols.RtsMessageType.InternalOperationResponse"/>.
            </param>
            <returns>
              A serialized operation response.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.SerializeOperationResponse(Photon.SocketServer.OperationResponse,Photon.SocketServer.Rpc.Protocols.RtsMessageType)">
            <summary>
              Serializes an <see cref="T:Photon.SocketServer.OperationResponse"/>.
            </summary>
            <param name="operationResponse">The operation response to serialize.</param>
            <param name="messageType">
              The message type. 
              Should be eiter <see cref="F:Photon.SocketServer.Rpc.Protocols.RtsMessageType.OperationResponse"/> or <see cref="F:Photon.SocketServer.Rpc.Protocols.RtsMessageType.InternalOperationResponse"/>.
            </param>
            <returns>The serialized operation response.</returns>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Protocols.GpBinaryByte.GpBinaryByteProtocol.ProtocolType">
            <summary>
              Gets the type of the protocol.
            </summary>
            <value>The type of the protocol.</value>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Reflection.OperationAttribute">
            <summary>
              This attribute is used to mark methods to be reflected by the <see cref="T:Photon.SocketServer.Rpc.Reflection.OperationDispatcher"/>.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Reflection.OperationAttribute.OperationCode">
            <summary>
              Gets or sets OperationCode.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Reflection.OperationDispatcher">
            <summary>
              This class contains functions to dispatch operations.
              The target function depends on the incoming operation code.
              All registered methods require the <see cref="T:Photon.SocketServer.Rpc.Reflection.OperationAttribute"/> and the signature <c>public OperationResponse MyMethod(PeerBase peer, OperationRequest request, SendParameters sendParameters);</c>.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Reflection.OperationDispatcher.operations">
            <summary>
              The operations.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Reflection.OperationDispatcher.#ctor(Photon.SocketServer.Rpc.Reflection.OperationMethodInfoCache,Photon.SocketServer.Rpc.IOperationHandler)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Rpc.Reflection.OperationDispatcher"/> class.
            </summary>
            <param name="operations">
              The operations.
            </param>
            <param name="operationHandler">
              The operation Handler.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Reflection.OperationDispatcher.DispatchOperationRequest(Photon.SocketServer.PeerBase,Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters,Photon.SocketServer.OperationResponse@)">
            <summary>
              The dispatch operation request.
            </summary>
            <param name = "peer">
              The peer.
            </param>
            <param name = "operationRequest">
              The operation Request.
            </param>
            <param name = "sendParameters">
              The send parameters.
            </param>
            <param name = "returnValue">
              The return Value.
            </param>
            <returns>
              ok or error.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Reflection.OperationDispatcher.CreateDelegates(Photon.SocketServer.Rpc.Reflection.OperationMethodInfoCache,Photon.SocketServer.Rpc.IOperationHandler)">
            <summary>
              The create delegates.
            </summary>
            <param name = "cache">
              The cache.
            </param>
            <param name = "handler">
              The handler.
            </param>
        </member>
        <member name="T:Photon.SocketServer.Rpc.OperationHandlerDisabled">
            <summary>
              This class is the operation handler for peers that are disconnected.
              It logs warnings for any operation requests or disconnect calls since they are unexpected.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.OperationHandlerDisabled.Instance">
            <summary>
              The singletone instance.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.OperationHandlerDisabled.Photon#SocketServer#Rpc#IOperationHandler#OnDisconnect(Photon.SocketServer.PeerBase)">
            <summary>
              <see cref="T:Photon.SocketServer.Rpc.IOperationHandler"/> implementation. Does nothing.
            </summary>
            <param name="peer">
              The calling peer.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.OperationHandlerDisabled.Photon#SocketServer#Rpc#IOperationHandler#OnDisconnectByOtherPeer(Photon.SocketServer.PeerBase)">
            <summary>
              <see cref="T:Photon.SocketServer.Rpc.IOperationHandler"/> implementation. Does nothing.
            </summary>
            <param name="peer">
              The calling peer.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.OperationHandlerDisabled.Photon#SocketServer#Rpc#IOperationHandler#OnOperationRequest(Photon.SocketServer.PeerBase,Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)">
            <summary>
              <see cref="T:Photon.SocketServer.Rpc.IOperationHandler"/> implementation. Does nothing.
            </summary>
            <param name="peer">
              The calling peer.
            </param>
            <param name="operationRequest">
              The operation request.
            </param>
            <param name="sendParameters">
              The send parameters.
            </param>
            <returns>
              The operation response.
            </returns>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Peer">
            <summary>
              Inheritance class of <see cref="T:Photon.SocketServer.PeerBase"/>. 
              This class uses an <see cref="T:Photon.SocketServer.Rpc.IOperationHandler"/> that can be set with <see cref="M:Photon.SocketServer.Rpc.Peer.SetCurrentOperationHandler(Photon.SocketServer.Rpc.IOperationHandler)"/>.
              This is useful if operations should have a different behavior when the state of the peer changes, e.g. after authentication.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Peer.log">
            <summary>
              The logger.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Peer.#ctor(Photon.SocketServer.IRpcProtocol,PhotonHostRuntimeInterfaces.IPhotonPeer)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Rpc.Peer"/> class.
            </summary>
            <param name="rpcProtocol">
              The rpc Protocol.
            </param>
            <param name="photonPeer">
              The photon Peer.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Peer.DisconnectByOtherPeer(Photon.SocketServer.PeerBase,Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)">
            <summary>
              Enqueues <see cref="M:Photon.SocketServer.Rpc.Peer.OnDisconnectByOtherPeer(Photon.SocketServer.PeerBase,Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)"/> to the <see cref="P:Photon.SocketServer.PeerBase.RequestFiber"/>.
              This method is intended to be used to disconnect a user's peer if he connects with multiple clients while the application logic wants to allow just one.
            </summary>
            <param name="otherPeer">
              The other peer.
            </param>
            <param name="otherRequest">
              The other request.
            </param>
            <param name="sendParameters">
              The send Parameters.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Peer.SetCurrentOperationHandler(Photon.SocketServer.Rpc.IOperationHandler)">
            <summary>
              Sets <see cref="P:Photon.SocketServer.Rpc.Peer.CurrentOperationHandler"/>.
            </summary>
            <param name="operationHandler">
              The new operation handler.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Peer.OnOperationRequest(Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)">
            <summary>
              Incoming <see cref="T:Photon.SocketServer.OperationRequest"/>s are handled here.
            </summary>
            <param name="operationRequest">
              The operation Request.
            </param>
            <param name="sendParameters">
              The send Parameters.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Peer.OnDisconnect(PhotonHostRuntimeInterfaces.DisconnectReason,System.String)">
            <summary>
              Executed when a peer disconnects.
              This method is being enqueued to the fiber.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Peer.OnDisconnectByOtherPeer(Photon.SocketServer.PeerBase,Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)">
            <summary>
              Called by <see cref="M:Photon.SocketServer.Rpc.Peer.DisconnectByOtherPeer(Photon.SocketServer.PeerBase,Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)">DisconnectByOtherPeer</see> after being enqueued to the <see cref="P:Photon.SocketServer.PeerBase.RequestFiber"/>.
              It calls <see cref="M:Photon.SocketServer.Rpc.IOperationHandler.OnDisconnectByOtherPeer(Photon.SocketServer.PeerBase)">CurrentOperationHandler.OnDisconnectByOtherPeer</see> and 
              then continues the <paramref name="otherRequest">original request</paramref> by calling the <paramref name="otherPeer">original peer's</paramref> <see cref="M:Photon.SocketServer.PeerBase.OnOperationRequest(Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)">OnOperationRequest</see> method.
            </summary>
            <param name="otherPeer">
              The original peer.
            </param>
            <param name="otherRequest">
              The original request.
            </param>
            <param name="sendParameters">
              The send Parameters.
            </param>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Peer.CurrentOperationHandler">
            <summary>
              Gets the current <see cref="T:Photon.SocketServer.Rpc.IOperationHandler"/>.
              <see cref="M:Photon.SocketServer.Rpc.Peer.OnOperationRequest(Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)"/> and <see cref="M:Photon.SocketServer.Rpc.Peer.OnDisconnect(PhotonHostRuntimeInterfaces.DisconnectReason,System.String)"/> calls the <see cref="P:Photon.SocketServer.Rpc.Peer.CurrentOperationHandler"/>.
              <para>
                The operation handler can be changed with <see cref="M:Photon.SocketServer.Rpc.Peer.SetCurrentOperationHandler(Photon.SocketServer.Rpc.IOperationHandler)">SetCurrentOperationHandler</see>.
                This allows a different behavior when a peer's state changes: For instance, after a login operation many operations will no longer have to return an error and can actually do something.
                Using different <see cref="T:Photon.SocketServer.Rpc.IOperationHandler">IOperationHandlers</see> is much more elegant than checking a "isLoggedIn" variable with every request.
              </para>
            </summary>
        </member>
        <member name="T:Photon.SocketServer.OperationResponse">
            <summary>
              Incoming <see cref="T:Photon.SocketServer.OperationRequest">OperationRequests</see> are often answered with a response (represented by this class).
              It can be sent to the client by using the <see cref="M:Photon.SocketServer.PeerBase.SendOperationResponse(Photon.SocketServer.OperationResponse,Photon.SocketServer.SendParameters)">PeerBase.SendOperationResponse</see> method.
              The <see cref="M:Photon.SocketServer.IRpcProtocol.SerializeOperationResponse(Photon.SocketServer.OperationResponse)">IRpcProtocol.SerializeOperationResponse</see> method serializes OperationResponse instances.
              <see cref="M:Photon.SocketServer.OperationResponse.SetParameters(System.Object)"/> converts properties that are flagged with <see cref="T:Photon.SocketServer.Rpc.DataMemberAttribute"/> into the <see cref="P:Photon.SocketServer.OperationResponse.Parameters"/> dictionary.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.OperationResponse.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.OperationResponse"/> class.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.OperationResponse.#ctor(System.Byte)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.OperationResponse"/> class.
              This constructor sets the <see cref="P:Photon.SocketServer.OperationResponse.OperationCode"/>.
            </summary>
            <param name="operationCode">
              Determines the <see cref="P:Photon.SocketServer.OperationResponse.OperationCode"/>.
            </param>
        </member>
        <member name="M:Photon.SocketServer.OperationResponse.#ctor(System.Byte,System.Object)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.OperationResponse"/> class.
              This constructor calls <see cref="M:Photon.SocketServer.OperationResponse.SetParameters(System.Object)"/> and sets the <see cref="P:Photon.SocketServer.OperationResponse.OperationCode"/>.
            </summary>
            <param name="operationCode">
              Determines the <see cref="P:Photon.SocketServer.OperationResponse.OperationCode"/>.
            </param>
            <param name="dataContract">
              All properties of the <paramref name="dataContract"/> with the <see cref="T:Photon.SocketServer.Rpc.DataMemberAttribute"/> are copied to the <see cref="P:Photon.SocketServer.OperationResponse.Parameters"/> dictionary.   
            </param>
        </member>
        <member name="M:Photon.SocketServer.OperationResponse.#ctor(System.Byte,System.Collections.Generic.Dictionary{System.Byte,System.Object})">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.OperationResponse"/> class.
              This constructor sets the <see cref="P:Photon.SocketServer.OperationResponse.Parameters"/> and the <see cref="P:Photon.SocketServer.OperationResponse.OperationCode"/>.
            </summary>
            <param name="operationCode">
              Determines the <see cref="P:Photon.SocketServer.OperationResponse.OperationCode"/>.
            </param>
            <param name="parameters">
              Determines the <see cref="P:Photon.SocketServer.OperationResponse.Parameters"/>.
            </param>
        </member>
        <member name="M:Photon.SocketServer.OperationResponse.SetParameters(System.Object)">
            <summary>
              Converts properties of an object to response <see cref="P:Photon.SocketServer.OperationResponse.Parameters"/>.
              Included properties require the <see cref="T:Photon.SocketServer.Rpc.DataMemberAttribute"/>.
            </summary>
            <param name="dataContract">
              Properties of this object with the the <see cref="T:Photon.SocketServer.Rpc.DataMemberAttribute"/> converted to <see cref="P:Photon.SocketServer.OperationResponse.Parameters"/>.
            </param>
        </member>
        <member name="M:Photon.SocketServer.OperationResponse.SetParameters(System.Collections.Generic.Dictionary{System.Byte,System.Object})">
            <summary>
              Replaces the <see cref="P:Photon.SocketServer.OperationResponse.Parameters"/> with <paramref name="parameters"/>.
            </summary>
            <param name="parameters">
              The parameters to set.
            </param>
        </member>
        <member name="P:Photon.SocketServer.OperationResponse.DebugMessage">
            <summary>
              Gets or sets the debug message. Error code 0 returns typically debug message "Ok".
            </summary>
        </member>
        <member name="P:Photon.SocketServer.OperationResponse.OperationCode">
            <summary>
              Gets or sets the operation code. It allows the client to idenitfy which operation was answered.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.OperationResponse.Parameters">
            <summary>
              Gets or sets the response parameters.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.OperationResponse.Item(System.Byte)">
            <summary>
            Gets or sets the paramter associated with the specified key.
            </summary>
            <param name="parameterKey">The key of the parameter to get or set.</param>
            <returns>
            The parameter associated with the specified key. 
            If the specified key is not found, a get operation throws a KeyNotFoundException, 
            and a set operation creates a new paramter with the specified key.
            </returns>
            <exception cref="T:System.NullReferenceException">
            The <see cref="P:Photon.SocketServer.OperationResponse.Parameters"/> property has not been initialized.
            </exception>
        </member>
        <member name="P:Photon.SocketServer.OperationResponse.ReturnCode">
            <summary>
              Gets or sets the error code. Code 0 means OK.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Reflection.ObjectMemberInfo`1">
            <summary>
              This class contains reflection data about a property or a field.
            </summary>
            <typeparam name = "TAttribute">
              The type of the mapped attribute.
            </typeparam>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Reflection.ObjectMemberInfo`1.getterDelegate">
            <summary>
              Delegate used to invoke the field or property get method.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Reflection.ObjectMemberInfo`1.setterDelegate">
            <summary>
              Delegate used to invoke the field or property set method.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Reflection.ObjectMemberInfo`1.#ctor(System.Reflection.FieldInfo,System.Type)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Rpc.Reflection.ObjectMemberInfo`1"/> class.
            </summary>
            <param name="fieldInfo">
              The field info.
            </param>
            <param name="attributeType">
              The attribute type.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Reflection.ObjectMemberInfo`1.#ctor(System.Reflection.PropertyInfo,System.Type)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Rpc.Reflection.ObjectMemberInfo`1"/> class.
            </summary>
            <param name="propertyInfo">
              The property info.
            </param>
            <param name="attributeType">
              The attribute type.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Reflection.ObjectMemberInfo`1.#ctor(System.Reflection.MemberInfo,System.Type,System.Type)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Rpc.Reflection.ObjectMemberInfo`1"/> class.
            </summary>
            <param name="memberInfo">
              The member info.
            </param>
            <param name="attributeType">
              The attribute type.
            </param>
            <param name="valueType">
              The value type.
            </param>
            <exception cref="T:System.ArgumentException">
              <paramref name="memberInfo"/> does not define the <paramref name="attributeType"/>.
            </exception>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Reflection.ObjectMemberInfo`1.GetValue(System.Object)">
            <summary>
              The get value.
            </summary>
            <param name = "target">
              The target.
            </param>
            <returns>
              The value.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Reflection.ObjectMemberInfo`1.SetValue(System.Object,System.Object)">
            <summary>
              The set value.
            </summary>
            <param name = "target">
              The target.
            </param>
            <param name = "value">
              The value.
            </param>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Reflection.ObjectMemberInfo`1.MemberAttribute">
            <summary>
              Gets the members attribute.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Reflection.ObjectMemberInfo`1.MemberInfo">
            <summary>
              Gets the member info.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Reflection.ObjectMemberInfo`1.TypeCode">
            <summary>
              Gets the members <see cref="P:Photon.SocketServer.Rpc.Reflection.ObjectMemberInfo`1.TypeCode"/>.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Rpc.Reflection.ObjectMemberInfo`1.ValueType">
            <summary>
              Gets the type of the value.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Rpc.Reflection.ObjectMemberInfoCache`1">
            <summary>
              A cache for <see cref="T:Photon.SocketServer.Rpc.Reflection.ObjectMemberInfo`1">ObjectMemberInfo</see> instances.
            </summary>
            <typeparam name="TAttribute">
              The ObjectMemberInfo attribute type.
            </typeparam>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Reflection.ObjectMemberInfoCache`1.dictionary">
            <summary>
              The dictionary.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Rpc.Reflection.ObjectMemberInfoCache`1.searchType">
            <summary>
              The search type.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Reflection.ObjectMemberInfoCache`1.GetMembers(System.Type)">
            <summary>
              The get members.
            </summary>
            <param name = "targetType">
              The target type.
            </param>
            <returns>
              a list of member infos 
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Rpc.Reflection.ObjectMemberInfoCache`1.GetMemberInfos(System.Type)">
            <summary>
              The get member infos.
            </summary>
            <param name = "targetType">
              The target type.
            </param>
            <returns>
              A list of mapped properties.
            </returns>
        </member>
        <member name="T:Photon.SocketServer.Security.RijndaelCryptoProvider">
            <summary>
              This <see cref="T:Photon.SocketServer.Security.ICryptoProvider"/> implements the Rijndael algorithm.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Security.ICryptoProvider">
            <summary>
              Provides methods to encrypt and decrypt binary data.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Security.ICryptoProvider.Decrypt(System.Byte[])">
            <summary>
              Decrypts the specified data.
            </summary>
            <param name = "data">The data to decrypt.</param>
            <returns>A byte array containing the decrypted data.</returns>
        </member>
        <member name="M:Photon.SocketServer.Security.ICryptoProvider.Decrypt(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Decrypts the specified data.
            </summary>
            <param name = "data">The data.</param>
            <param name = "offset">The offset.</param>
            <param name = "count">The count.</param>
            <returns>A byte array containing the decrypted data.</returns>
        </member>
        <member name="M:Photon.SocketServer.Security.ICryptoProvider.Encrypt(System.Byte[])">
            <summary>
              Encrypts the specified data.
            </summary>
            <param name = "data">The data to encrypt.</param>
            <returns>A byte array containing the encrypted data.</returns>
        </member>
        <member name="M:Photon.SocketServer.Security.ICryptoProvider.Encrypt(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Encrypts the specified data.
            </summary>
            <param name = "data">The data to encrypt.</param>
            <param name = "offset">The offset.</param>
            <param name = "count">The count.</param>
            <returns>A byte array containing the encrypted data.</returns>
        </member>
        <member name="P:Photon.SocketServer.Security.ICryptoProvider.IsInitialized">
            <summary>
              Gets a value indicating whether IsInitialized.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Security.RijndaelCryptoProvider.logger">
            <summary>
              An <see cref="T:ExitGames.Logging.ILogger"/> instance used to log to the logging framework.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Security.RijndaelCryptoProvider.crypto">
            <summary>
              The symmetric algorithm.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Security.RijndaelCryptoProvider.#ctor(System.Byte[])">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Security.RijndaelCryptoProvider"/> class.
            </summary>
            <param name="sharedKey">The shared key.</param>
        </member>
        <member name="M:Photon.SocketServer.Security.RijndaelCryptoProvider.#ctor(System.Byte[],System.Security.Cryptography.PaddingMode)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Security.RijndaelCryptoProvider"/> class.
            </summary>
            <param name="sharedKey">The shared Key.</param>
            <param name="paddingMode">The padding mode.</param>
        </member>
        <member name="M:Photon.SocketServer.Security.RijndaelCryptoProvider.Decrypt(System.Byte[])">
            <summary>
              Decrypts the <paramref name = "data" />.
            </summary>
            <param name = "data">
              The data.
            </param>
            <returns>
              The decrypted data.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Security.RijndaelCryptoProvider.Decrypt(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Decrypts the <paramref name = "data" />.
            </summary>
            <param name = "data">
              The data.
            </param>
            <param name = "offset">
              The offset.
            </param>
            <param name = "count">
              The count.
            </param>
            <returns>
              The decrypted data.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Security.RijndaelCryptoProvider.Encrypt(System.Byte[])">
            <summary>
              Encrypts the <paramref name = "data" />.
            </summary>
            <param name = "data">
              The data to encrypt.
            </param>
            <returns>
              The encrypted data.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Security.RijndaelCryptoProvider.Encrypt(System.Byte[],System.Int32,System.Int32)">
            <summary>
              Encrypts the <paramref name = "data" />.
            </summary>
            <param name = "data">
              The data.
            </param>
            <param name = "offset">
              The offset.
            </param>
            <param name = "count">
              The count.
            </param>
            <returns>
              The encrypted data.
            </returns>
        </member>
        <member name="P:Photon.SocketServer.Security.RijndaelCryptoProvider.IsInitialized">
            <summary>
              Gets a value indicating whether IsInitialized.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Security.RijndaelCryptoProvider.Padding">
            <summary>
              Gets the padding mode used in the symmetric algorithm. The default is PaddingMode.PKCS7
            </summary>
            <value>The padding.</value>
        </member>
        <member name="T:Photon.SocketServer.Security.OakleyGroups">
            <summary>
              Provides classical Diffie-Hellman Modular Exponentiation Groups defined by the 
              OAKLEY Key Determination Protocol (RFC 2412).
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Security.OakleyGroups.Generator">
            <summary>
              Gets the genrator (N) used by the the well known groups 1,2 and 5.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Security.OakleyGroups.OakleyPrime1024">
            <summary>
              Gets the 1024 bit prime for the well known group 2.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Security.OakleyGroups.OakleyPrime1536">
            <summary>
              Gets the 1536  bit prime for the well known group 5.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.Security.OakleyGroups.OakleyPrime768">
            <summary>
              Gets the 768 bit prime for the well known group 1.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.SendResult">
            <summary>
              Return value of <see cref="M:Photon.SocketServer.PeerBase.SendEvent(Photon.SocketServer.IEventData,Photon.SocketServer.SendParameters)"/>, <see cref="M:Photon.SocketServer.PeerBase.SendOperationResponse(Photon.SocketServer.OperationResponse,Photon.SocketServer.SendParameters)"/> and <see cref="M:Photon.SocketServer.ServerToServer.ServerPeerBase.SendOperationRequest(Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)"/>.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.SendResult.Ok">
            <summary>
              Successfully enqueued for sending.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.SendResult.Disconnected">
            <summary>
              Peer is disconnected; data sending was refused.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.SendResult.SendBufferFull">
            <summary>
              The peer's send buffer is full; data sending was refused.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.SendResult.MessageToBig">
            <summary>
            Sending failed because the message size exceeded the MaxMessageSize that was configured for the receiver. 
            </summary>
        </member>
        <member name="F:Photon.SocketServer.SendResult.InvalidChannel">
            <summary>
            Send failed because the specified channel is not supported by the peer.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.SendResult.Failed">
            <summary>
            Send Failed due an unexpected error.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.SendResult.InvalidContentType">
            <summary>
            Send failed because the specified content type is not supported by the peer.
            </summary>
        </member>
        <member name="F:Photon.SocketServer.SendResult.EncryptionNotSupported">
            <summary>
              Encrypted sending failed; peer does not support encryption.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.PeerHelper">
            <summary>
              This class provides access to some internal members of <see cref="T:Photon.SocketServer.PeerBase"/> and <see cref="T:Photon.SocketServer.ServerToServer.ServerPeerBase"/> 
              In general these methods are indended for testing.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.PeerHelper.InvokeOnEvent(Photon.SocketServer.ServerToServer.ServerPeerBase,Photon.SocketServer.IEventData,Photon.SocketServer.SendParameters)">
            <summary>
              Invokes <see cref="M:Photon.SocketServer.ServerToServer.ServerPeerBase.OnEvent(Photon.SocketServer.IEventData,Photon.SocketServer.SendParameters)"/>.
              This method is useful for testing.
            </summary>
            <param name="peer">
              The server peer.
            </param>
            <param name="eventData">
              The event Data.
            </param>
            <param name="sendParameters">
              The send Parameters.
            </param>
        </member>
        <member name="M:Photon.SocketServer.PeerHelper.InvokeOnOperationRequest(Photon.SocketServer.PeerBase,Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)">
            <summary>
              Invokes <see cref="M:Photon.SocketServer.PeerBase.OnOperationRequest(Photon.SocketServer.OperationRequest,Photon.SocketServer.SendParameters)"/>.
              This method is useful for testing.
            </summary>
            <param name="peer">
              The peer.
            </param>
            <param name="operationRequest">
              The operation request.
            </param>
            <param name="sendParameters">
              The send Parameters.
            </param>
        </member>
        <member name="M:Photon.SocketServer.PeerHelper.InvokeOnOperationResponse(Photon.SocketServer.ServerToServer.ServerPeerBase,Photon.SocketServer.OperationResponse,Photon.SocketServer.SendParameters)">
            <summary>
              Invokes <see cref="M:Photon.SocketServer.ServerToServer.ServerPeerBase.OnOperationResponse(Photon.SocketServer.OperationResponse,Photon.SocketServer.SendParameters)"/>.
              This method is useful for testing.
            </summary>
            <param name="peer">
              The server peer.
            </param>
            <param name="operationResponse">
              The operation response.
            </param>
            <param name="sendParameters">
              The send Parameters.
            </param>
        </member>
        <member name="M:Photon.SocketServer.PeerHelper.SimulateDisconnect(Photon.SocketServer.PeerBase)">
            <summary>
              This method simlates a disconnect.
              This method is useful for testing.
            </summary>
            <param name = "peer">
              The disconnected peer.
            </param>
        </member>
        <member name="M:Photon.SocketServer.PeerHelper.SimulateReceive(Photon.SocketServer.PeerBase,System.Byte[],Photon.SocketServer.SendParameters)">
            <summary>
              This method simulates that data was received from a client.
            </summary>
            <param name = "peer">
              The peer.
            </param>
            <param name = "data">
              The received data.
            </param>
            <param name = "sendParameters">
              The send Options.
            </param>
        </member>
        <member name="F:Photon.SocketServer.ServerToServer.TemporaryServerPeer.operationDataLogger">
            <summary>
              The operation data logger.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TemporaryServerPeer.#ctor(Photon.SocketServer.ApplicationBase,System.Net.IPEndPoint,System.String,System.Object,System.Boolean,Photon.SocketServer.IRpcProtocol)">
            <summary>
            Initializes a new instance of the <see cref="T:Photon.SocketServer.ServerToServer.TemporaryServerPeer"/> class for TCP connections. 
            </summary>
            <param name="application">
            The application that requested to establish the connection.
            </param>
            <param name="remoteEndPoint">
            The remote endpoint to connect to.
            </param>
            <param name="appName">
            The application name to connect to.
            </param>
            <param name="state">
            A state object that is passed to the callback 
            </param>
            <param name="useMux">
            Share a single physical connection between multiple logical connections.
            </param>
            <param name="protocol">
            The protocol used to serialize the message data.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TemporaryServerPeer.#ctor(Photon.SocketServer.ApplicationBase,System.Net.IPEndPoint,System.String,System.Boolean,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Photon.SocketServer.ServerToServer.TemporaryServerPeer"/> class for TCP connections. 
            </summary>
            <param name="application">
            The application that requested to establish the connection.
            </param>
            <param name="remoteEndPoint">
            The remote endpoint to connect to.
            </param>
            <param name="appName">
            The application name to connect to.
            </param>
            <param name="useMux">
            Share a single physical connection between multiple logical connections.
            </param>
            <param name="state">
            A state object that is passed to the callback 
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TemporaryServerPeer.#ctor(Photon.SocketServer.ApplicationBase,System.Net.IPEndPoint,System.String,System.Object,System.Byte,System.Nullable{System.Int16})">
            <summary>
            Initializes a new instance of the <see cref="T:Photon.SocketServer.ServerToServer.TemporaryServerPeer"/> class for reliable UDP connections. 
            </summary>
            <param name="application">
            The application that requested to establish the connection.
            </param>
            <param name="remoteEndPoint">
            The remote endpoint to connect to.
            </param>
            <param name="appName">
            The application name to connect to.
            </param>
            <param name="state">
            A state object that is passed to the callback 
            </param>
            <param name="numChannels">
            The number of channels that are used by the UDP connection.
            </param>
            <param name="mtu">
            The maximum size for each package.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TemporaryServerPeer.#ctor(Photon.SocketServer.ApplicationBase,System.Net.IPEndPoint,System.String,System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Photon.SocketServer.ServerToServer.TemporaryServerPeer"/> class for Hixie76 WebSocket connections. 
            </summary>
            <param name="application">
            The application that requested to establish the connection.
            </param>
            <param name="remoteEndPoint">
            The remote endpoint to connect to.
            </param>
            <param name="appName">
            The application name to connect to.
            </param>
            <param name="state">
            A state object that is passed to the callback 
            </param>
            <param name="origin">
            The origin of the connection
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TemporaryServerPeer.#ctor(Photon.SocketServer.ApplicationBase,System.Net.IPEndPoint,System.String,System.Object,PhotonHostRuntimeInterfaces.WebSocketVersion,Photon.SocketServer.IRpcProtocol)">
            <summary>
            Initializes a new instance of the <see cref="T:Photon.SocketServer.ServerToServer.TemporaryServerPeer"/> class for WebSocket connections other than Hixie76 (currenctly supported: HiBy10, RFC6455). 
            </summary>
            <param name="application">
            The application that requested to establish the connection.
            </param>
            <param name="remoteEndPoint">
            The remote endpoint to connect to.
            </param>
            <param name="appName">
            The application name to connect to.
            </param>
            <param name="state">
            A state object that is passed to the callback 
            </param>
            <param name="webSocketVersion">
            The WebSocket protocol version.
            </param>
            <param name="protocol">
            The protocol used to serialize the message data.
            </param>
        </member>
        <member name="M:Photon.SocketServer.ServerToServer.TemporaryServerPeer.LogInitRequest(PhotonHostRuntimeInterfaces.IPhotonPeer,System.Int32,System.Byte[],Photon.SocketServer.SendResult)">
            <summary>
              Logs the init request.
            </summary>
            <param name = "peer">
              The peer.
            </param>
            <param name = "channelId">
              The channel id.
            </param>
            <param name = "data">
              The data.
            </param>
            <param name = "sendResult">
              The send result.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Web.AsyncResult.#ctor(System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Photon.SocketServer.Web.AsyncResult"/> class.
            </summary>
            <param name="asyncCallback">
            The async callback.
            </param>
            <param name="state">
            The state.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Web.AsyncResult.EndInvoke">
            <summary>
            End invoke.
            </summary>
            <remarks>
            This method assumes that only 1 thread calls EndInvoke for this object 
            </remarks>
        </member>
        <member name="M:Photon.SocketServer.Web.AsyncResult.CreateWaitHandle">
            <summary>
            Private method to create the IAsyncResult AsyncWaitHandle.
            </summary>
            <remarks>
            The WaitHandle, a reference to a ManualResetEvent object, is only needed if 
            the code starting the asynchronous operation queries the AsyncWaitHandle 
            property or if the code calls the EndInvoke method before the operation 
            has actually completed executing.
            </remarks>
        </member>
        <member name="P:Photon.SocketServer.Web.AsyncResult.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains 
            information about an asynchronous operation.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Web.AsyncResult.AsyncWaitHandle">
            <summary>
            Gets a <see cref="T:System.Threading.WaitHandle"/> that is used 
            to wait for an asynchronous operation to complete.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Web.AsyncResult.CompletedSynchronously">
            <summary>
            Gets a value indicating whether the asynchronous 
            operation completed synchronously.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Web.AsyncResult.IsCompleted">
            <summary>
            Gets a value indicating whether the asynchronous 
            operation has completed. 
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Web.AsyncResult.Status">
            <summary>
            Gets the current status.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Web.HttpApplicationHandler">
            <summary>
            <see cref="T:System.Web.IHttpAsyncHandler"/> implementation to host photon applications in a web application.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Web.HttpApplicationHandler.#ctor(PhotonHostRuntimeInterfaces.IPhotonApplication,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Photon.SocketServer.Web.HttpApplicationHandler"/> class. 
            </summary>
            <param name="photonApplication">
            The photon application to host.
            </param>
            <param name="applicationName">
            The application name.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Web.HttpApplicationHandler.#ctor(PhotonHostRuntimeInterfaces.IPhotonApplication,System.String,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Photon.SocketServer.Web.HttpApplicationHandler"/> class. 
            </summary>
            <param name="photonApplication">
            The photon application to host.
            </param>
            <param name="applicationName">
            The application name.
            </param>
            <param name="peerExpiration">
            The time after which a peer will be diconnected due inactivity.
            The default value is 30 seconds.
            </param>
        </member>
        <member name="T:Photon.SocketServer.Web.HttpClientBase">
            <summary>
            Photon http application client implementation.
            </summary>
            <remarks>
            The 
            </remarks>
        </member>
        <member name="M:Photon.SocketServer.Web.HttpClientBase.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Photon.SocketServer.Web.HttpClientBase"/> class.
            </summary>
            <param name="url">
            The url of the photon http application.
            </param>
            <param name="timeout">
            The length of time, in milliseconds, before http request are timing out.
            </param>
            <param name="pingInterval">
            The time in milliseconds when an automatic ping will be sent after the last operation 
            request to fetch new messages from the server.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Web.HttpClientBase.#ctor(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Photon.SocketServer.Web.HttpClientBase"/> class.
            </summary>
            <param name="url">The url of the photon http application.</param>
            <param name="timeout">The length of time, in milliseconds, before the operation request are timing out.</param>
            <param name="pingInterval">
            The time in milliseconds when an automatic ping will be sent after the last operation 
            request to fetch new messages from the server.
            </param>
            <param name="connectionId">The connection id.</param>
        </member>
        <member name="M:Photon.SocketServer.Web.HttpClientBase.Connect(System.String)">
            <summary>
            Connects this instance to a photon http application.
            </summary>
            <returns>
            True if successfully connected to the photon application; otherwise false.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Web.HttpClientBase.InitializeEncryption">
            <summary>
              Initializes the peer to receive and send encrypted operations.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Web.HttpClientBase.SendOperationRequest(Photon.SocketServer.OperationRequest)">
            <summary>
            Sends an operation request to a photon http application.
            </summary>
            <param name="request">The operation request.</param>
            <returns>
            The operation response received from the photon application or null if no
            resonse was sent.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Web.HttpClientBase.SendOperationRequest(Photon.SocketServer.OperationRequest,System.Boolean)">
            <summary>
            Sends an operation request to a photn http application.
            </summary>
            <param name="request">The operation request.</param>
            <param name="encrypt">
            Specifies if the request should be encrypted.
            </param>
            <returns>
            The operation response received from the photon application or null if no
            resonse was sent.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Web.HttpClientBase.OnDisconnect(PhotonHostRuntimeInterfaces.DisconnectReason,System.String)">
            <summary>
              The connection was closed.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Web.HttpClientBase.OnEvent(Photon.SocketServer.IEventData,Photon.SocketServer.SendParameters)">
            <summary>
              Called when an <see cref="T:Photon.SocketServer.EventData"/> was received.
            </summary>
            <param name="eventData">
              The event data.
            </param>
            <param name="sendParameters">
              The send Parameters.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Web.HttpClientBase.OnOperationResponse(Photon.SocketServer.OperationResponse,Photon.SocketServer.SendParameters)">
            <summary>
              Called when an <see cref="T:Photon.SocketServer.OperationResponse"/> was received.
            </summary>
            <param name="operationResponse">
              The operation response.
            </param>
            <param name="sendParameters">
              The send Parameters.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Web.HttpClientBase.OnInitializeEcryptionCompleted(System.Int16,System.String)">
            <summary>
              Invoked if an initialize encryption request was completed.
            </summary>
            <param name = "resultCode">
              The result code.
            </param>
            <param name = "debugMessage">
              The debuf message.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Web.HttpClientBase.OnUnexpectedDataReceived(System.Byte[],Photon.SocketServer.SendParameters)">
            <summary>
              This method is called if incoming data has an unexpected format.
              Per default this method disconnects the client. 
              Override to change this behavior.
            </summary>
            <param name = "data">
              The received data.
            </param>
            <param name = "sendParameters">
              The send options.
            </param>
        </member>
        <member name="P:Photon.SocketServer.Web.HttpClientBase.Address">
            <summary>
            Gets the address.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Web.HttpClientBase.CryptoProvider">
            <summary>
              Gets or sets the CryptoProvider.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Web.HttpClientBase.ConnectionId">
            <summary>
            Gets the connection id.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Web.HttpClientBase.IsConnected">
            <summary>
            Gets a value indicating if the client is connected.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Web.HttpSettings.S2SPingFrequency">
            <summary>
            The Ping frequency is how often a ping is sent out for server to server connections when no data is flowing.
            </summary>
        </member>
        <member name="P:Photon.SocketServer.Web.PeerCache.PeerExpiration">
            <summary>
              Gets or sets the time span after which a peer will be removed from the cache due inactivity.
              The default value is 5 minutes.
            </summary>
        </member>
        <member name="T:Photon.SocketServer.Web.TcpPeer">
            <summary>
              Base class for Tcp client implementations.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Web.TcpPeer.SendPing">
            <summary>
              Sends a ping request to the server.
              The ping request will be send with <see cref="P:System.Environment.TickCount"/> 
              as the tme stamp.
            </summary>
            <returns>
              Returns OK or disconnected.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Web.TcpPeer.SendPing(System.Int32)">
            <summary>
              Sends a ping request to the server.
            </summary>
            <param name = "timeStamp">
              A user definined time stamp. 
              The time stamp will be send back by the server with the ping response
              ans can be used to mesure the duration of the request.
            </param>
            <returns>
              Returns OK or disconnected.
            </returns>
        </member>
        <member name="P:Photon.SocketServer.Web.TcpPeer.Connected">
            <summary>
              Gets a value indicating whether this instance is connected to a remote host.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Web.TcpReader.#ctor(Photon.SocketServer.Web.ITcpListener)">
            <summary>
              Initializes a new instance of the <see cref="T:Photon.SocketServer.Web.TcpReader"/> class.
            </summary>
        </member>
        <member name="M:Photon.SocketServer.Web.TcpReader.Parse(System.Byte[],System.Int32)">
            <summary>
              The parse.
            </summary>
            <param name = "buffer">
              The buffer.
            </param>
            <param name = "count">
              The count.
            </param>
        </member>
        <member name="M:Photon.SocketServer.Web.TcpReader.ParseHeader(System.Byte[],System.Int32,System.Int32)">
            <summary>
              The parse header.
            </summary>
            <param name = "buffer">
              The buffer.
            </param>
            <param name = "offset">
              The offset.
            </param>
            <param name = "count">
              The count.
            </param>
            <returns>
              Number of bytes parsed.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Web.TcpReader.ParseMagicNumber(System.Byte[],System.Int32,System.Int32)">
            <summary>
              The parse magic number.
            </summary>
            <param name = "buffer">
              The buffer.
            </param>
            <param name = "offset">
              The offset.
            </param>
            <param name = "count">
              The count.
            </param>
            <returns>
              The parsed magic number.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Web.TcpReader.ParseMessage(System.Byte[],System.Int32,System.Int32)">
            <summary>
              The parse message.
            </summary>
            <param name = "buffer">
              The buffer.
            </param>
            <param name = "offset">
              The offset.
            </param>
            <param name = "count">
              The count.
            </param>
            <returns>
              Number of bytes parsed.
            </returns>
        </member>
        <member name="M:Photon.SocketServer.Web.TcpReader.ParsePing(System.Byte[],System.Int32,System.Int32)">
            <summary>
              The parse ping.
            </summary>
            <param name = "buffer">
              The buffer.
            </param>
            <param name = "offset">
              The offset.
            </param>
            <param name = "count">
              The count.
            </param>
            <returns>
              Number of bytes parsed.
            </returns>
        </member>
        <member name="T:Photon.SocketServer.Web.TcpReader.ParseDelegate">
            <summary>
              The parse delegate.
            </summary>
            <param name = "buffer">
              The buffer.
            </param>
            <param name = "offset">
              The offset.
            </param>
            <param name = "count">
              The count.
            </param>
            <returns>
              number of bytes parsed
            </returns>
        </member>
    </members>
</doc>
